{
  "language": "Solidity",
  "sources": {
    "contracts/abstract/AdminUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nabstract contract AdminUtility {\n    address public superAdmin;\n\n    error NotAdmin();\n\n    modifier onlyAdmin() {\n        if (msg.sender != superAdmin) revert NotAdmin();\n        _;\n    }\n\n    constructor(address _superAdmin) {\n        superAdmin = _superAdmin;\n    }\n}\n"
    },
    "contracts/BluechipsBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\nimport {IBluechipsBooster, IERC721} from \"./interfaces/IBluechipsBooster.sol\";\nimport {AdminUtility} from \"./abstract/AdminUtility.sol\";\nimport {TerminalUtility, ITerminalDirectory} from \"./abstract/TerminalUtility.sol\";\n\ncontract BluechipsBooster is IBluechipsBooster, ERC721, AdminUtility, TerminalUtility {\n    /*╔═════════════════════════════╗\n      ║   Private Stored Constants  ║\n      ╚═════════════════════════════╝*/\n\n    uint16 private constant MAX_MULTIPLIER_OF_BLUECHIPS = 150;\n    uint16 private constant MAX_MULTIPLIER_OF_CUSTOMIZED = 300;\n    uint256 private constant SECONDS_IN_DAY = 86400;\n\n    /*╔═════════════════════════════╗\n      ║    Public Stored Constants  ║\n      ╚═════════════════════════════╝*/\n\n    uint256 public constant PROOF_ETH = 1e15; // TODO 1eth=1e18 stake 1 ETH to proof\n\n    /*╔═════════════════════════════╗\n      ║  Public Stored Properties   ║\n      ╚═════════════════════════════╝*/\n\n    uint256 public override count;\n\n    mapping(bytes32 => uint256) public override tokenIdOf;\n\n    // Bytescode => Wallet Address\n    mapping(bytes32 => address) public override proofBy;\n\n    // Multiplier for each Bluechips NFT\n    // 123 => 1.23x Max multiplier: 150\n    mapping(address => uint16) public override multiplierOf;\n\n    // Final Boost ratio for Bluechips NFT in each wallet address\n    mapping(address => uint256) public override boosterWeights;\n\n    // Expired timestamp for each proof\n    mapping(bytes32 => uint256) public override proofExpiryOf;\n\n    // The Bytescode of bluechips NFT => The amount of staked ETH\n    mapping(bytes32 => uint256) public override stakedOf;\n\n    // daoId => Customized NFT Token Address => multiper\n    // 123 => 1.23x Max multiplier: 300\n    mapping(uint256 => mapping(address => uint16)) public override customMultiplierOf;\n\n    // daoId => Wallet Address => booster weights\n    mapping(uint256 => mapping(address => uint256)) public override customBoosterWeights;\n\n    /*╔══════════════════╗\n      ║   External VIEW  ║\n      ╚══════════════════╝*/\n\n    /**\n        @notice\n        Return the weights of an address weights = universal weights * customized weights\n\n        @param _projectId the project id of query\n        @param _from wallet address\n     */\n    function getBoosterWeight(uint256 _projectId, address _from)\n        external\n        view\n        returns (uint256 _weight)\n    {\n        _weight =\n            _getNoZero(boosterWeights[_from]) *\n            _getNoZero(customBoosterWeights[_projectId][_from]);\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transaction  ║\n      ╚═════════════════════════╝*/\n\n    /**\n        @notice\n        Punk:   x1.5   (150)\n        BAYC:   x1.5   (150)\n        Azuki:  x1.35  (135)\n        Doodle: x1.2   (120)\n        CloneX: x1.1   (110)\n\n        There has 2 types of Boost: BlueChips NFT and Customized NFT based on which DAO you set.\n        For customized NFT support in each DAO, will be followed by the configure when the DAO created.\n     */\n    constructor(\n        address[] memory _bluechips,\n        uint16[] memory _multipers,\n        address _superAdmin,\n        ITerminalDirectory _terminalDirectory\n    )\n        ERC721(\"BlueChip Stake Proof\", \"STAKEPROOF\")\n        AdminUtility(_superAdmin)\n        TerminalUtility(_terminalDirectory)\n    {\n        if (_bluechips.length != _multipers.length) revert SizeNotMatch();\n        for (uint256 i; i < _bluechips.length;) {\n            if (_bluechips[i] == address(0)) revert ZeroAddress();\n            if (_multipers[i] == 0 || _multipers[i] > MAX_MULTIPLIER_OF_BLUECHIPS)\n                revert BadMultiper();\n\n            multiplierOf[_bluechips[i]] = _multipers[i];\n            \n            emit AddBluechip(_bluechips[i], _multipers[i]);\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /**\n        @notice\n        DAO Creator able to set the customized NFT support to boost DAO points\n\n        @param _projectId The DAO ID\n        @param _bluechips The customized NFTs token addresses\n        @param _multipers multipliers of each nft 300 => 3x\n     */\n    function createCustomBooster(\n        uint256 _projectId,\n        address[] memory _bluechips,\n        uint16[] memory _multipers\n    ) external override onlyTerminal(_projectId) {\n        if (_bluechips.length != _multipers.length) revert SizeNotMatch();\n        for (uint256 i; i < _bluechips.length;) {\n            if (_bluechips[i] == address(0)) revert ZeroAddress();\n            if (customMultiplierOf[_projectId][_bluechips[i]] > 0) revert BoosterRegisterd();\n            if (_multipers[i] == 0 || _multipers[i] > MAX_MULTIPLIER_OF_CUSTOMIZED)\n                revert BadMultiper();\n            customMultiplierOf[_projectId][_bluechips[i]] = _multipers[i];\n            unchecked {\n                i++;\n            }\n        }\n\n        emit AddCustomBooster(_projectId, _bluechips, _multipers);\n    }\n\n    /**\n        @notice\n        People who have the bluechip NFTs can create a proof that promises they will hold the NFTs for 30 days        \n\n        @param _bluechip The bluechip NFT Address(ERC721) you want to proof\n        @param _tokenId which tokenID you want to proof\n     */\n    function createProof(address _bluechip, uint256 _tokenId) external payable override {\n        // Only the Bluechips NFT holder able to call this function.\n        address _from = msg.sender;\n\n        if (multiplierOf[_bluechip] == 0) revert BoosterNotRegisterd();\n\n        // Create a ERC721 token for caller\n        if (IERC721(_bluechip).ownerOf(_tokenId) != _from) revert NotNFTOwner();\n        if (msg.value < PROOF_ETH) revert InsufficientBalance(); // Collateral ETH\n\n        // Based on specific Bluechips NFT Token Address, plus which tokenID encoded\n        bytes32 _proof = keccak256(abi.encodePacked(_bluechip, _tokenId));\n\n        address _preOwner = proofBy[_proof];\n        if (_preOwner == _from) revert RenewFirst();\n\n        if (_preOwner != address(0)) {\n            _redeem(_bluechip, _tokenId, _proof, _from, _preOwner);\n        }\n\n        proofBy[_proof] = _from;\n        uint256 _weight = _getNoZero(boosterWeights[_from]) * multiplierOf[_bluechip];\n        boosterWeights[_from] = _weight;\n\n        uint256 _proofExpiry = block.timestamp + 30 * SECONDS_IN_DAY;\n        proofExpiryOf[_proof] = _proofExpiry;\n        stakedOf[_proof] = msg.value;\n\n        count++;\n\n        // Mint the stake proof\n        _safeMint(_from, count);\n\n        tokenIdOf[_proof] = count;\n\n        emit CreateProof(_from, _bluechip, _tokenId, _proof, _proofExpiry, _weight);\n    }\n\n    /**\n        @notice\n        People who have the customized nfts can create a proof which promises that they will hold the nfts for 30 days\n\n        @param _bluechip The customized NFT Token Addresses\n        @param _tokenId The ID of the NFT in token address\n        @param _projectId The ID of the DAO you want to register this proof\n     */\n    function createCustomProof(\n        address _bluechip,\n        uint256 _tokenId,\n        uint256 _projectId\n    ) external payable override {\n        address _from = msg.sender;\n\n        if (customMultiplierOf[_projectId][_bluechip] == 0) revert BoosterNotRegisterd();\n        if (IERC721(_bluechip).ownerOf(_tokenId) != _from) revert NotNFTOwner();\n        if (msg.value < PROOF_ETH) revert InsufficientBalance();\n\n        bytes32 _proof = keccak256(abi.encodePacked(_projectId, _bluechip, _tokenId));\n\n        address _preOwner = proofBy[_proof];\n        if (_preOwner == _from) revert RenewFirst();\n\n        if (_preOwner != address(0)) {\n            _redeem(_bluechip, _tokenId, _proof, _from, _preOwner, _projectId);\n        }\n\n        proofBy[_proof] = _from;\n\n        uint256 _weight = _getNoZero(customBoosterWeights[_projectId][_from]) *\n            customMultiplierOf[_projectId][_bluechip];\n\n        customBoosterWeights[_projectId][_from] = _weight;\n\n        uint256 _proofExpiry = block.timestamp + 30 * SECONDS_IN_DAY;\n        proofExpiryOf[_proof] = _proofExpiry;\n        stakedOf[_proof] = msg.value;\n\n        emit CreateCustomizedProof(\n            _projectId,\n            _from,\n            _bluechip,\n            _tokenId,\n            _proof,\n            _proofExpiry,\n            _weight\n        );\n    }\n\n    /**\n        @notice\n        Anyone can challenge a proof if the bluechip no longer belong to the pre owner\n\n        @param _bluechip the bluechip nft address you want to challenge\n        @param _tokenId which token you want to challenge\n     */\n    function challengeProof(address _bluechip, uint256 _tokenId) external override {\n        bytes32 _proof = keccak256(abi.encodePacked(_bluechip, _tokenId));\n        address _creator = proofBy[_proof];\n        if (_creator == address(0)) revert ProofNotRegisterd();\n        if (IERC721(_bluechip).ownerOf(_tokenId) == _creator) revert ChallengeFailed();\n\n        _redeem(_bluechip, _tokenId, _proof, msg.sender, _creator);\n\n        emit ChallengeProof(msg.sender, _bluechip, _tokenId, _proof);\n    }\n\n    /**\n        @notice\n        Anyone can challenge a proof if the customized NFT no longer belong to the pre owner\n\n        @param _bluechip the cutomized nft address you want to challenge\n        @param _tokenId which token you want to challenge\n        @param _projectId The ID of DAO for this cusotmized NFT you want to register\n     */\n    function challengeCustomProof(\n        address _bluechip,\n        uint256 _tokenId,\n        uint256 _projectId\n    ) external override {\n        bytes32 _proof = keccak256(abi.encodePacked(_projectId, _bluechip, _tokenId));\n        address _creator = proofBy[_proof];\n        if (_creator == address(0)) revert ProofNotRegisterd();\n        if (IERC721(_bluechip).ownerOf(_tokenId) == _creator) revert ChallengeFailed();\n\n        _redeem(_bluechip, _tokenId, _proof, msg.sender, _creator, _projectId);\n\n        emit ChallengeCustomizedProof(_projectId, msg.sender, _bluechip, _tokenId, _proof);\n    }\n\n    /**\n        @notice\n        The proof owner can renew the proof. Don't need to pay for renew\n\n        @param _bluechip the bluechip nft address to renew\n        @param _tokenId which token you want to renew\n     */\n    function renewProof(address _bluechip, uint256 _tokenId) external override {\n        address _from = msg.sender;\n        bytes32 _proof = keccak256(abi.encodePacked(_bluechip, _tokenId));\n        address _creator = proofBy[_proof];\n        if (_from != _creator || IERC721(_bluechip).ownerOf(_tokenId) != msg.sender)\n            revert UnAuthorized();\n\n        uint256 _proofExpiry = block.timestamp + 30 * SECONDS_IN_DAY;\n        proofExpiryOf[_proof] = _proofExpiry;\n\n        emit RenewProof(_from, _bluechip, _tokenId, _proof, _proofExpiry);\n    }\n\n    /**\n        @notice\n        The proof owner can renew the proof. Don't need to pay for renew\n\n        @param _bluechip The customized NFT token address to renew\n        @param _tokenId which token you want to renew\n        @param _projectId the project id of bluechip belongs\n     */\n    function renewCustomProof(\n        address _bluechip,\n        uint256 _tokenId,\n        uint256 _projectId\n    ) external override {\n        address _from = msg.sender;\n        bytes32 _proof = keccak256(abi.encodePacked(_projectId, _bluechip, _tokenId));\n        address _creator = proofBy[_proof];\n        if (_from != _creator || IERC721(_bluechip).ownerOf(_tokenId) != msg.sender)\n            revert UnAuthorized();\n\n        uint256 _proofExpiry = block.timestamp + 30 * SECONDS_IN_DAY;\n        proofExpiryOf[_proof] = _proofExpiry;\n\n        emit RenewCustomizedProof(_projectId, _from, _bluechip, _tokenId, _proof, _proofExpiry);\n    }\n\n    /**\n        @notice\n        The proof owner can redeem the proof\n\n        @param _bluechip the bluechip nft address to redeem\n        @param _tokenId which token you want to redeem\n     */\n    function redeemProof(address _bluechip, uint256 _tokenId) external override {\n        address _from = msg.sender;\n        bytes32 _proof = keccak256(abi.encodePacked(_bluechip, _tokenId));\n        address _creator = proofBy[_proof];\n        if (_from != _creator || _from != IERC721(_bluechip).ownerOf(_tokenId))\n            revert UnAuthorized();\n        if (block.timestamp < proofExpiryOf[_proof]) revert RedeemAfterExpired();\n\n        _redeem(_bluechip, _tokenId, _proof, _from, _from);\n\n        emit RedeemProof(_from, _bluechip, _tokenId, _proof);\n    }\n\n    /**\n        @notice\n        The proof owner can redeem the proof\n\n        @param _bluechip the customized nft address to redeem\n        @param _tokenId which token you want to redeem\n        @param _projectId The ID of the DAO that the cusotmized NFT belongs with\n     */\n    function redeemCustomProof(\n        address _bluechip,\n        uint256 _tokenId,\n        uint256 _projectId\n    ) external override {\n        address _from = msg.sender;\n        bytes32 _proof = keccak256(abi.encodePacked(_projectId, _bluechip, _tokenId));\n        address _creator = proofBy[_proof];\n        if (_from != _creator || _from != IERC721(_bluechip).ownerOf(_tokenId))\n            revert UnAuthorized();\n        if (block.timestamp < proofExpiryOf[_proof]) revert RedeemAfterExpired();\n\n        _redeem(_bluechip, _tokenId, _proof, _from, _from, _projectId);\n\n        emit RedeemCustomizedProof(_projectId, _from, _bluechip, _tokenId, _proof);\n    }\n\n    /**\n        @notice\n        The governor can add a new universal bluechip as booster\n\n        @param _bluechip bluechip address\n        @param _multiper multiper of booster\n     */\n    function addBlueChip(address _bluechip, uint16 _multiper) external override onlyAdmin {\n        if (_bluechip == address(0)) revert ZeroAddress();\n        if (multiplierOf[_bluechip] != 0) revert ForbiddenUpdate();\n\n        multiplierOf[_bluechip] = _multiper;\n\n        emit AddBluechip(_bluechip, _multiper);\n    }\n\n    /*╔═════════════════════════════╗\n      ║   Private Helper Functions  ║\n      ╚═════════════════════════════╝*/\n\n    /**\n        @notice\n        Redeem the proof of BlueChipsNFT\n\n        @param _bluechip bluechip address\n        @param _proof the proof need to delete\n        @param _beneficiary the address to eceive challenge award\n        @param _from pre owner of the proof\n     */\n    function _redeem(\n        address _bluechip,\n        uint256 _tokenId,\n        bytes32 _proof,\n        address _beneficiary,\n        address _from\n    ) private {\n        Address.sendValue(payable(_beneficiary), stakedOf[_proof]);\n        stakedOf[_proof] = 0;\n        proofExpiryOf[_proof] = 0;\n        boosterWeights[_from] = boosterWeights[_from] / multiplierOf[_bluechip];\n\n        uint256 _tokenIdOfProof = tokenIdOf[_proof];\n        _burn(_tokenIdOfProof);\n        delete tokenIdOf[_proof];\n\n        delete proofBy[_proof];\n\n        emit Remove(_from, _beneficiary, _proof, _bluechip, _tokenId, boosterWeights[_from]);\n    }\n\n    /**\n        @notice\n        Redeem the proof for customized NFT\n\n        @param _bluechip bluechip address\n        @param _proof the proof need to delete\n        @param _beneficiary the address to eceive challenge award\n        @param _from pre owner of the proof\n        @param _projectId the project id of bluechip belongs\n     */\n    function _redeem(\n        address _bluechip,\n        uint256 _tokenId,\n        bytes32 _proof,\n        address _beneficiary,\n        address _from,\n        uint256 _projectId\n    ) private {\n        Address.sendValue(payable(_beneficiary), stakedOf[_proof]);\n        stakedOf[_proof] = 0;\n        proofExpiryOf[_proof] = 0;\n\n        customBoosterWeights[_projectId][_from] =\n            customBoosterWeights[_projectId][_from] /\n            customMultiplierOf[_projectId][_bluechip];\n\n        delete proofBy[_proof];\n\n        emit RemoveCustomize(\n            _from,\n            _beneficiary,\n            _projectId,\n            _proof,\n            _bluechip,\n            _tokenId,\n            customBoosterWeights[_projectId][_from]\n        );\n    }\n\n    /**\n        @notice\n        Disable the transfer behavior\n\n        @param _from Transfer from\n        @param _to Transfer to\n        @param _tokenId Transfer token id\n     */\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) internal override {\n        super._transfer(_from, _to, _tokenId);\n        revert TransferDisabled();\n    }\n\n    /**\n        @notice\n        Return the no zero value\n\n        @param _a Giving value\n     */\n    function _getNoZero(uint256 _a) private pure returns (uint256) {\n        return _a == 0 ? 1 : _a;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IBluechipsBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IBluechipsBooster {\n    event CreateProof(\n        address indexed from,\n        address indexed bluechip,\n        uint256 tokenId,\n        bytes32 proof,\n        uint256 proofExpiry,\n        uint256 weight\n    );\n\n    event CreateCustomizedProof(\n        uint256 indexed projectId,\n        address indexed from,\n        address indexed bluechip,\n        uint256 tokenId,\n        bytes32 proof,\n        uint256 proofExpiry,\n        uint256 weight\n    );\n\n    event ChallengeProof(\n        address indexed from,\n        address indexed bluechip,\n        uint256 tokenId,\n        bytes32 proof\n    );\n\n    event ChallengeCustomizedProof(\n        uint256 indexed projectId,\n        address indexed from,\n        address indexed bluechip,\n        uint256 tokenId,\n        bytes32 proof\n    );\n\n    event RedeemProof(\n        address indexed from,\n        address indexed bluechip,\n        uint256 tokenId,\n        bytes32 proof\n    );\n\n    event RedeemCustomizedProof(\n        uint256 indexed projectId,\n        address indexed from,\n        address indexed bluechip,\n        uint256 tokenId,\n        bytes32 proof\n    );\n\n    event RenewProof(\n        address indexed from,\n        address indexed bluechip,\n        uint256 tokenId,\n        bytes32 proof,\n        uint256 proofExpiry\n    );\n\n    event RenewCustomizedProof(\n        uint256 indexed projectId,\n        address indexed from,\n        address indexed bluechip,\n        uint256 tokenId,\n        bytes32 proof,\n        uint256 proofExpiry\n    );\n\n    event Remove(\n        address indexed from,\n        address beneficiary,\n        bytes32 proof,\n        address indexed bluechip,\n        uint256 tokenId,\n        uint256 weight\n    );\n\n    event RemoveCustomize(\n        address indexed from,\n        address beneficiary,\n        uint256 projectId,\n        bytes32 proof,\n        address indexed bluechip,\n        uint256 tokenId,\n        uint256 weight\n    );\n\n    event AddBluechip(address bluechip, uint16 multiper);\n\n    event AddCustomBooster(uint256 indexed projectId, address[] bluechips, uint16[] multipers);\n\n    error SizeNotMatch();\n    error BadMultiper();\n    error ZeroAddress();\n    error RenewFirst();\n    error NotNFTOwner();\n    error InsufficientBalance();\n    error BoosterRegisterd();\n    error BoosterNotRegisterd();\n    error ProofNotRegisterd();\n    error ChallengeFailed();\n    error RedeemAfterExpired();\n    error ForbiddenUpdate();\n    error OnlyGovernor();\n    error TransferDisabled();\n\n    function count() external view returns (uint256);\n\n    function tokenIdOf(bytes32 _proof) external view returns (uint256);\n\n    function proofBy(bytes32 _proof) external view returns (address);\n\n    function multiplierOf(address _bluechip) external view returns (uint16);\n\n    function boosterWeights(address _bluechip) external view returns (uint256);\n\n    function proofExpiryOf(bytes32 _proof) external view returns (uint256);\n\n    function stakedOf(bytes32 _proof) external view returns (uint256);\n\n    function customBoosterWeights(uint256 _projectId, address _bluechip)\n        external\n        view\n        returns (uint256);\n\n    function customMultiplierOf(uint256 _projectId, address _bluechip)\n        external\n        view\n        returns (uint16);\n\n    function createCustomBooster(\n        uint256 _projectId,\n        address[] memory _bluechips,\n        uint16[] memory _multipers\n    ) external;\n\n    function createProof(address _bluechip, uint256 _tokenId) external payable;\n\n    function createCustomProof(\n        address _bluechip,\n        uint256 _tokenId,\n        uint256 _projectId\n    ) external payable;\n\n    function challengeProof(address _bluechip, uint256 _tokenId) external;\n\n    function challengeCustomProof(\n        address _bluechip,\n        uint256 _tokenId,\n        uint256 _projectId\n    ) external;\n\n    function renewProof(address _bluechip, uint256 _tokenId) external;\n\n    function renewCustomProof(\n        address _bluechip,\n        uint256 _tokenId,\n        uint256 _projectId\n    ) external;\n\n    function redeemProof(address _bluechip, uint256 _tokenId) external;\n\n    function redeemCustomProof(\n        address _bluechip,\n        uint256 _tokenId,\n        uint256 _projectId\n    ) external;\n\n    function addBlueChip(address _bluechip, uint16 _multiper) external;\n}\n"
    },
    "contracts/abstract/TerminalUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../interfaces/ITerminalUtility.sol\";\n\nabstract contract TerminalUtility is ITerminalUtility {\n    modifier onlyTerminal(uint256 _projectId) {\n        if (address(terminalDirectory.terminalOf(_projectId)) != msg.sender) revert UnAuthorized();\n        _;\n    }\n\n    ITerminalDirectory public immutable override terminalDirectory;\n\n    /** \n      @param _terminalDirectory A directory of a project's current terminal to receive payments in.\n    */\n    constructor(ITerminalDirectory _terminalDirectory) {\n        terminalDirectory = _terminalDirectory;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ITerminalUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./ITerminalDirectory.sol\";\n\ninterface ITerminalUtility {\n    error UnAuthorized();\n\n    function terminalDirectory() external view returns (ITerminalDirectory);\n}\n"
    },
    "contracts/interfaces/ITerminalDirectory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./ITerminal.sol\";\nimport \"./IProjects.sol\";\n\ninterface ITerminalDirectory {\n    event SetTerminal(\n        uint256 indexed projectId,\n        ITerminal indexed terminal,\n        address caller\n    );\n\n    error ZeroAddress();\n    error UnAuthorized();\n    error UnknowTerminal();\n\n    function projects() external view returns (IProjects);\n\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\n\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\n}\n"
    },
    "contracts/interfaces/ITerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IProjects.sol\";\nimport \"./IFundingCycles.sol\";\nimport \"./ITerminalDirectory.sol\";\nimport \"./IBluechipsBooster.sol\";\nimport \"./IDAOGovernorBooster.sol\";\nimport \"./IMembershipPassBooth.sol\";\nimport \"./IPayoutStore.sol\";\n\nstruct ImmutablePassTier {\n    uint256 tierFee;\n    uint256 multiplier;\n    uint256 tierCapacity;\n}\n\ninterface ITerminal {\n    event Pay(\n        uint256 indexed projectId,\n        uint256 indexed fundingCycleId,\n        address indexed beneficiary,\n        uint256 amount,\n        uint256[] tiers,\n        uint256[] amounts,\n        string note\n    );\n\n    event Airdrop(\n        uint256 indexed projectId,\n        uint256 indexed fundingCycleId,\n        address indexed beneficiary,\n        uint256[] tierIds,\n        uint256[] amounts,\n        string note\n    );\n\n    event Claim(\n        uint256 indexed projectId,\n        uint256 indexed fundingCycleId,\n        address indexed beneficiary,\n        uint256 refundAmount,\n        uint256[] offeringAmounts\n    );\n\n    event Tap(\n        uint256 indexed projectId,\n        uint256 indexed fundingCycleId,\n        address indexed beneficiary,\n        uint256 govFeeAmount,\n        uint256 netTransferAmount\n    );\n\n    event AddToBalance(uint256 indexed projectId, uint256 amount, address beneficiary);\n\n    event UnlockTreasury(uint256 indexed projectId, uint256 unlockAmount);\n\n    event SetTapFee(uint256 fee);\n\n    event SetContributeFee(uint256 fee);\n\n    event SetMinLockRate(uint256 minLockRate);\n\n    event DistributeToPayoutMod(uint256 indexed projectId, uint256 indexed fundingCycleId, PayoutMod mod, uint256 amount, address receiver);\n\n    error Voucher721(address _voucher);\n    error NoCommunityTicketLeft();\n    error FundingCycleNotExist();\n    error FundingCyclePaused();\n    error FundingCycleActived();\n    error InsufficientBalance();\n    error AlreadyClaimed();\n    error ZeroAddress();\n    error BadOperationPeriod();\n    error OnlyGovernor();\n    error UnAuthorized();\n    error LastWeightMustBe1();\n    error BadPayment();\n    error BadAmount();\n    error BadLockRate();\n    error BadTapFee();\n\n    function superAdmin() external view returns (address);\n\n    function tapFee() external view returns (uint256);\n\n    function contributeFee() external view returns (uint256);\n\n    function devTreasury() external view returns (address);\n\n    function minLockRate() external view returns (uint256);\n\n    function projects() external view returns (IProjects);\n\n    function fundingCycles() external view returns (IFundingCycles);\n\n    function membershipPassBooth() external view returns (IMembershipPassBooth);\n\n    function daoGovernorBooster() external view returns (IDAOGovernorBooster);\n\n    function bluechipsBooster() external view returns (IBluechipsBooster);\n\n    function terminalDirectory() external view returns (ITerminalDirectory);\n\n    function payoutStore() external view returns (IPayoutStore);\n\n    function balanceOf(uint256 _projectId) external view returns (uint256);\n\n    function addToBalance(uint256 _projectId) external payable;\n\n    function setTapFee(uint256 _fee) external;\n\n    function setContributeFee(uint256 _fee) external;\n\n    function setMinLockRate(uint256 _minLockRate) external;\n\n    function createDao(\n        Metadata memory _metadata,\n        ImmutablePassTier[] calldata _tiers,\n        FundingCycleParameter calldata _params,\n        AuctionedPass[] calldata _auctionedPass,\n        PayoutMod[] memory _payoutMods\n    ) external;\n\n    function createNewFundingCycle(\n        uint256 projectId,\n        FundingCycleParameter calldata _params,\n        AuctionedPass[] calldata _auctionedPass,\n        PayoutMod[] calldata _payoutMod\n    ) external;\n\n    function contribute(\n        uint256 _projectId,\n        uint256[] memory _tiers,\n        uint256[] memory _amounts,\n        string memory _memo\n    ) external payable;\n\n    function communityContribute(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        string memory _memo\n    ) external;\n\n    function claimPassOrRefund(uint256 _projectId, uint256 _fundingCycleId) external;\n\n    function tap(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        uint256 _amount\n    ) external;\n\n    function unLockTreasury(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        uint256 _unlockAmount\n    ) external;\n}\n"
    },
    "contracts/interfaces/IProjects.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"./ITerminal.sol\";\n\ninterface IProjects is IERC721 {\n    error EmptyHandle();\n    error TakenedHandle();\n    error UnAuthorized();\n\n    event Create(\n        uint256 indexed projectId,\n        address indexed owner,\n        bytes32 handle,\n        address caller\n    );\n\n    event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\n\n    event SetBaseURI(string baseURI);\n\n    function count() external view returns (uint256);\n\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\n\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\n\n    function exists(uint256 _projectId) external view returns (bool);\n\n    function create(\n        address _owner,\n        bytes32 _handle,\n        ITerminal _terminal\n    ) external returns (uint256 id);\n\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\n    \n    function setBaseURI(string memory _uri) external;\n}\n"
    },
    "contracts/interfaces/IFundingCycles.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nenum FundingCycleState {\n    WarmUp,\n    Active,\n    Expired\n}\n\nstruct Metadata {\n    // The unique handle name for the DAO\n    bytes32 handle;\n    // The NFT token address of Customized Boosters\n    address[] customBoosters;\n    // The multipliers of customized NFT \n    uint16[] boosterMultipliers;\n}\n\nstruct AuctionedPass {\n    // tier id, indexed from 0\n    uint256 id;\n    // sale price in wei\n    uint256 salePrice;\n    // the amount of tickets open for sale in this round\n    uint256 saleAmount;\n    // the amount of tickets airdroped to community\n    uint256 communityAmount;\n    // who own the community vouchers can free mint the community ticket\n    address communityVoucher;\n    // the amount of tickets reserved to next round\n    uint256 reservedAmount;\n}\n\n// 1st funding cycle:\n// gold ticket (erc1155) :  11 salePrice 1 reserveampiunt\n\n// silver ticket: 10 salePrice  2 reserveampiunt\n\nstruct FundingCycleProperties {\n    uint256 id;\n    uint256 projectId;\n    uint256 previousId;\n    uint256 start;\n    uint256 target;\n    uint256 lockRate;\n    uint16 duration;\n    bool isPaused;\n    uint256 cycleLimit;\n}\n\nstruct FundingCycleParameter {\n    // rate to be locked in treasury 1000 -> 10% 9999 -> 99.99%\n    uint16 lockRate;\n    uint16 duration;\n    uint256 cycleLimit;\n    uint256 target;\n}\n\ninterface IFundingCycles {\n    event Configure(\n        uint256 indexed fundingCycleId,\n        uint256 indexed projectId,\n        uint256 reconfigured,\n        address caller\n    );\n\n    event FundingCycleExist(\n        uint256 indexed fundingCycleId,\n        uint256 indexed projectId,\n        uint256 reconfigured,\n        address caller\n    );\n\n    event Tap(\n        uint256 indexed projectId,\n        uint256 indexed fundingCycleId,\n        uint256 tapAmount\n    );\n\n    event Unlock(\n        uint256 indexed projectId,\n        uint256 indexed fundingCycleId,\n        uint256 unlockAmount,\n        uint256 totalUnlockedAmount\n    );\n\n    event Init(\n        uint256 indexed fundingCycleId,\n        uint256 indexed projectId,\n        uint256 previous,\n        uint256 start,\n        uint256 duration,\n        uint256 target,\n        uint256 lockRate\n    );\n\n    event InitAuctionedPass(\n        uint256 indexed fundingCycleId,\n        AuctionedPass autionPass\n    );\n\n    event UpdateLocked(\n        uint256 indexed projectId,\n        uint256 indexed fundingCycleId,\n        uint256 depositAmount,\n        uint256 totalDepositedAmount\n    );\n\n    error InsufficientBalance();\n    error BadCycleLimit();\n    error BadDuration();\n    error BadLockRate();\n\n\n    // === External View  === // \n    function latestIdFundingProject(uint256 _projectId) external view returns (uint256);\n\n    function count() external view returns (uint256);\n\n    function MAX_CYCLE_LIMIT() external view returns (uint8);\n\n    function getFundingCycle(uint256 _fundingCycleId)\n        external\n        view\n        returns (FundingCycleProperties memory);\n\n    function configure(\n        uint256 _projectId,\n        FundingCycleParameter calldata _params,\n        AuctionedPass[] memory _auctionedPass\n    ) external returns (FundingCycleProperties memory);\n\n    // === External Transactions === //\n    function currentOf(uint256 _projectId) external view returns (FundingCycleProperties memory);\n\n    function setPauseFundingCycle(uint256 _projectId, bool _paused) external returns (bool);\n\n    function updateLocked(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\n\n    function tap(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\n\n    function unlock(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\n\n    function getTappableAmount(uint256 _fundingCycleId) external view returns (uint256);\n\n    function getFundingCycleState(uint256 _fundingCycleId) external view returns (FundingCycleState);\n\n    function getAutionedPass(uint256 _fundingCycleId, uint256 _tierId) external view returns(AuctionedPass memory);\n}\n"
    },
    "contracts/interfaces/IDAOGovernorBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IProjects.sol\";\n\ninterface IDAOGovernorBooster {\n    enum ProposalState {\n        Pending,\n        Active,\n        Queued,\n        Failed,\n        Expired,\n        Executed\n    }\n\n    struct Proposal {\n        string uri;\n        uint256 id;\n        bytes32 hash;\n        uint256 start;\n        uint256 end;\n        uint256 minVoters;\n        uint256 minVotes;\n        ProposalState state;\n    }\n\n    struct ProposalParameter {\n        string uri;\n        uint256 start;\n        uint256 end;\n    }\n\n    struct Vote {\n        uint256 totalVoters;\n        uint256 totalVotes;\n    }\n\n    struct PassStake {\n        uint256 tier;\n        uint256 amount; // ERC721: 1\n        uint8 duration; // duartion in day\n    }\n\n    struct StakeRecord {\n        uint256 tier;\n        uint256 amount; // ERC721: 1\n        uint256 point;\n        uint256 stakeAt;\n        uint256 expiry;\n    }\n\n    /************************* EVENTS *************************/\n    event CreateGovernor(\n        uint256 indexed projectId,\n        address membershipPass,\n        uint256[] multipers,\n        address admin\n    );\n\n    event ProposalCreated(uint256 indexed projectId, address indexed from, uint256 proposalId);\n\n    event ExecuteProposal(\n        uint256 indexed projectId,\n        address indexed from,\n        uint256 proposalId,\n        uint8 proposalResult\n    );\n\n    event StakePass(\n        uint256 indexed projectId,\n        address indexed from,\n        uint256 points,\n        uint256[] tierIds,\n        uint256[] amounts\n    );\n\n    event UnStakePass(\n        uint256 indexed projectId,\n        address indexed from,\n        uint256 points,\n        uint256[] tierIds,\n        uint256[] amounts\n    );\n\n    /************************* ERRORS *************************/\n    error InsufficientBalance();\n    error UnknowProposal();\n    error BadPeriod();\n    error InvalidSignature();\n    error TransactionNotMatch();\n    error TransactionReverted();\n    error NotProjectOwner();\n    error BadAmount();\n    error NotExpired();\n    error InvalidRecord();\n\n    function createGovernor(\n        uint256 _projectId,\n        uint256[] calldata _multipers,\n        address _membershipPass,\n        address _admin\n    ) external;\n\n    function propose(\n        uint256 _projectId,\n        ProposalParameter calldata _properties,\n        address _target,\n        uint256 _value,\n        string calldata _signature,\n        bytes calldata _calldata\n    ) external payable;\n\n    function execute(\n        uint256 _projectId,\n        uint256 _proposalId,\n        uint8 _proposeResult,\n        bytes memory _signatureBySigner,\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data\n    ) external returns (bytes memory);\n\n    function stakePass(uint256 _projectId, PassStake[] memory _membershipPass)\n        external\n        returns (uint256);\n\n    function unStakePass(uint256 _projectId, uint256[] memory _recordIds)\n        external\n        returns (uint256);\n}\n"
    },
    "contracts/interfaces/IMembershipPassBooth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {IMembershipPass} from \"./IMembershipPass.sol\";\nimport {IRoyaltyDistributor} from \"./IRoyaltyDistributor.sol\";\n\nstruct PayInfoWithWeight {\n    uint256 tier;\n    uint256 amount;\n    uint256 weight;\n}\nstruct WeightInfo {\n    uint256 amount;\n    uint256 sqrtWeight;\n}\n\ninterface IMembershipPassBooth {\n    error ProjectNotExist();\n\n    /************************* EVENTS *************************/\n    event Issue(\n        uint256 indexed projectId,\n        address membershipPass,\n        address royaltyDistributor,\n        uint256[] tierFee,\n        uint256[] tierCapacity,\n        uint256[] multipers\n    );\n\n    event BatchMintTicket(\n        address indexed from,\n        uint256 indexed projectId,\n        uint256[] tiers,\n        uint256[] amounts\n    );\n\n    event AirdropBatchMintTicket(\n        address indexed from,\n        uint256 indexed projectId,\n        uint256[] tiers,\n        uint256[] amounts\n    );\n\n    event DistributeRoyaltyFee(\n        uint256 indexed projectId,\n        uint256 merkleRootId,\n        uint256 distributeAmount,\n        uint256 distributeAt,\n        string ipfsHash\n    );\n\n    event ClaimRoyaltyFee(\n        uint256 indexed projectId,\n        address beneficiary,\n        uint256[] merkleRootIds,\n        uint256[] amounts\n    );\n\n    /************************* VIEW FUNCTIONS *************************/\n    function tierSizeOf(uint256 _projectId) external view returns (uint256);\n\n    function membershipPassOf(uint256 _projectId) external view returns (IMembershipPass);\n\n    function royaltyDistributorOf(uint256 _projectId) external view returns (IRoyaltyDistributor);\n\n    function totalBiddingAmountBy(uint256 _fundingCycleId, uint256 _tierId)\n        external\n        returns (uint256);\n\n    function totalSqrtWeightBy(uint256 _fundingCycleId, uint256 _tierId) external returns (uint256);\n\n    function depositedWeightBy(\n        address _from,\n        uint256 _fundingCycleId,\n        uint256 _tierId\n    ) external view returns (uint256, uint256);\n\n    function claimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\n\n    function airdropClaimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\n\n    function airdropClaimedAmountOf(uint256 _fundingCycleId, uint256 _tierId)\n        external\n        returns (uint256);\n\n    function issue(\n        uint256 _projectId,\n        uint256[] calldata _tierFees,\n        uint256[] calldata _tierCapacities,\n        uint256[] calldata _multipers\n    ) external returns (address);\n\n    function stake(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        address _from,\n        PayInfoWithWeight[] memory _payInfo\n    ) external;\n\n    function batchMintTicket(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        address _from,\n        uint256[] memory _amounts\n    ) external;\n\n    function airdropBatchMintTicket(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        address _from,\n        uint256[] memory _tierIds,\n        uint256[] memory _amounts\n    ) external;\n\n    function getUserAllocation(\n        address _user,\n        uint256 _projectId,\n        uint256 _fundingCycleId\n    ) external view returns (uint256[] memory);\n\n    function getEstimatingUserAllocation(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        uint256[] memory _biddingAmounts,\n        uint256[] memory _weights\n    ) external view returns (uint256[] memory);\n}\n"
    },
    "contracts/interfaces/IPayoutStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IProjects.sol\";\n\nstruct PayoutMod {\n    uint16 percent;\n    address payable beneficiary;\n}\n\n\ninterface IPayoutStore {\n\n    error BadPercentage();\n    error BadTotalPercentage();\n    error BadAddress();\n    error NoOp();\n\n    event SetPayoutMod(\n        uint256 indexed projectId,\n        uint256 indexed fundingCycleId,\n        PayoutMod mod,\n        address caller\n    );\n\n    function projects() external view returns (IProjects);\n\n    function payoutModsOf(uint256 _fundingCycleId)\n        external\n        view\n        returns (PayoutMod[] memory);\n\n    function setPayoutMods(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        PayoutMod[] memory _mods\n    ) external;\n\n}"
    },
    "contracts/interfaces/IMembershipPass.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\nimport \"./IConfigStore.sol\";\n\ninterface IMembershipPass is IERC1155, IERC2981 {\n    event MintPass(address indexed recepient, uint256 indexed tier, uint256 amount);\n\n    event BatchMintPass(address indexed recepient, uint256[] tiers, uint256[] amounts);\n\n    error TierNotSet();\n    error TierUnknow();\n    error BadCapacity();\n    error BadFee();\n    error InsufficientBalance();\n\n    function feeCollector() external view returns (address);\n\n    function configStore() external view returns (IConfigStore);\n\n    /**\n     * @notice\n     * Implement ERC2981, but actually the most marketplaces have their own royalty logic\n     */\n    function royaltyInfo(uint256 _tier, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount);\n\n    function mintPassForMember(\n        address _recepient,\n        uint256 _token,\n        uint256 _amount\n    ) external;\n\n    function batchMintPassForMember(\n        address _recepient,\n        uint256[] memory _tokens,\n        uint256[] memory _amounts\n    ) external;\n\n    function updateFeeCollector(address _feeCollector) external;\n}\n"
    },
    "contracts/interfaces/IRoyaltyDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IRoyaltyDistributor {\n    error UnAuthorized();\n    error MerkleRootExist();\n    error BadBalance();\n    error AlreadyClaimed();\n    error SizeNotMatch();\n\n    function claimRoyaltyFee(\n        address _from,\n        uint256[] calldata _merkleRootIds,\n        bytes32[][] memory _merkleProofs,\n        uint256[] calldata _amounts\n    ) external;\n\n    function distributeRoyaltyFee(uint256 _distributeAmount, bytes32 _merkleRoot)\n        external\n        returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/interfaces/IConfigStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IConfigStore {\n    event SetBaseURI(string uri);\n\n    event SetBaseContractURI(string uri);\n\n    event SetSigner(address signer);\n\n    function baseURI() external view returns (string memory);\n\n    function baseContractURI() external view returns (string memory);\n\n    function signer() external view returns (address);\n\n    function setBaseURI(string memory _uri) external;\n\n    function setBaseContractURI(string memory _uri) external;\n\n    function setSigner(address _signer) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "contracts/PayoutStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./interfaces/IPayoutStore.sol\";\nimport \"./abstract/TerminalUtility.sol\";\n\n/**\n  @notice\n  Stores mods for each project.\n  @dev\n  Mods can be used to distribute a percentage of payments or tickets to preconfigured beneficiaries.\n\n  @notice\n  the fundingCycleID is unique, then there is no need to store ProjectId in SmartContract. \n*/\ncontract PayoutStore is TerminalUtility, IPayoutStore {\n    /*╔═════════════════════════════╗\n      ║  Private Stored Properties  ║\n      ╚═════════════════════════════╝*/\n    // All payout mods for each fundingCycleID => payModsOf\n    mapping(uint256 => PayoutMod[]) private _payoutModsOf;\n\n    /*╔═════════════════════════════╗\n      ║  Public Stored Properties   ║\n      ╚═════════════════════════════╝*/\n    /// @notice The contract storing project information.\n    IProjects public immutable override projects;\n\n    /*╔══════════════════╗\n      ║   Public VIEW    ║\n      ╚══════════════════╝*/\n    /**\n      @notice \n      Get all payout mods for the specified project ID.\n      @param _fundingCycleId The ID of the fundingCycle to get mods for.\n      @return An array of all mods for the project.\n     */\n    function payoutModsOf(uint256 _fundingCycleId)\n        external\n        view\n        override\n        returns (PayoutMod[] memory)\n    {\n        return _payoutModsOf[_fundingCycleId];\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transactions ║\n      ╚═════════════════════════╝*/\n    /** \n      @param _projects The contract storing project information\n      @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\n    */\n    constructor(IProjects _projects, ITerminalDirectory _terminalDirectory)\n        TerminalUtility(_terminalDirectory)\n    {\n        projects = _projects;\n    }\n\n    /** \n      @notice \n      Adds a mod to the payout mods list.\n      @dev\n      Only the owner or operator of a project can make this call, or the current terminal of the project.\n      @param _projectId The project to add a mod to.\n      @param _mods The payout mods to set.\n    */\n    function setPayoutMods(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        PayoutMod[] memory _mods\n    ) external override onlyTerminal(_projectId) {\n        // There must be something to do.\n        if (_mods.length <= 0) {\n            revert NoOp();\n        }\n\n        // Delete from storage so mods can be repopulated.\n        delete _payoutModsOf[_fundingCycleId];\n\n        // Add up all the percents to make sure they cumulative are under 100%.\n        uint256 _payoutModPercentTotal;\n\n        for (uint256 _i; _i < _mods.length;) {\n            // The percent should be greater than 0.\n            if (_mods[_i].percent < 0) revert BadPercentage();\n\n            // Add to the total percents.\n            _payoutModPercentTotal = _payoutModPercentTotal + _mods[_i].percent;\n\n            // The total percent should be less than 10000.\n            if (_payoutModPercentTotal > 10000) revert BadTotalPercentage();\n\n            // The allocator and the beneficiary shouldn't both be the zero address.\n            if (_mods[_i].beneficiary == address(0)) revert BadAddress();\n\n            // Push the new mod into the project's list of mods.\n            _payoutModsOf[_fundingCycleId].push(_mods[_i]);\n\n            emit SetPayoutMod(_projectId, _fundingCycleId, _mods[_i], msg.sender);\n        \n            unchecked {\n                _i++;\n            }\n        }\n    }\n}\n"
    },
    "contracts/TerminalDirectory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {ITerminal} from \"./interfaces/ITerminal.sol\";\nimport {IProjects} from \"./interfaces/IProjects.sol\";\nimport {ITerminalDirectory} from \"./interfaces/ITerminalDirectory.sol\";\n\n/**\n  @notice\n  Allows project owners to deploy proxy contracts that can pay them when receiving funds directly.\n*/\ncontract TerminalDirectory is ITerminalDirectory {\n    // --- public immutable stored properties --- //\n\n    // The Projects contract which mints ERC-721's that represent project ownership and transfers.\n    IProjects public immutable override projects;\n\n    /*╔═════════════════════════════╗\n      ║    Public Stored Constants  ║\n      ╚═════════════════════════════╝*/\n    // The terminal of each project\n    mapping(uint256 => ITerminal) public override terminalOf;\n\n    /**\n      @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers.\n    */\n    constructor(IProjects _projects) {\n        projects = _projects;\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transaction  ║\n      ╚═════════════════════════╝*/\n    /** \n      @notice\n      Update the terminal\n\n      @param _projectId The ID of the project to set a new terminal for.\n      @param _terminal The new terminal to set.\n    */\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external override {\n        // Get a reference to the current terminal being used.\n        ITerminal _currentTerminal = terminalOf[_projectId];\n\n        // Either:\n        // - case 1: the current terminal hasn't been set yet and the msg sender is either the projects contract or the terminal being set.\n        // - case 2: the current terminal must not yet be set, or the current terminal is setting a new terminal.\n        require(\n            // case 1.\n            (_currentTerminal == ITerminal(address(0)) &&\n                (msg.sender == address(projects) || msg.sender == address(_terminal))) ||\n                // case 2.\n                msg.sender == address(_currentTerminal),\n            \"TerminalDirectory::setTerminal: UNAUTHORIZED\"\n        );\n\n        // The project must exist.\n        if (!projects.exists(_projectId)) revert UnknowTerminal();\n\n        // Can't set the zero address.\n        if (_terminal == ITerminal(address(0))) revert ZeroAddress();\n\n        // If the terminal is already set, nothing to do.\n        if (_currentTerminal == _terminal) return;\n\n        // Set the new terminal.\n        terminalOf[_projectId] = _terminal;\n\n        emit SetTerminal(_projectId, _terminal, msg.sender);\n    }\n}\n"
    },
    "contracts/Terminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@prb/math/contracts/PRBMath.sol\";\n\nimport {ITerminal, IProjects, IFundingCycles, IMembershipPassBooth, IDAOGovernorBooster, IBluechipsBooster, ITerminalDirectory, IPayoutStore, FundingCycleState, Metadata, ImmutablePassTier, FundingCycleParameter, AuctionedPass, FundingCycleProperties, PayInfoWithWeight, IERC721, PayoutMod} from \"./interfaces/ITerminal.sol\";\n\ncontract Terminal is ITerminal, Initializable, ReentrancyGuardUpgradeable {\n    using SafeMath for uint256;\n\n    /*╔═════════════════════════════╗\n      ║  Private Stored Properties  ║\n      ╚═════════════════════════════╝*/\n    address public override superAdmin;\n\n    // The percent fee takes when from tapped amounts, 1 => 1%\n    uint256 public override tapFee;\n\n    // The percent fee takes when user contribute to a project, 1 => 0.1%\n    uint256 public override contributeFee;\n\n    // The dev treasury address\n    address public override devTreasury;\n\n    // The min lock percent of funds in treasury. 3000 => 30%\n    uint256 public override minLockRate;\n\n    // the amount of ETH that each project is responsible for.\n    mapping(uint256 => uint256) public override balanceOf;\n\n    IProjects public override projects;\n\n    IFundingCycles public override fundingCycles;\n\n    IMembershipPassBooth public override membershipPassBooth;\n\n    IDAOGovernorBooster public override daoGovernorBooster;\n\n    IBluechipsBooster public override bluechipsBooster;\n\n    ITerminalDirectory public override terminalDirectory;\n\n    IPayoutStore public override payoutStore;\n\n    modifier onlyAdmin() {\n        if (msg.sender != superAdmin) revert UnAuthorized();\n        _;\n    }\n\n    modifier onlyProjectFundingCycleMatch(uint256 _projectId, uint256 _fundingCycleId) {\n        FundingCycleProperties memory _fundingCycle = fundingCycles.getFundingCycle(\n            _fundingCycleId\n        );\n        if (_projectId == 0 || _fundingCycle.projectId != _projectId) revert FundingCycleNotExist();\n        _;\n    }\n\n    modifier onlyCorrectPeroid(uint256 _fundingCycleId, FundingCycleState _expectState) {\n        if (fundingCycles.getFundingCycleState(_fundingCycleId) != _expectState)\n            revert BadOperationPeriod();\n        _;\n    }\n\n    /*╔══════════════════════════╗\n      ║  External / Public VIEW  ║\n      ╚══════════════════════════╝*/\n    /**\n\t\t@notice\n\t\tGet offering tickets by funding cycle\n\n\t\t@param _from The wallet address of the user \n\t\t@param _projectId The ID of the DAO you contributed with\n\t\t@param _fundingCycleId The ID of the funding cycle\n\t\t@return amounts The amount of each tier Passes offering in this funding cycle\n\t\t@return allocations The allocation percentage of each tier Passes offering in this funding cycle\n\t*/\n    function getOfferingAmount(\n        address _from,\n        uint256 _projectId,\n        uint256 _fundingCycleId\n    ) public view returns (uint256[] memory amounts, uint256[] memory allocations) {\n        allocations = membershipPassBooth.getUserAllocation(_from, _projectId, _fundingCycleId);\n\n        amounts = new uint256[](allocations.length);\n        for (uint256 i; i < allocations.length;) {\n            if (allocations[i] == 0) {\n                amounts[i] = 0;\n                continue;\n            }\n            amounts[i] = allocations[i]\n                .mul(fundingCycles.getAutionedPass(_fundingCycleId, i).saleAmount)\n                .div(1e6);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /**\n\t\t@notice\n\t\tEstimate allocate tickets\n\n\t\t@param _projectId The ID of the DAO\n\t\t@param _fundingCycleId The ID of the funding cycle\n\t\t@param _payData payment info\n\t*/\n    function getEstimatingAmount(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        uint256[] memory _payData\n    ) external view returns (uint256[] memory amounts, uint256[] memory allocations) {\n        uint256[] memory _weights = new uint256[](_payData.length);\n        for (uint256 i; i < _payData.length;) {\n            _weights[i] = _payData[i] * fundingCycles.getAutionedPass(_fundingCycleId, i).salePrice;\n            unchecked {\n                i++;\n            }\n        }\n        allocations = membershipPassBooth.getEstimatingUserAllocation(\n            _projectId,\n            _fundingCycleId,\n            _payData,\n            _weights\n        );\n        for (uint256 i; i < allocations.length;) {\n            amounts[i] = allocations[i]\n                .mul(fundingCycles.getAutionedPass(_fundingCycleId, i).saleAmount)\n                .div(1e6);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /**\n\t\t@notice\n\t\tGet offering tickets by funding cycle\n\n\t\t@param _from user address\n\t\t@param _projectId the project id of contribute dao\n\t\t@param _fundingCycleId the funding cycle id\n\t*/\n    function getRefundingAmount(\n        address _from,\n        uint256 _projectId,\n        uint256 _fundingCycleId\n    ) public view returns (uint256 amount) {\n        (uint256[] memory _offeringAmounts, ) = getOfferingAmount(\n            _from,\n            _projectId,\n            _fundingCycleId\n        );\n        for (uint256 i; i < _offeringAmounts.length;) {\n            (uint256 _amount, ) = membershipPassBooth.depositedWeightBy(_from, _fundingCycleId, i);\n            if (_amount == 0) continue;\n            amount += _amount.sub(_offeringAmounts[i]).mul(\n                fundingCycles.getAutionedPass(_fundingCycleId, i).salePrice\n            );\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /**\n\t\t@notice\n\t\tCalculate the unsold tickets by funding cycle id\n\n\t\t@param _fundingCycleId the funding cycle id\n\t*/\n    function getUnSoldTickets(uint256 _fundingCycleId) public view returns (uint256) {}\n\n    /*╔═════════════════════════════╗\n      ║   CONTRACT SETUP  ║\n      ╚═════════════════════════════╝*/\n    /**\n\t\t@notice\n\t\tDue to a requirement of the proxy-based upgradeability system, no constructors can be used in upgradeable contracts\n\t    \n\t\t@param _projects A DAO's contract which mints ERC721 represent project's ownership and transfers.\n\t\t@param _fundingCycles A funding cycle configuration store. (DAO Creator can launch mutiple times.)\n\t\t@param _passBooth The tiers with the Membership-pass this DAO has\n\t\t@param _governorBooster The governor booster\n\t\t@param _devTreasury dev treasury address, receive contribute fee and tap fee\n\t\t@param _admin super admin\n\t */\n    function initialize(\n        IProjects _projects,\n        IFundingCycles _fundingCycles,\n        IMembershipPassBooth _passBooth,\n        IDAOGovernorBooster _governorBooster,\n        ITerminalDirectory _terminalDirectory,\n        IBluechipsBooster _bluechipsBooster,\n        IPayoutStore _payoutStore,\n        address _devTreasury,\n        address _admin\n    ) public initializer {\n        if (\n            _projects == IProjects(address(0)) ||\n            _fundingCycles == IFundingCycles(address(0)) ||\n            _passBooth == IMembershipPassBooth(address(0)) ||\n            _governorBooster == IDAOGovernorBooster(address(0)) ||\n            _terminalDirectory == ITerminalDirectory(address(0)) ||\n            _bluechipsBooster == IBluechipsBooster(address(0)) ||\n            _payoutStore == IPayoutStore(address(0)) ||\n            _devTreasury == address(0) ||\n            _admin == address(0)\n        ) revert ZeroAddress();\n\n        __ReentrancyGuard_init();\n        projects = _projects;\n        fundingCycles = _fundingCycles;\n        membershipPassBooth = _passBooth;\n        daoGovernorBooster = _governorBooster;\n        terminalDirectory = _terminalDirectory;\n        bluechipsBooster = _bluechipsBooster;\n        devTreasury = _devTreasury;\n        payoutStore = _payoutStore;\n        superAdmin = _admin;\n        contributeFee = 1;\n        tapFee = 4;\n        minLockRate = 5000;\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transaction  ║\n      ╚═════════════════════════╝*/\n    /**\n\t\t@notice\n\t\tDeploy a DAO, this will mint an ERC721 into the `_owner`'s account, and configure a first funding cycle.\n\n        @param _metadata The metadata for the DAO\n    \t@param _tiers The total tiers of the Membership-pass\n\t\t@param _params The parameters for Funding Cycle \n\t\t@param _auctionedPass Auctioned pass information\n        @param _payoutMods The payout infos\n\t */\n    function createDao(\n        Metadata calldata _metadata,\n        ImmutablePassTier[] calldata _tiers,\n        FundingCycleParameter calldata _params,\n        AuctionedPass[] calldata _auctionedPass,\n        PayoutMod[] calldata _payoutMods\n    ) external override {\n        _validateConfigProperties(_auctionedPass, _params);\n\n        uint256 _projectId = projects.create(msg.sender, _metadata.handle, this);\n        _setupProject(_projectId, _metadata, _tiers, _auctionedPass);\n\n        FundingCycleProperties memory fundingCycleProperty = fundingCycles.configure(\n            _projectId,\n            _params,\n            _auctionedPass\n        );\n        payoutStore.setPayoutMods(_projectId, fundingCycleProperty.id, _payoutMods);\n    }\n\n    /**\n\t\t@notice\n\t\tCreate the new Funding Cycle for spesific project, need to check the reserve amount pass in Treasury\n\n\t\t@param _projectId The project id of the dao\n\t\t@param _params The parameters for funding cycle\n\t\t@param _auctionedPass auctioned pass information\n\t */\n    function createNewFundingCycle(\n        uint256 _projectId,\n        FundingCycleParameter calldata _params,\n        AuctionedPass[] calldata _auctionedPass,\n        PayoutMod[] calldata _payoutMods\n    ) external override {\n        if (msg.sender != projects.ownerOf(_projectId)) revert UnAuthorized();\n\n        _validateConfigProperties(_auctionedPass, _params);\n\n        uint256 latestFundingCycleId = fundingCycles.latestIdFundingProject(_projectId);\n\n        FundingCycleProperties memory property = fundingCycles.configure(\n            _projectId,\n            _params,\n            _auctionedPass\n        );\n\n        if (property.id == latestFundingCycleId) revert FundingCycleActived();\n        payoutStore.setPayoutMods(_projectId, property.id, _payoutMods);\n    }\n\n    /**\n\t\t@notice\n\t\tContribute ETH to a dao\n\n\t\t@param _projectId The ID of the DAO being contribute to\n\t\t@param _tiers The payment tier ids\n\t\t@param _amounts The amounts of submitted\n\t\t@param _memo The memo that will be attached in the published event after purchasing\n\t */\n    function contribute(\n        uint256 _projectId,\n        uint256[] memory _tiers,\n        uint256[] memory _amounts,\n        string memory _memo\n    ) external payable override {\n        FundingCycleProperties memory _fundingCycle = fundingCycles.currentOf(_projectId);\n        uint256 _fundingCycleId = _fundingCycle.id;\n        if (_fundingCycleId == 0) revert FundingCycleNotExist();\n        if (fundingCycles.getFundingCycleState(_fundingCycleId) != FundingCycleState.Active)\n            revert BadOperationPeriod();\n\n        // Make sure its not paused.\n        if (_fundingCycle.isPaused) revert FundingCyclePaused();\n        if (_tiers.length != _amounts.length) revert BadPayment();\n\n        uint256 _amount;\n        PayInfoWithWeight[] memory _payInfoWithWeights = new PayInfoWithWeight[](_tiers.length);\n        for (uint256 i; i < _tiers.length;) {\n            AuctionedPass memory _auctionedPass = fundingCycles.getAutionedPass(\n                _fundingCycleId,\n                _tiers[i]\n            );\n            _amount = _amount.add(_amounts[i].mul(_auctionedPass.salePrice));\n            _payInfoWithWeights[i] = PayInfoWithWeight({\n                tier: _tiers[i],\n                amount: _amounts[i],\n                weight: _auctionedPass.salePrice\n            });\n            unchecked {\n                i++;\n            }\n        }\n        // contribute fee amount\n        uint256 feeAmount = _amount.mul(contributeFee.div(100));\n        if (msg.value < _amount.add(feeAmount)) revert InsufficientBalance();\n\n        // update tappable and locked balance\n        fundingCycles.updateLocked(_projectId, _fundingCycleId, _amount);\n\n        // Transfer fee to the dev address\n        AddressUpgradeable.sendValue(payable(devTreasury), feeAmount);\n\n        // Add to the balance of the project.\n        balanceOf[_projectId] += _amount;\n\n        address _beneficiary = msg.sender;\n        membershipPassBooth.stake(_projectId, _fundingCycleId, _beneficiary, _payInfoWithWeights);\n\n        emit Pay(_projectId, _fundingCycleId, _beneficiary, _amount, _tiers, _amounts, _memo);\n    }\n\n    /**\n\t\t@notice\n\t\tCommunity members can mint the  membership pass for free. For those who has the specific NFT in wallet, enable to claim free pass\n\n\t\t@param _projectId The ID of the DAO being contribute to\n\t\t@param _fundingCycleId The funding cycle id\n\t\t@param _memo memo attached when purchase\n\t */\n    function communityContribute(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        string memory _memo\n    ) external override onlyProjectFundingCycleMatch(_projectId, _fundingCycleId) {\n        address _beneficiary = msg.sender;\n        if (membershipPassBooth.airdropClaimedOf(_beneficiary, _fundingCycleId))\n            revert AlreadyClaimed();\n\n        uint256 tierSize = membershipPassBooth.tierSizeOf(_projectId);\n        uint256[] memory _tiers = new uint256[](tierSize);\n        uint256[] memory _amounts = new uint256[](tierSize);\n        for (uint256 i; i < tierSize;) {\n            AuctionedPass memory _auctionedPass = fundingCycles.getAutionedPass(_fundingCycleId, i);\n            _tiers[i] = _auctionedPass.id;\n            _amounts[i] = 0;\n            if (\n                IERC721(_auctionedPass.communityVoucher).balanceOf(_beneficiary) > 0 &&\n                _auctionedPass.communityAmount -\n                    membershipPassBooth.airdropClaimedAmountOf(_fundingCycleId, _auctionedPass.id) >\n                0\n            ) {\n                _amounts[i] = 1;\n            }\n            unchecked {\n                i++;\n            }\n        }\n\n        if (_tiers.length == 0) revert NoCommunityTicketLeft();\n\n        membershipPassBooth.airdropBatchMintTicket(\n            _projectId,\n            _fundingCycleId,\n            _beneficiary,\n            _tiers,\n            _amounts\n        );\n\n        emit Airdrop(_projectId, _fundingCycleId, _beneficiary, _tiers, _amounts, _memo);\n    }\n\n    /**\n\t\t@notice\n\t\tClaim menbershippass or refund overlow part\n\n\t\t@param _projectId the project id to claim\n\t\t@param _fundingCycleId the funding cycle id to claim\n\t */\n    function claimPassOrRefund(uint256 _projectId, uint256 _fundingCycleId)\n        external\n        override\n        nonReentrant\n        onlyProjectFundingCycleMatch(_projectId, _fundingCycleId)\n        onlyCorrectPeroid(_fundingCycleId, FundingCycleState.Expired)\n    {\n        address _from = msg.sender;\n        if (membershipPassBooth.claimedOf(_from, _fundingCycleId)) revert AlreadyClaimed();\n\n        uint256 _refundAmount = getRefundingAmount(_from, _projectId, _fundingCycleId);\n        if (_refundAmount > 0) {\n            if (balanceOf[_projectId] < _refundAmount) revert InsufficientBalance();\n            balanceOf[_projectId] = balanceOf[_projectId] - _refundAmount;\n            AddressUpgradeable.sendValue(payable(_from), _refundAmount);\n        }\n        (uint256[] memory _offeringAmounts, ) = getOfferingAmount(\n            _from,\n            _projectId,\n            _fundingCycleId\n        );\n        membershipPassBooth.batchMintTicket(_projectId, _fundingCycleId, _from, _offeringAmounts);\n\n        emit Claim(_projectId, _fundingCycleId, _from, _refundAmount, _offeringAmounts);\n    }\n\n    /**\n\t\t@notice\n\t\tTap into funds that have been contributed to a project's funding cycles\n\n\t\t@param _projectId The ID of the project to which the funding cycle being tapped belongs\n\t\t@param _fundingCycleId The ID of the funding cycle to tap\n\t\t@param _amount The amount being tapped\n\t */\n    function tap(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        uint256 _amount\n    )\n        external\n        override\n        nonReentrant\n        onlyProjectFundingCycleMatch(_projectId, _fundingCycleId)\n        onlyCorrectPeroid(_fundingCycleId, FundingCycleState.Expired)\n    {\n        if (msg.sender != projects.ownerOf(_projectId)) revert UnAuthorized();\n        if (fundingCycles.getFundingCycleState(_fundingCycleId) != FundingCycleState.Expired)\n            revert BadOperationPeriod();\n\n        // get a reference to this project's current balance, including any earned yield.\n        uint256 _balance = balanceOf[_projectId];\n        if (_amount > _balance) revert InsufficientBalance();\n\n        // register the funds as tapped. Get the ID of the funding cycle that was tapped.\n        fundingCycles.tap(_projectId, _fundingCycleId, _amount);\n\n        // removed the tapped funds from the project's balance.\n        balanceOf[_projectId] = _balance - _amount;\n\n        uint256 _feeAmount = _amount.mul(tapFee).div(100);\n        uint256 _tappableAmount = _amount.sub(_feeAmount);\n        AddressUpgradeable.sendValue(payable(devTreasury), _feeAmount);\n\n        uint256 _leftoverTransferAmount = _distributeToPayoutMods(\n            _projectId,\n            _fundingCycleId,\n            _tappableAmount\n        );\n        address payable _projectOwner = payable(projects.ownerOf(_projectId));\n\n        if (_leftoverTransferAmount > 0) {\n            AddressUpgradeable.sendValue(_projectOwner, _leftoverTransferAmount);\n        }\n\n        emit Tap(_projectId, _fundingCycleId, msg.sender, _feeAmount, _tappableAmount);\n    }\n\n    /**\n\t\t@notice\n\t\tUnlock the locked balance in dao treasury\n\n\t\t@dev\n\t\tOnly daoGovernor contract\n\n\t\t@param _projectId The Id of the project to unlock\n\t\t@param _fundingCycleId The Id of the fundingCycle to unlock\n\t\t@param _unlockAmount The amount being unlocked\n\t */\n    function unLockTreasury(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        uint256 _unlockAmount\n    )\n        external\n        override\n        onlyProjectFundingCycleMatch(_projectId, _fundingCycleId)\n        onlyCorrectPeroid(_fundingCycleId, FundingCycleState.Expired)\n    {\n        if (msg.sender != address(daoGovernorBooster)) revert OnlyGovernor();\n\n        fundingCycles.unlock(_projectId, _fundingCycleId, _unlockAmount);\n\n        emit UnlockTreasury(_projectId, _unlockAmount);\n    }\n\n    /**\n        @notice\n        Set paused status to the current active funding cycle in the spesific project.\n\n        @param _projectId The ID of the project to which the funds received belong.\n        @param _paused status true or false for the funding cycle.\n     */\n    function setPausedFundingCycleProject(uint256 _projectId, bool _paused)\n        external\n        returns (bool)\n    {\n        if (msg.sender != projects.ownerOf(_projectId) && msg.sender != superAdmin)\n            revert UnAuthorized();\n\n        return fundingCycles.setPauseFundingCycle(_projectId, _paused);\n    }\n\n    function setTapFee(uint256 _fee) external override onlyAdmin {\n        if (_fee > 10) revert BadTapFee();\n\n        tapFee = _fee;\n\n        emit SetTapFee(_fee);\n    }\n\n    function setContributeFee(uint256 _fee) external override onlyAdmin {\n        contributeFee = _fee;\n\n        emit SetContributeFee(_fee);\n    }\n\n    function setMinLockRate(uint256 _minLockRate) external override onlyAdmin {\n        minLockRate = _minLockRate;\n\n        emit SetMinLockRate(_minLockRate);\n    }\n\n    /**\n        @notice\n        Receives and allocates funds belonging to the specified project.\n\n        @param _projectId The ID of the project to which the funds received belong.\n     */\n    function addToBalance(uint256 _projectId) external payable override {\n        // The amount must be positive.\n        if (msg.value <= 0) revert BadAmount();\n        balanceOf[_projectId] = balanceOf[_projectId] + msg.value;\n        emit AddToBalance(_projectId, msg.value, msg.sender);\n    }\n\n    /*╔═════════════════════════════╗\n      ║   Private Helper Functions  ║\n      ╚═════════════════════════════╝*/\n    /**\n\t\t@notice\n\t\tValidate the Config Setting For Passes For The Fundraising this time\n\n\t\t@param _auctionedPasses The ID of the funding cycle\n\t */\n    function _validateConfigProperties(\n        AuctionedPass[] calldata _auctionedPasses,\n        FundingCycleParameter calldata _params\n    ) private view {\n        for (uint256 i; i < _auctionedPasses.length;) {\n            if (\n                _auctionedPasses[i].communityVoucher != address(0) &&\n                !IERC721(_auctionedPasses[i].communityVoucher).supportsInterface(0x80ac58cd)\n            ) revert Voucher721(_auctionedPasses[i].communityVoucher);\n            unchecked {\n                i++;\n            }\n        }\n\n        if (_params.lockRate < minLockRate) revert BadLockRate();\n    }\n\n    /** \n      @notice\n      Pays out the mods for the specified funding cycle.\n      @param _projectId The project id base the distribution on.\n      @param _fundingCycleId The funding cycle id to base the distribution on.\n      @param _amount The total amount being paid out.\n      @return leftoverAmount If the mod percents dont add up to 100%, the leftover amount is returned.\n    */\n    function _distributeToPayoutMods(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        uint256 _amount\n    ) private returns (uint256 leftoverAmount) {\n        // Set the leftover amount to the initial amount.\n        leftoverAmount = _amount;\n\n        // Get a reference to the project's payout mods.\n        PayoutMod[] memory _mods = payoutStore.payoutModsOf(_fundingCycleId);\n\n        if (_mods.length == 0) return leftoverAmount;\n\n        //Transfer between all mods.\n        for (uint256 _i; _i < _mods.length;) {\n            // Get a reference to the mod being iterated on.\n            PayoutMod memory _mod = _mods[_i];\n\n            // The amount to send towards mods. Mods percents are out of 10000.\n            uint256 _modCut = PRBMath.mulDiv(_amount, _mod.percent, 10000);\n\n            if (_modCut > 0) {\n                AddressUpgradeable.sendValue(_mod.beneficiary, _modCut);\n            }\n\n            // Subtract from the amount to be sent to the beneficiary.\n            leftoverAmount = leftoverAmount - _modCut;\n\n            unchecked {\n                _i++;\n            }\n\n            emit DistributeToPayoutMod(_fundingCycleId, _projectId, _mod, _modCut, msg.sender);\n        }\n    }\n\n    function _setupProject(\n        uint256 _projectId,\n        Metadata calldata _metadata,\n        ImmutablePassTier[] calldata _tiers,\n        AuctionedPass[] calldata _auctionedPass\n    ) internal {\n        uint256[] memory _tierFee = new uint256[](_tiers.length);\n        uint256[] memory _tierCapacity = new uint256[](_tiers.length);\n        uint256[] memory _multipliers = new uint256[](_tiers.length);\n\n        for (uint256 i; i < _tiers.length;) {\n            if (\n                (_auctionedPass[i].saleAmount +\n                    _auctionedPass[i].communityAmount +\n                    _auctionedPass[i].reservedAmount) > _tiers[i].tierCapacity\n            ) {\n                revert InsufficientBalance();\n            }\n            _tierFee[i] = _tiers[i].tierFee;\n            _tierCapacity[i] = _tiers[i].tierCapacity;\n            _multipliers[i] = _tiers[i].multiplier;\n            unchecked {\n                i++;\n            }\n        }\n\n        address membershipPass = membershipPassBooth.issue(\n            _projectId,\n            _tierFee,\n            _tierCapacity,\n            _multipliers\n        );\n\n        daoGovernorBooster.createGovernor(_projectId, _multipliers, membershipPass, superAdmin);\n\n        if (_metadata.customBoosters.length > 0)\n            bluechipsBooster.createCustomBooster(\n                _projectId,\n                _metadata.customBoosters,\n                _metadata.boosterMultipliers\n            );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@prb/math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "contracts/RoyaltyDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nimport {IConfigStore} from \"./interfaces/IConfigStore.sol\";\nimport {IRoyaltyDistributor} from \"./interfaces/IRoyaltyDistributor.sol\";\n\ncontract RoyaltyDistributor is Ownable, IRoyaltyDistributor, ReentrancyGuard {\n    /*╔═════════════════════════════╗\n      ║   Private Stored Properties ║\n      ╚═════════════════════════════╝*/\n    uint256 private _distributedBalance;\n\n    /*╔═════════════════════════════╗\n      ║  Public Stored Properties   ║\n      ╚═════════════════════════════╝*/\n\n    uint256 public merkleRootCount;\n\n    mapping(uint256 => bytes32) public merkleRootOf;\n\n    mapping(bytes32 => bool) public merkleRootFor;\n\n    mapping(address => mapping(uint256 => bool)) public claimedOf;\n\n    /*╔══════════════════╗\n      ║   External VIEW  ║\n      ╚══════════════════╝*/\n\n    /**\n        @notice\n        The pending distributed royalty fees since last distribution\n     */\n    function pendingBalance() public view returns (uint256) {\n        return address(this).balance - _distributedBalance;\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transaction  ║\n      ╚═════════════════════════╝*/\n\n    constructor() {}\n\n    /**\n        @notice\n        Claim according to votes share\n\n        @param _from The beneficiary\n        @param _merkleRootIds Merkle tree root ids\n        @param _merkleProofs Merkle tree proofs\n        @param _amounts Claim amounts\n     */\n    function claimRoyaltyFee(\n        address _from,\n        uint256[] calldata _merkleRootIds,\n        bytes32[][] memory _merkleProofs,\n        uint256[] calldata _amounts\n    ) public override onlyOwner nonReentrant {\n        uint256 _totalAmount;\n        if (_merkleRootIds.length != _merkleProofs.length || _merkleRootIds.length != _amounts.length) {\n            revert SizeNotMatch();\n        }\n        for (uint256 i; i < _merkleRootIds.length;) {\n            uint256 _rootId = _merkleRootIds[i];\n            bytes32 _node = keccak256(abi.encodePacked(_rootId, \"-\", _from, \"-\", _amounts[i]));\n            bytes32 _merkleRoot = merkleRootOf[_rootId];\n            if (!MerkleProof.verify(_merkleProofs[i], _merkleRoot, _node)) {\n                revert UnAuthorized();\n            }\n            if (claimedOf[_from][_rootId]) {\n                revert AlreadyClaimed();\n            }\n            _totalAmount += _amounts[i];\n            claimedOf[_from][_rootId] = true;\n            unchecked {\n                i++;\n            }\n        }\n\n        Address.sendValue(payable(_from), _totalAmount);\n    }\n\n    /**\n        @notice\n        Start a new distribution\n\n        @param _distributeAmount The distribute amount of this cycle\n        @param _merkleRoot Merkle tree root, record distribution amount of each member\n     */\n    function distributeRoyaltyFee(uint256 _distributeAmount, bytes32 _merkleRoot)\n        public\n        override\n        onlyOwner\n        returns (uint256 _rootId)\n    {\n        if (merkleRootFor[_merkleRoot]) revert MerkleRootExist();\n        if (_distributeAmount > pendingBalance()) revert BadBalance();\n\n        unchecked {\n            merkleRootCount++;\n        }\n\n        merkleRootFor[_merkleRoot] = true;\n        merkleRootOf[merkleRootCount] = _merkleRoot;\n        _distributedBalance += _distributeAmount;\n\n        _rootId = merkleRootCount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/MembershipPassBooth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport {IFundingCycles} from \"./interfaces/IFundingCycles.sol\";\nimport {MembershipPass, IMembershipPass, IConfigStore} from \"./MembershipPass.sol\";\nimport {RoyaltyDistributor, IRoyaltyDistributor} from \"./RoyaltyDistributor.sol\";\nimport {TerminalUtility, ITerminalDirectory} from \"./abstract/TerminalUtility.sol\";\nimport {IMembershipPassBooth, PayInfoWithWeight, WeightInfo} from \"./interfaces/IMembershipPassBooth.sol\";\n\ncontract MembershipPassBooth is IMembershipPassBooth, TerminalUtility, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    /*╔═════════════════════════════╗\n      ║  Public Stored Properties   ║\n      ╚═════════════════════════════╝*/\n    mapping(uint256 => uint256) public override tierSizeOf;\n\n    mapping(uint256 => IMembershipPass) public override membershipPassOf;\n\n    mapping(uint256 => IRoyaltyDistributor) public override royaltyDistributorOf;\n\n    mapping(uint256 => mapping(uint256 => uint256)) public override totalBiddingAmountBy;\n\n    // total sqrt weight of each tiers by funding cycle\n    // funding cycle id => (tier id => total sqrt weight)\n    mapping(uint256 => mapping(uint256 => uint256)) public override totalSqrtWeightBy;\n\n    // the weight details of each funding cycles by address\n    // address => (funding cycyle id => (tier id => weight detail))\n    mapping(address => mapping(uint256 => mapping(uint256 => WeightInfo)))\n        public\n        override depositedWeightBy;\n\n    //  the claimed flag by funding cycle\n    // address => (funding cycyle id =>  claimed)\n    mapping(address => mapping(uint256 => bool)) public override claimedOf;\n\n    //  the airdrop claimed flag by funding cycle\n    // address => (funding cycyle id =>  claimed)\n    mapping(address => mapping(uint256 => bool)) public override airdropClaimedOf;\n\n    // funding cycyle id =>  tier id => claimed amount\n    mapping(uint256 => mapping(uint256 => uint256)) public override airdropClaimedAmountOf;\n\n    // Config store utils to store the global signer\n    IConfigStore public configStore;\n\n    IFundingCycles public fundingCycles;\n\n    /*╔══════════════════╗\n      ║   External VIEW  ║\n      ╚══════════════════╝*/\n    /**\n        @notice\n        Get allocations by funding cycle\n        allocation 100000 means 0.1(10%), 1 meanss 0.000001(0.0001%), 1000000 means 1(100%)\n\n        @param _user The address of the calling user\n        @param _projectId The ID of the DAO being contribute to\n        @param _fundingCycleId The funding cycle id\n     */\n    function getUserAllocation(\n        address _user,\n        uint256 _projectId,\n        uint256 _fundingCycleId\n    ) external view override returns (uint256[] memory _allocations) {\n        _allocations = new uint256[](tierSizeOf[_projectId]);\n        for (uint256 i; i < tierSizeOf[_projectId];) {\n            uint256 _saleAmount = fundingCycles.getAutionedPass(_fundingCycleId, i).saleAmount;\n            if (_saleAmount == 0) {\n                _allocations[i] = 0;\n                continue;\n            }\n            if (totalBiddingAmountBy[_fundingCycleId][i] > _saleAmount) {\n                _allocations[i] = totalSqrtWeightBy[_fundingCycleId][i] == 0\n                    ? 0\n                    : depositedWeightBy[_user][_fundingCycleId][i]\n                        .sqrtWeight\n                        .mul(1e12)\n                        .div(totalSqrtWeightBy[_fundingCycleId][i])\n                        .div(1e6);\n            } else {\n                _allocations[i] = depositedWeightBy[_user][_fundingCycleId][i]\n                    .amount\n                    .mul(1e12)\n                    .div(_saleAmount)\n                    .div(1e6);\n            }\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /**\n        @notice\n        Get estimated allocations by funding cycle\n        allocation 100000 means 0.1(10%), 1 meanss 0.000001(0.0001%), 1000000 means 1(100%)\n\n        @param _projectId the project id of contribute dao\n        @param _fundingCycleId the funding cycle id\n        @param _weights ticket weights by tier\n     */\n    function getEstimatingUserAllocation(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        uint256[] memory _biddingAmounts,\n        uint256[] memory _weights\n    ) external view override returns (uint256[] memory _allocations) {\n        _allocations = new uint256[](tierSizeOf[_projectId]);\n        for (uint256 i; i < tierSizeOf[_projectId];) {\n            uint256 _saleAmount = fundingCycles.getAutionedPass(_fundingCycleId, i).saleAmount;\n            if (_saleAmount == 0) {\n                _allocations[i] = 0;\n                continue;\n            }\n            if ((totalBiddingAmountBy[_fundingCycleId][i] + _biddingAmounts[i]) > _saleAmount) {\n                uint256 _sqrtedWeight = _sqrt(_weights[i]);\n                _allocations[i] = _sqrtedWeight\n                    .mul(1e12)\n                    .div(totalSqrtWeightBy[_fundingCycleId][i] + _sqrtedWeight)\n                    .div(1e6);\n            } else {\n                _allocations[i] = _biddingAmounts[i].mul(1e12).div(_saleAmount).div(1e6);\n            }\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transactions ║\n      ╚═════════════════════════╝*/\n    constructor(\n        ITerminalDirectory _terminalDirectory,\n        IConfigStore _configStore,\n        IFundingCycles _fundingCycles\n    ) TerminalUtility(_terminalDirectory) {\n        configStore = _configStore;\n        fundingCycles = _fundingCycles;\n    }\n\n    /**\n        @notice\n        Initialize the membershiopass for dao\n\n        @param _projectId The project ID\n        @param _tierFees Royalty fees\n        @param _tierCapacities Total supply for each token\n     */\n    function issue(\n        uint256 _projectId,\n        uint256[] calldata _tierFees,\n        uint256[] calldata _tierCapacities,\n        uint256[] calldata _multipers\n    ) external override onlyTerminal(_projectId) returns (address _membershipPass) {\n        IRoyaltyDistributor royalty = new RoyaltyDistributor();\n        MembershipPass membershipPass = new MembershipPass(\n            _projectId,\n            address(royalty),\n            _tierFees,\n            _tierCapacities,\n            configStore\n        );\n        royaltyDistributorOf[_projectId] = royalty;\n        membershipPassOf[_projectId] = membershipPass;\n        tierSizeOf[_projectId] = _tierCapacities.length;\n        _membershipPass = address(membershipPass);\n\n        emit Issue(\n            _projectId,\n            _membershipPass,\n            address(royalty),\n            _tierFees,\n            _tierCapacities,\n            _multipers\n        );\n    }\n\n    /**\n        @notice\n        For the contribution that user need to deposit the fund to the pool\n    \n        @param _projectId The project ID\n        @param _fundingCycleId The funding cycle ID\n        @param _from The wallet address of the contributo\n        @param _payInfos The payment information for this transaction\n     */\n    function stake(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        address _from,\n        PayInfoWithWeight[] memory _payInfos\n    ) external override onlyTerminal(_projectId) {\n        for (uint256 i; i < _payInfos.length;) {\n            PayInfoWithWeight memory _payInfo = _payInfos[i];\n            uint256 _baseWeight = _payInfo.amount.mul(_payInfo.weight);\n            uint256 _sqrtedWeight = _sqrt(_baseWeight);\n            totalSqrtWeightBy[_fundingCycleId][_payInfo.tier] += _sqrtedWeight;\n            totalBiddingAmountBy[_fundingCycleId][_payInfo.tier] += _payInfo.amount;\n            WeightInfo memory _weightByTier = depositedWeightBy[_from][_fundingCycleId][\n                _payInfo.tier\n            ];\n            depositedWeightBy[_from][_fundingCycleId][_payInfo.tier] = WeightInfo({\n                amount: _weightByTier.amount + _payInfo.amount,\n                sqrtWeight: _weightByTier.sqrtWeight + _sqrtedWeight\n            });\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /**\n        @notice\n        Batch mint tickets\n\n        @param _projectId The ID of the DAO\n        @param _fundingCycleId The ID of the funding cycle period\n        @param _from The wallet address of owner\n        @param _amounts The payment information for this transaction\n     */\n    function batchMintTicket(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        address _from,\n        uint256[] memory _amounts\n    ) external override onlyTerminal(_projectId) {\n        claimedOf[_from][_fundingCycleId] = true;\n        uint256[] memory _tiers = new uint256[](_amounts.length);\n        for (uint256 i; i < _amounts.length;) {\n            _tiers[i] = i;\n            unchecked {\n                i++;\n            }\n        }\n        membershipPassOf[_projectId].batchMintPassForMember(_from, _tiers, _amounts);\n\n        emit BatchMintTicket(_from, _projectId, _tiers, _amounts);\n    }\n\n    /**\n        @notice\n        Batch mint special nfts for the address who have community token\n\n        @param _projectId The ID of the DAO\n        @param _fundingCycleId The ID of the funding cycle period\n        @param _from The wallet address of owner\n        @param _tierIds The special token ids\n        @param _amounts The payment information for this transaction\n     */\n    function airdropBatchMintTicket(\n        uint256 _projectId,\n        uint256 _fundingCycleId,\n        address _from,\n        uint256[] memory _tierIds,\n        uint256[] memory _amounts\n    ) external override onlyTerminal(_projectId) {\n        airdropClaimedOf[_from][_fundingCycleId] = true;\n        for (uint256 i; i < _tierIds.length;) {\n            airdropClaimedAmountOf[_fundingCycleId][_tierIds[i]] += _amounts[i];\n            unchecked {\n                i++;\n            }\n        }\n        membershipPassOf[_projectId].batchMintPassForMember(_from, _tierIds, _amounts);\n\n        emit AirdropBatchMintTicket(_from, _projectId, _tierIds, _amounts);\n    }\n\n    /**\n        @notice\n        Claim according to votes share\n\n        @param _projectId The project ID \n        @param _merkleRootIds Merkle tree root ids\n        @param _merkleProofs Merkle tree proofs\n        @param _amounts Claim amounts\n     */\n    function claimRoyaltyFee(\n        uint256 _projectId,\n        uint256[] calldata _merkleRootIds,\n        bytes32[][] memory _merkleProofs,\n        uint256[] calldata _amounts\n    ) external {\n        IRoyaltyDistributor distributor = royaltyDistributorOf[_projectId];\n        if (distributor == IRoyaltyDistributor(address(0))) {\n            revert ProjectNotExist();\n        }\n        distributor.claimRoyaltyFee(msg.sender, _merkleRootIds, _merkleProofs, _amounts);\n\n        emit ClaimRoyaltyFee(_projectId, msg.sender, _merkleRootIds, _amounts);\n    }\n\n    /**\n        @notice\n        Start a new distribution\n\n        @param _projectId The project ID\n        @param _distributeAmount The distribute amount of this cycle\n        @param _merkleRoot Merkle tree root, record distribution amount of each member\n        @param _ipfsHash The ipfs hash of merkle tree\n        @param _signature The signature signed by signer\n     */\n    function distributeRoyaltyFee(\n        uint256 _projectId,\n        uint256 _distributeAmount,\n        bytes32 _merkleRoot,\n        string memory _ipfsHash,\n        bytes memory _signature\n    ) external nonReentrant {\n        IRoyaltyDistributor distributor = royaltyDistributorOf[_projectId];\n        if (distributor == IRoyaltyDistributor(address(0))) {\n            revert ProjectNotExist();\n        }\n        bytes32 _hash = keccak256(\n            abi.encodePacked(_projectId, \"-\", _ipfsHash, \"-\", _distributeAmount, \"-\", _merkleRoot)\n        );\n        if (ECDSA.recover(_hash, _signature) != configStore.signer()) {\n            revert UnAuthorized();\n        }\n        uint256 _merkleRootId = distributor.distributeRoyaltyFee(_distributeAmount, _merkleRoot);\n\n        emit DistributeRoyaltyFee(\n            _projectId,\n            _merkleRootId,\n            _distributeAmount,\n            block.timestamp,\n            _ipfsHash\n        );\n    }\n\n    /*╔═════════════════════════════╗\n      ║   Private Helper Functions  ║\n      ╚═════════════════════════════╝*/\n    /**\n        @notice\n        Calculates the square root of x, rounding down\n\n        @dev\n        Uses the Babylonian method (https://ethereum.stackexchange.com/a/97540/37941)\n\n        @param x The uint256 number for which to calculate the square root\n        @return result The result as an uint256\n     */\n    function _sqrt(uint256 x) private pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n        // Calculate the square root of the perfect square of a power of two that is the closest to x.\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/MembershipPass.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n\nimport {IMembershipPass, IConfigStore} from \"./interfaces/IMembershipPass.sol\";\n\ncontract MembershipPass is IMembershipPass, ERC1155, Ownable {\n    using Strings for uint256;\n    using SafeMath for uint256;\n\n    /*╔═════════════════════════════╗\n      ║   Private Stored Constants  ║\n      ╚═════════════════════════════╝*/\n    uint256 private immutable _projectId;\n\n    // the maximum royalty fee 10%\n    uint256 private constant MAX_ROYALTY_FEE = 1000;\n\n    /*╔═════════════════════════════╗\n      ║  Public Stored Properties   ║\n      ╚═════════════════════════════╝*/\n    // Tier capacity is zero-indexed\n    mapping(uint256 => uint256) public tierCapacity;\n\n    // Supplied amount by tier\n    mapping(uint256 => uint256) public supplyByTier;\n\n    // Royalty fee\n    mapping(uint256 => uint256) public tierFee;\n\n    // Fee collector to receive royalty fees\n    address public override feeCollector;\n\n    // Config store utils to store the global basic uris\n    IConfigStore public override configStore;\n\n    /*╔══════════════════╗\n      ║   External VIEW  ║\n      ╚══════════════════╝*/\n    /**\n        @notice\n        Implement ERC2981, but actually the most marketplaces have their own royalty logic. Only LooksRare\n\n        @param _tier The token ID of current saled item\n        @param _salePrice The Sale price of current saled item\n     */\n    function royaltyInfo(uint256 _tier, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        return (feeCollector, _salePrice.mul(tierFee[_tier]).div(10000));\n    }\n\n    function uri(uint256 _tokenId) public view override returns (string memory) {\n        string memory _baseURI = configStore.baseURI();\n\n        return\n            bytes(_baseURI).length > 0\n                ? string(\n                    abi.encodePacked(_baseURI, _projectId.toString(), \"/\", _tokenId.toString())\n                )\n                : \"\";\n    }\n\n    /**\n        @notice\n        Return the contract-level metadata for opensea\n        https://docs.opensea.io/docs/contract-level-metadata\n     */\n    function contractURI() public view returns (string memory) {\n        string memory _baseContractURI = configStore.baseContractURI();\n\n        return\n            bytes(_baseContractURI).length > 0\n                ? string(abi.encodePacked(_baseContractURI, _projectId.toString()))\n                : \"\";\n    }\n\n    /**\n        @notice\n        Get remaining amount of giving toke id\n\n        @dev\n        RemainingAmount = capacity - supply    TODO: 還需要把社區 airdrop 票算進去\n\n        @param _tier The token id\n     */\n    function getRemainingAmount(uint256 _tier) public view returns (uint256 _remainingAmount) {\n        _remainingAmount = tierCapacity[_tier] - supplyByTier[_tier];\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transaction  ║\n      ╚═════════════════════════╝*/\n    constructor(\n        uint256 _daoId,\n        address _feeCollector,\n        uint256[] memory _tierFees,\n        uint256[] memory _tierCapacities,\n        IConfigStore _configStore\n    ) ERC1155(\"\") {\n        if (_tierFees.length == 0) revert TierNotSet();\n        if (_configStore == IConfigStore(address(0))) revert TierUnknow();\n        uint256 _tier;\n        for (uint256 i; i < _tierFees.length;) {\n            if (_tierCapacities[i] == 0) revert BadCapacity();\n            if (_tierFees[i] > MAX_ROYALTY_FEE) revert BadFee();\n            tierFee[_tier] = _tierFees[i];\n            tierCapacity[_tier] = _tierCapacities[i];\n            unchecked {\n                _tier ++;\n                i++;\n            }\n        }\n\n        _projectId = _daoId;\n        configStore = _configStore;\n        feeCollector = _feeCollector;\n    }\n\n    /**\n        @notice\n        Mint token to giving address\n\n        @param _recepient The recepient to be mint tokens\n        @param _tier The token id\n        @param _amount The amount to be mint\n     */\n    function mintPassForMember(\n        address _recepient,\n        uint256 _tier,\n        uint256 _amount\n    ) external override onlyOwner {\n        if (tierCapacity[_tier] == 0) revert TierUnknow();\n        if (_amount > getRemainingAmount(_tier)) revert InsufficientBalance();\n\n        supplyByTier[_tier] = supplyByTier[_tier].add(_amount);\n        _mint(_recepient, _tier, _amount, \"\");\n\n        emit MintPass(_recepient, _tier, _amount);\n    }\n\n    /**\n        @notice\n        Batch mint tokens to giving address\n\n        @param _recepient The recepient to be mint tokens\n        @param _tiers The token ids\n        @param _amounts The amounts to be mint\n     */\n    function batchMintPassForMember(\n        address _recepient,\n        uint256[] memory _tiers,\n        uint256[] memory _amounts\n    ) external override onlyOwner {\n        for (uint256 i; i < _tiers.length;) {\n            uint256 _tier = _tiers[i];\n            if (tierCapacity[_tier] == 0) revert TierUnknow();\n            if (_amounts[i] > getRemainingAmount(_tier)) revert InsufficientBalance();\n\n            supplyByTier[_tier] += _amounts[i];\n    \n            unchecked {\n                i++;\n            }\n        }\n        _mintBatch(_recepient, _tiers, _amounts, \"\");\n\n        emit BatchMintPass(_recepient, _tiers, _amounts);\n    }\n\n    /**\n        @notice\n        The owner can update the fee collector address\n\n        @dev\n        Only owner have access to operate\n\n        @param _feeCollector The new fee collector\n     */\n    function updateFeeCollector(address _feeCollector) external override onlyOwner {\n        feeCollector = _feeCollector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/DAOGovernorBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\nimport {IConfigStore} from \"./interfaces/IConfigStore.sol\";\nimport {TerminalUtility, ITerminalDirectory} from \"./abstract/TerminalUtility.sol\";\nimport {IDAOGovernorBooster, IProjects} from \"./interfaces/IDAOGovernorBooster.sol\";\n\ncontract DAOGovernorBooster is IDAOGovernorBooster, TerminalUtility, ERC1155Holder {\n    using SafeMath for uint256;\n    using Counters for Counters.Counter;\n\n    modifier onlyAdmin(uint256 _projectId) {\n        if (adminOf[_projectId] != msg.sender) revert UnAuthorized();\n        _;\n    }\n    modifier onlyProjectOwner(uint256 _projectId) {\n        if (msg.sender != projects.ownerOf(_projectId)) revert NotProjectOwner();\n        _;\n    }\n\n    /*╔═════════════════════════════╗\n      ║   Private Stored Constants  ║\n      ╚═════════════════════════════╝*/\n    uint256 private constant SECONDS_IN_MONTH = 2592000;\n\n    /*╔═════════════════════════════╗\n      ║    Public Stored Constants  ║\n      ╚═════════════════════════════╝*/\n    uint256 public constant PROPOSE_ETH = 1e15; // TODO 1eth=1e18 stake 1 ETH to propose, WETH with 18 decimals\n\n    IProjects public immutable projects;\n\n    IConfigStore public immutable configStore;\n\n    /*╔═════════════════════════════╗\n      ║  Public Stored Properties   ║\n      ╚═════════════════════════════╝*/\n    // 10 => 10%, the minimum quorem needs for a proposal\n    uint256 public proposalRate = 10;\n\n    uint256 public recordId;\n\n    // proposal\n    mapping(uint256 => Counters.Counter) public proposalIdOf;\n\n    // The ID of the DAO => proposalId => StakeETH\n    mapping(uint256 => mapping(uint256 => uint256)) public stakedETHOf;\n\n    // The ID of the DAO => proposalId => proposal\n    mapping(uint256 => mapping(uint256 => Proposal)) public proposalOf;\n\n    // The ID of the DAO => the membershipPass address\n    mapping(uint256 => address) public membershipPassOf;\n\n    // The ID of the DAO => tierId => multiper\n    mapping(uint256 => mapping(uint256 => uint256)) public tierReputationMultiplierOf;\n\n    // The ID of the DAO => Stake Pass Record ID => stake record\n    mapping(address => mapping(uint256 => StakeRecord)) public stakesOf;\n\n    // Wallet Address => project id => record ids\n    mapping(address => mapping(uint256 => uint256[])) public recordOf;\n\n    // The ID of the Proposal => Voting Result\n    mapping(uint256 => Vote) public votesOf;\n\n    // The ID of the DAO => Wallet Address\n    mapping(uint256 => address) public adminOf;\n\n    /*╔══════════════════╗\n      ║   External VIEW  ║\n      ╚══════════════════╝*/\n\n    /**\n        @notice\n        Calculate the reputation points of the wallet address\n\n        @param _projectId The ID of the DAO \n        @param _from The wallet address that you want to get Points\n     */\n    function getReputation(uint256 _projectId, address _from) public view returns (uint256) {\n        uint256[] memory _records = recordOf[_from][_projectId];\n\n        if (_records.length == 0) return 0;\n\n        uint256 _reputation;\n        for (uint256 i; i < _records.length;) {\n            StakeRecord memory _record = stakesOf[_from][_records[i]];\n            if (block.timestamp < _record.expiry) {\n                _reputation += _record.point;\n            }\n            unchecked {\n                i++;\n            }\n        }\n\n        return _reputation;\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transaction  ║\n      ╚═════════════════════════╝*/\n\n    constructor(\n        IProjects _projects,\n        IConfigStore _configStore,\n        ITerminalDirectory _terminalDirectory\n    ) TerminalUtility(_terminalDirectory) {\n        projects = _projects;\n        configStore = _configStore;\n    }\n\n    /**\n        @notice\n        Setup / create the admin for the governor in the DAO\n\n        @param _projectId The ID of the DAO\n        @param _multipliers Multiplier for tier reputations\n        @param _membershipPass Membership-pass of the DAO\n        @param _admin The admin of the DAO who can revert the impractical proposals\n     */\n    function createGovernor(\n        uint256 _projectId,\n        uint256[] calldata _multipliers,\n        address _membershipPass,\n        address _admin\n    ) external override onlyTerminal(_projectId) {\n        adminOf[_projectId] = _admin;\n        membershipPassOf[_projectId] = _membershipPass;\n        for(uint256 i; i < _multipliers.length;) {\n            tierReputationMultiplierOf[_projectId][i] = _multipliers[i];\n            unchecked {\n                i++;\n            }\n        }\n\n        emit CreateGovernor(_projectId, _membershipPass, _multipliers, _admin);\n    }\n\n    /**\n        @notice\n        Create a proposal \n\n        @dev\n        There has different types of proposals, only the DAO Owner can create the proposal that enable to unlock the treasury\n\n        @param _projectId The ID of the DAO\n        @param _properties The data properties of proposal\n        @param _target The address of Treasury account\n        @param _value The value of ETH\n        @param _signature The signature of the proposal\n        @param _calldata The data of the proposal\n     */\n    function propose(\n        uint256 _projectId,\n        ProposalParameter calldata _properties,\n        address _target,\n        uint256 _value,\n        string calldata _signature,\n        bytes calldata _calldata\n    ) external payable override onlyProjectOwner(_projectId) {\n        if (_properties.start >= _properties.end || block.timestamp >= _properties.end)\n            revert BadPeriod();\n        if (msg.value < PROPOSE_ETH) revert InsufficientBalance();\n\n        proposalIdOf[_projectId].increment();\n        uint256 _proposalId = proposalIdOf[_projectId].current();\n        stakedETHOf[_projectId][_proposalId] = msg.value;\n\n        bytes32 _hash = keccak256(abi.encodePacked(_target, _value, _signature, _calldata));\n\n        proposalOf[_projectId][_proposalId] = Proposal({\n            id: _proposalId,\n            hash: _hash,\n            uri: _properties.uri,\n            start: _properties.start,\n            end: _properties.end,\n            minVotes: _ceilDiv(votesOf[_projectId].totalVotes),\n            minVoters: _ceilDiv(votesOf[_projectId].totalVoters),\n            state: _properties.start > block.timestamp\n                ? ProposalState.Active\n                : ProposalState.Pending\n        });\n\n        emit ProposalCreated(_projectId, msg.sender, _proposalId);\n    }\n\n    /**\n        @notice\n        Execute the proposal\n\n        @param _projectId The ID of the DAO\n        @param _proposalId The ID of the proposal to execute\n        @param _proposeResult The proposal result, 0=true 1=false\n        @param _signatureBySigner the signature signed by signer\n     */\n    function execute(\n        uint256 _projectId,\n        uint256 _proposalId,\n        uint8 _proposeResult,\n        bytes memory _signatureBySigner,\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data\n    ) external override onlyProjectOwner(_projectId) returns (bytes memory _executeReturns) {\n        Proposal storage _proposal = proposalOf[_projectId][_proposalId];\n        if (_proposal.id != _proposalId) revert UnknowProposal();\n        if (block.timestamp < _proposal.end || _proposal.state == ProposalState.Executed)\n            revert BadPeriod();\n        if (!_isAuthorized(msg.sender, _proposalId, _proposeResult, _signatureBySigner))\n            revert InvalidSignature();\n\n        bytes32 _hash = keccak256(abi.encodePacked(_target, _value, _signature, _data));\n        if (_proposal.hash != _hash) revert TransactionNotMatch();\n\n        _proposal.state = ProposalState.Executed;\n\n        if (_proposeResult == 0) {\n            bytes memory _callData;\n\n            if (bytes(_signature).length == 0) {\n                _callData = _data;\n            } else {\n                _callData = abi.encodePacked(bytes4(keccak256(bytes(_signature))), _data);\n            }\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool _success, bytes memory _returnData) = _target.call{value: _value}(_callData);\n            if (!_success) revert TransactionReverted();\n            _executeReturns = _returnData;\n        }\n        // return staked eth in this proposal\n        uint256 staked = stakedETHOf[_projectId][_proposalId];\n        stakedETHOf[_projectId][_proposalId] = 0;\n        Address.sendValue(payable(msg.sender), staked);\n\n        emit ExecuteProposal(_projectId, msg.sender, _proposalId, _proposeResult);\n    }\n\n    /**\n        @notice\n        Admin can revert the incorrect proposal\n\n        @param _projectId the project id of proposal belows to\n        @param _proposalId the proposal id which try to revert\n     */\n    function revertProposal(uint256 _projectId, uint256 _proposalId)\n        external\n        onlyAdmin(_projectId)\n    {\n        if (proposalOf[_projectId][_proposalId].id == 0) revert UnknowProposal();\n\n        delete proposalOf[_projectId][_proposalId];\n    }\n\n    /**\n        @notice\n        Stake Membership-pass to get reputation\n\n        @param _projectId The ID of the DAO that user want to stake\n        @param _membershipPass Membership-Pass details\n     */\n    function stakePass(uint256 _projectId, PassStake[] memory _membershipPass)\n        external\n        override\n        returns (uint256 _reputation)\n    {\n        address _from = msg.sender;\n        if (_membershipPass.length == 0) return 0;\n        if (!_isMemberOfProject(_projectId, _from)) votesOf[_projectId].totalVoters += 1;\n\n        uint256[] memory _tiers = new uint256[](_membershipPass.length);\n        uint256[] memory _amounts = new uint256[](_membershipPass.length);\n        for (uint8 i; i < _membershipPass.length;) {\n            _tiers[i] = _membershipPass[i].tier;\n            _amounts[i] = _membershipPass[i].amount;\n            if (_amounts[i] == 0) revert BadAmount();\n            unchecked {\n                recordId ++;\n            }\n            recordOf[_from][_projectId].push(recordId);\n\n            stakesOf[_from][recordId] = StakeRecord({\n                tier: _tiers[i],\n                amount: _amounts[i],\n                stakeAt: block.timestamp,\n                expiry: block.timestamp + SECONDS_IN_MONTH * _membershipPass[i].duration,\n                point: tierReputationMultiplierOf[_projectId][_tiers[i]] *\n                    _membershipPass[i].duration * // TODO: Duration should be based on 1 month, 3 months, 6 months, 12 months\n                    _amounts[i]\n            });\n            unchecked {\n                i++;\n            }\n        }\n        IERC1155(membershipPassOf[_projectId]).safeBatchTransferFrom(\n            _from,\n            address(this),\n            _tiers,\n            _amounts,\n            \"0x00\"\n        );\n        // TODO: if Gold Pass: 3pts, Silver: 2pts |  lock 1 month => *1, lock 3 momth => *3\n        // how to store the data for user lock Pass multiple times. (數據儲存問題、迴圈查詢、)\n\n        _reputation = getReputation(_projectId, _from);\n\n        votesOf[_projectId].totalVotes += _reputation;\n\n        emit StakePass(_projectId, _from, _reputation, _tiers, _amounts);\n    }\n\n    /**\n        @notice\n        Unstake MembershipPass\n\n        @param _projectId the project to unstake\n     */\n    function unStakePass(uint256 _projectId, uint256[] memory _recordIds)\n        external\n        override\n        returns (uint256 _reputation)\n    {\n        address _recepient = msg.sender;\n\n        uint256[] memory _tiers = new uint256[](_recordIds.length);\n        uint256[] memory _amounts = new uint256[](_recordIds.length);\n        for (uint8 i; i < _recordIds.length;) {\n            StakeRecord memory record = stakesOf[_recepient][_recordIds[i]];\n            if (record.amount == 0) revert InvalidRecord();\n            if (block.timestamp < record.expiry) revert NotExpired();\n            _tiers[i] = record.tier;\n            _amounts[i] = record.amount;\n            delete stakesOf[_recepient][_recordIds[i]];\n            delete recordOf[_recepient][_projectId][_recordIds[i]];\n            unchecked {\n                i++;\n            }\n        }\n        IERC1155(membershipPassOf[_projectId]).safeBatchTransferFrom(\n            address(this),\n            _recepient,\n            _tiers,\n            _amounts,\n            \"0x00\"\n        );\n        bool _isMemberAfterRedeem = _isMemberOfProject(_projectId, _recepient);\n        if (!_isMemberAfterRedeem) {\n            votesOf[_projectId].totalVoters -= 1;\n            delete recordOf[_recepient][_projectId];\n        }\n\n        _reputation = getReputation(_projectId, _recepient);\n\n        votesOf[_projectId].totalVotes -= _reputation;\n\n        emit UnStakePass(_projectId, _recepient, _reputation, _tiers, _amounts);\n    }\n\n    /*╔═════════════════════════════╗\n      ║   Private Helper Functions  ║\n      ╚═════════════════════════════╝*/\n\n    /**\n        @notice\n        Verify the signature\n\n        @param _from the proposal creator\n        @param _proposalId the target proposal\n        @param _proposeResult the result of proposal 0=true 1=false\n        @param _signature signature signed by signer address\n     */\n    function _isAuthorized(\n        address _from,\n        uint256 _proposalId,\n        uint8 _proposeResult,\n        bytes memory _signature\n    ) private view returns (bool) {\n        bytes32 _hash = keccak256(abi.encodePacked(_from, _proposalId, _proposeResult));\n        return configStore.signer() == ECDSA.recover(_hash, _signature);\n    }\n\n    /**\n        @notice\n        Returns the integer division of points. The result is rounded up\n\n        @param _point points\n     */\n    function _ceilDiv(uint256 _point) private view returns (uint256 _ceiled) {\n        _ceiled = (_point * proposalRate + 100 - 1) / 100;\n        if (_ceiled == 0) _ceiled = 1;\n    }\n\n    /**\n        @notice\n        Check a wallet address is member of giving project or not\n\n        @param _projectId The ID of DAO\n        @param _from The wallet address you wanna check with\n     */\n    function _isMemberOfProject(uint256 _projectId, address _from) private view returns (bool) {\n        uint256[] memory _records = recordOf[_from][_projectId];\n        if (_records.length == 0) return false;\n        for (uint256 i; i < _records.length;) {\n            if (_records[i] != 0) return true;\n            unchecked {\n                i++;\n            }\n        }\n\n        return false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/Projects.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport {IProjects, ITerminal} from \"./interfaces/IProjects.sol\";\n\n/**\n  @notice\n  Each DAO has one owner who is the owner of this ERC721.\n */\ncontract Projects is IProjects, ERC721, Ownable {\n    /*╔═════════════════════════════╗\n      ║   Private Stored Constants  ║\n      ╚═════════════════════════════╝*/\n    string private _baseURIextended;\n\n    /*╔═════════════════════════════╗\n      ║  Public Stored Properties   ║\n      ╚═════════════════════════════╝*/\n    // @notice A running count of project IDs.\n    uint256 public override count;\n\n    // @notice Each project's handle.\n    mapping(uint256 => bytes32) public override handleOf;\n\n    // @notice The project that each unique handle represents.\n    mapping(bytes32 => uint256) public override projectFor;\n\n    /*╔═══════════════════════════╗\n        ║         MODIFIERS         ║\n        ╚═══════════════════════════╝*/\n    modifier onlyProjectOwner(uint256 _projectId) {\n        if (msg.sender != ownerOf(_projectId)) revert UnAuthorized();\n        _;\n    }\n\n    /*╔═════════════════════════════╗\n    ║  INTERNAL HELPER FUNCTIONS  ║\n    ╚═════════════════════════════╝*/\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseURIextended;\n    }\n\n    /*╔══════════════════╗\n      ║   External VIEW  ║\n      ╚══════════════════╝*/\n    /**\n        @notice\n        Whether the specified project exists\n    \n        @param _projectId The project to check the existence of\n        @return A flag indicating if the project exists\n     */\n    function exists(uint256 _projectId) external view override returns (bool) {\n        return _exists(_projectId);\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transaction  ║\n      ╚═════════════════════════╝*/\n    constructor(address _superAdmin) ERC721(\"Neighborhood project\", \"NEIGHHORHOOD PROJECT\") {\n        transferOwnership(_superAdmin);\n    }\n\n    /**\n        @notice\n        Create a new project\n\n        @param _owner The owner of the project\n        @param _handle A unique handle for the project\n        @param _terminal The terminal to set for this project\n     */\n    function create(\n        address _owner,\n        bytes32 _handle,\n        ITerminal _terminal\n    ) external override returns (uint256) {\n        // Handle must exist.\n        if (_handle == bytes32(0)) revert EmptyHandle();\n\n        // Handle must be unique.\n        if (projectFor[_handle] != 0) revert TakenedHandle();\n\n        // Increment the count, which will be used as the ID.\n        count++;\n\n        // Mint the project.\n        _safeMint(_owner, count);\n\n        // Set the handle stored values.\n        handleOf[count] = _handle;\n        projectFor[_handle] = count;\n\n        // Set the project's terminal if needed.\n        if (_terminal != ITerminal(address(0)))\n            _terminal.terminalDirectory().setTerminal(count, _terminal);\n\n        emit Create(count, _owner, _handle, msg.sender);\n\n        return count;\n    }\n\n    /**\n        @notice\n        Allows a project owner to set the project's handle\n\n        @dev\n        Only a project's owner or operator can set its handle\n\n        @param _projectId The ID of the project\n        @param _handle The new unique handle for the project\n     */\n    function setHandle(uint256 _projectId, bytes32 _handle)\n        external\n        override\n        onlyProjectOwner(_projectId)\n    {\n        // Handle must exist.\n        if (_handle == bytes32(0)) revert EmptyHandle();\n        // Handle must be unique.\n        if (projectFor[_handle] != 0) revert TakenedHandle();\n\n        // Register the change in the resolver.\n        projectFor[handleOf[_projectId]] = 0;\n\n        projectFor[_handle] = _projectId;\n        handleOf[_projectId] = _handle;\n\n        emit SetHandle(_projectId, _handle, msg.sender);\n    }\n\n    function setBaseURI(string memory _uri) external override onlyOwner {\n        _baseURIextended = _uri;\n\n        emit SetBaseURI(_uri);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../extensions/ERC721Enumerable.sol\";\nimport \"../extensions/ERC721Burnable.sol\";\nimport \"../extensions/ERC721Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC721PresetMinterPauserAutoId is\n    Context,\n    AccessControlEnumerable,\n    ERC721Enumerable,\n    ERC721Burnable,\n    ERC721Pausable\n{\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    string private _baseTokenURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) ERC721(name, symbol) {\n        _baseTokenURI = baseTokenURI;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We cannot just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/mock/MockERC721.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\";\n\ncontract MockERC721 is ERC721PresetMinterPauserAutoId {\n    constructor() ERC721PresetMinterPauserAutoId(\n        \"MockERC721\",\n        \"MOCK721\",\n        \"https://www.fake.com/meta/\"\n    ) {}\n}"
    },
    "contracts/ConfigStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/IConfigStore.sol\";\n\n/**\n  @notice\n  Stores configuration globally\n  @dev\n  Uris is used as base uri of membership pass\n*/\ncontract ConfigStore is IConfigStore, Ownable {\n    /*╔═════════════════════════════╗\n      ║  Public Stored Properties   ║\n      ╚═════════════════════════════╝*/\n\n    // The base uri of metadata for membershippass nft\n    string public override baseURI;\n\n    // Contract level data, for intergrating the NFT to OpenSea\n    string public override baseContractURI;\n\n    // Signer address, sign proposal and royalty fee distribution merkle tree\n    address public override signer;\n\n    /*╔═════════════════════════╗\n      ║   External Transaction  ║\n      ╚═════════════════════════╝*/\n\n    constructor(\n        string memory _baseURI,\n        string memory _baseContractURI,\n        address _signer\n    ) {\n        baseURI = _baseURI;\n        baseContractURI = _baseContractURI;\n        signer = _signer;\n    }\n\n    /**\n        @notice\n        The owner can modify the base uri\n\n        @param _uri The new base uri\n     */\n    function setBaseURI(string memory _uri) external override onlyOwner {\n        baseURI = _uri;\n\n        emit SetBaseURI(_uri);\n    }\n\n    /**\n        @notice\n        The owner can modify the base contract uri\n        \n        @param _uri The new base contract uri\n     */\n    function setBaseContractURI(string memory _uri) external override onlyOwner {\n        baseContractURI = _uri;\n\n        emit SetBaseContractURI(_uri);\n    }\n\n    /**\n        @notice\n        The owner can modify the signer\n        \n        @param _signer The new signer\n     */\n    function setSigner(address _signer) external override onlyOwner {\n        signer = _signer;\n\n        emit SetSigner(_signer);\n    }\n}\n"
    },
    "contracts/FundingCycles.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {TerminalUtility, ITerminalDirectory} from \"./abstract/TerminalUtility.sol\";\nimport {IProjects} from \"./interfaces/IProjects.sol\";\nimport {\n    AuctionedPass,\n    IFundingCycles,\n    FundingCycleState,\n    FundingCycleParameter,\n    FundingCycleProperties\n} from \"./interfaces/IFundingCycles.sol\";\n\ncontract FundingCycles is IFundingCycles, TerminalUtility {\n    /*╔═════════════════════════════╗\n      ║   Private Stored Constants  ║\n      ╚═════════════════════════════╝*/\n\n    // The number of seconds in a day.\n    uint256 private constant SECONDS_IN_DAY = 3600; // TODO 1 hour\n\n    // The max percentage of funds lock in treasury 100%\n    uint256 private constant MAX_LOCK_RATE = 1e4;\n\n    /*╔═════════════════════════════╗\n      ║   Private Stored Properties ║\n      ╚═════════════════════════════╝*/\n\n    // Stores the amount that has been tapped within each funding cycle.\n    // TODO: Accept with ETH only, should we add ERC20 tokens?\n    mapping(uint256 => uint256) private _tappedOf;\n\n    // Stores the amount that has been contributed of each funding cycle.\n    // TODO: Accept with ETH only, should we add ERC20 tokens?\n    mapping(uint256 => uint256) private _depositedOf;\n\n    // Stores the amount that has been unlocked of each funding cycle.\n    // TODO: Accept with ETH only, should we add ERC20 tokens?\n    mapping(uint256 => uint256) private _unLockedOf;\n    \n    // mapping fundingCycleId with auctionPass\n    mapping(bytes32 => AuctionedPass) private _fundingCycleIdAuctionedPass;\n\n    /*╔═════════════════════════════╗\n      ║    Public Stored Constants  ║\n      ╚═════════════════════════════╝*/\n\n    uint8 public constant override MAX_CYCLE_LIMIT = 32;\n\n    /*╔═════════════════════════════╗\n      ║  Public Stored Properties   ║\n      ╚═════════════════════════════╝*/\n\n    /// @notice The total number of funding cycles created, which is used for issuing funding cycle IDs.\n    /// @dev Funding cycles have IDs > 0.\n    uint256 public override count;\n\n    // mapping id with funding cycle properties\n    mapping(uint256 => FundingCycleProperties) public fundingCycleProperties;\n\n    // mapping projectId with latest funding cycle properties id\n    mapping(uint256 => uint256) public override latestIdFundingProject;\n\n    /*╔══════════════════╗\n      ║   External VIEW  ║\n      ╚══════════════════╝*/\n      \n    /**\n        @notice \n        Get the funding cycle with the given ID\n\n        @param _fundingCycleId The ID of the funding cycle to get\n     */\n    function getFundingCycle(uint256 _fundingCycleId)\n        public\n        view\n        override\n        returns (FundingCycleProperties memory)\n    {\n        return fundingCycleProperties[_fundingCycleId];\n    }\n\n    /**\n        @notice\n        Current active funding cycle of this dao project\n\n        @param _projectId The ID of project\n     */\n    function currentOf(uint256 _projectId)\n        external\n        view\n        override\n        returns (FundingCycleProperties memory)\n    {\n        uint256 latestId = latestIdFundingProject[_projectId];\n        return getFundingCycle(latestId);\n    }\n\n    /**\n        @notice\n        Get the tappable amount of giving funding cycle\n\n        @param _fundingCycleId The ID of funding cycle to get max tappable amount\n     */\n    function getTappableAmount(uint256 _fundingCycleId)\n        public\n        override\n        view\n        returns (uint256 _totalTappable)\n    {\n        FundingCycleProperties memory _fundingCycle = fundingCycleProperties[_fundingCycleId];\n\n        uint256 _eligibleDeposited = _getEligibleDepositedAmount(_fundingCycleId);\n        uint256 _baseTappable = (_eligibleDeposited * (1e4 - _fundingCycle.lockRate)) / 1e4;\n\n        _totalTappable = _baseTappable + _unLockedOf[_fundingCycleId] - _tappedOf[_fundingCycleId];\n    }\n\n    /**\n        @notice\n        Return the state of giving funding cycle\n\n        @param _fundingCycleId The ID of funding cycle to get state\n     */\n    function getFundingCycleState(uint256 _fundingCycleId) public override view returns(FundingCycleState) {\n        FundingCycleProperties memory _fundingCycle = fundingCycleProperties[_fundingCycleId];\n\n        if (block.timestamp < _fundingCycle.start) return FundingCycleState.WarmUp;\n        if (block.timestamp >= _fundingCycle.start + (_fundingCycle.duration * SECONDS_IN_DAY)) return FundingCycleState.Expired;\n\n        return FundingCycleState.Active;\n    }\n    \n    function getAutionedPass(uint256 _fundingCycleId, uint256 _tierId) external override view returns(AuctionedPass memory) {\n        bytes32 _autionKey = keccak256(abi.encodePacked(_fundingCycleId, \"-\", _tierId));\n        \n        return _fundingCycleIdAuctionedPass[_autionKey];\n    }\n\n    /*╔═════════════════════════╗\n      ║   External Transaction  ║\n      ╚═════════════════════════╝*/\n    constructor(ITerminalDirectory _terminalDirectory) TerminalUtility(_terminalDirectory) {}\n\n    /**\n        @notice\n        configure funding cycle\n        return a new funding cycle by call init if there is no funding cycle exist in the project\n        return existing funding cycle if the funding cycle still active in the project\n        return new funding cycle if there is no active funding cycle\n\n        @param _projectId Dao Id\n        @param _params The parameters for Funding Cycle\n        @param _auctionedPass auction pass information\n     */\n    function configure(\n        uint256 _projectId,\n        FundingCycleParameter calldata _params,\n        AuctionedPass[] calldata _auctionedPass\n    ) external override onlyTerminal(_projectId) returns (FundingCycleProperties memory) {\n        if (_params.duration >= type(uint16).max) revert BadDuration();\n        \n        if (_params.lockRate > MAX_LOCK_RATE) revert BadLockRate();\n\n        // Currency must be less than the limit.\n        if (_params.cycleLimit > MAX_CYCLE_LIMIT) revert BadCycleLimit();\n\n        uint256 configTime = block.timestamp;\n\n        if (latestIdFundingProject[_projectId] == 0) {\n            //create a new one and return it because no fundingcycle active\n            uint256 fundingCycleId = _init(_projectId, 0, _params);\n            for (uint256 i; i < _auctionedPass.length;) {\n                bytes32 _autionKey = keccak256(abi.encodePacked(fundingCycleId, \"-\", _auctionedPass[i].id));\n                _fundingCycleIdAuctionedPass[_autionKey] = _auctionedPass[i];\n                emit InitAuctionedPass(fundingCycleId, _auctionedPass[i]);\n\n                unchecked {\n                    i++;\n                }\n            }\n\n            emit Configure(fundingCycleId, _projectId, configTime, msg.sender);\n\n            return getFundingCycle(fundingCycleId);\n        } else {\n            //check if the latestIdFunding project still running\n            uint256 latestId = latestIdFundingProject[_projectId];\n            FundingCycleProperties memory latestFundingCycleProperties = fundingCycleProperties[\n                latestId\n            ];\n            if (\n                block.timestamp >= latestFundingCycleProperties.start &&\n                block.timestamp <=\n                latestFundingCycleProperties.start +\n                    (latestFundingCycleProperties.duration * SECONDS_IN_DAY)\n            ) {\n                emit FundingCycleExist(latestId, _projectId, configTime, msg.sender);\n\n                return latestFundingCycleProperties;\n            }\n\n            uint256 fundingCycleId = _init(_projectId, latestId,_params);\n            \n            for (uint256 i; i < _auctionedPass.length;) {\n                bytes32 _preAutionKey = keccak256(abi.encodePacked(fundingCycleId, \"-\", _auctionedPass[i].id));\n                if ((_auctionedPass[i].saleAmount + _auctionedPass[i].communityAmount + _auctionedPass[i].reservedAmount) > _fundingCycleIdAuctionedPass[_preAutionKey].reservedAmount) {\n                    revert InsufficientBalance();\n                }\n\n                _fundingCycleIdAuctionedPass[keccak256(abi.encodePacked(fundingCycleId, \"-\", _auctionedPass[i].id))] = _auctionedPass[i];\n                emit InitAuctionedPass(fundingCycleId, _auctionedPass[i]);\n                \n                unchecked {\n                    i++;\n                }\n            }\n            emit Configure(fundingCycleId, _projectId, configTime, msg.sender);\n            return getFundingCycle(fundingCycleId);\n        }\n    }\n\n    /**\n        @notice\n        Update the contribute status of giving project\n\n        @param _projectId The project ID to update\n        @param _paused Paused or not\n     */\n    function setPauseFundingCycle(uint256 _projectId, bool _paused)\n        external\n        override\n        onlyTerminal(_projectId)\n        returns (bool)\n    {\n        uint256 latestId = latestIdFundingProject[_projectId];\n        FundingCycleProperties storage latestFundingCycleProperties = fundingCycleProperties[\n            latestId\n        ];\n        latestFundingCycleProperties.isPaused = _paused;\n        return true;\n    }\n\n    /**\n        @notice\n        Update the total deposited funds of funding cycle, include overflowed funds\n\n        @param _projectId The project ID of funding cycle belongs to\n        @param _fundingCycleId The ID of funding cycle to update records\n        @param _amount The amount of tap\n     */\n    function updateLocked(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external override onlyTerminal(_projectId) {\n        _depositedOf[_fundingCycleId] += _amount;\n\n        emit UpdateLocked(_projectId, _fundingCycleId, _amount, _depositedOf[_fundingCycleId]);\n    }\n\n    /**\n        @notice\n        Tap the funds from funding cycle\n\n        @param _projectId The project ID of funding cycle belongs to\n        @param _fundingCycleId The ID of funding cycle to tap funds\n        @param _amount The amount of tap\n     */\n    function tap(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external override onlyTerminal(_projectId) {\n        uint256 _total = getTappableAmount(_fundingCycleId);\n        if (_amount > _total) revert InsufficientBalance();\n\n        _tappedOf[_fundingCycleId] += _amount;\n\n        emit Tap(_projectId, _fundingCycleId, _amount);\n    }\n\n    /**\n        @notice\n        Unlock the funds in project's treasury, only can unlock by funding cycle\n\n        @param _projectId The project ID of funding cycle belongs to\n        @param _fundingCycleId The ID of funding cycle to unlock funds\n        @param _amount The amount of unlock\n     */\n    function unlock(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external override onlyTerminal(_projectId) {\n        uint256 _total = _getUnLockableAmount(_fundingCycleId);\n        if (_amount > _total) revert InsufficientBalance();\n\n        _unLockedOf[_fundingCycleId] += _amount;\n\n        emit Unlock(_projectId, _fundingCycleId, _amount, _unLockedOf[_fundingCycleId]);\n    }\n\n\n    /*╔═════════════════════════════╗\n      ║   Private Helper Functions  ║\n      ╚═════════════════════════════╝*/\n\n    /**\n        @notice\n        Initializes a funding cycle with the appropriate properties\n\n        @param _projectId The ID of the DAO\n        @param _previousId previous funding cycle id before this funding cycle\n        @param _params The parameters for Funding Cycle\n     */\n    function _init(\n        uint256 _projectId,\n        uint256 _previousId,\n        FundingCycleParameter calldata _params\n    ) private returns (uint256 newFundingCycleId) {\n        count += 1;\n        FundingCycleProperties memory newFundingCycle = FundingCycleProperties({\n            id: count,\n            projectId: _projectId,\n            // @TODO delay start time for 5 mins\n            start: block.timestamp + 300,\n            duration: _params.duration,\n            cycleLimit: _params.cycleLimit,\n            isPaused: false,\n            previousId: _previousId,\n            target: _params.target,\n            lockRate: _params.lockRate\n        });\n        latestIdFundingProject[_projectId] = newFundingCycle.id;\n        fundingCycleProperties[count] = newFundingCycle;\n\n        emit Init(\n            count,\n            _projectId,\n            _previousId,\n            newFundingCycle.start,\n            _params.duration,\n            _params.target,\n            _params.lockRate\n        );\n        return count;\n    }\n\n    /**\n        @notice\n        Get the unlockable amount of giving funding cycle\n\n        @param _fundingCycleId The ID of funding cycle to get unlockable amount\n     */\n    function _getUnLockableAmount(uint256 _fundingCycleId)\n        private\n        view\n        returns (uint256 _totalUnLockable)\n    {\n        FundingCycleProperties memory _fundingCycle = fundingCycleProperties[_fundingCycleId];\n\n        uint256 _eligibleDeposited = _getEligibleDepositedAmount(_fundingCycleId);\n        uint256 _lockedAmount = (_eligibleDeposited * _fundingCycle.lockRate) / 1e4;\n\n        _totalUnLockable = _lockedAmount - _unLockedOf[_fundingCycleId];\n    }\n\n    /**\n        @notice\n        Get the eligible amount of giving funding cycle, return the smaller value of target rising amount and actually deposit amount\n\n        @param _fundingCycleId The ID of funding cycle to get eligible amount\n     */\n    function _getEligibleDepositedAmount(uint256 _fundingCycleId)\n        private\n        view\n        returns (uint256 _eligibleAmount)\n    {\n        FundingCycleProperties memory _fundingCycle = fundingCycleProperties[_fundingCycleId];\n        uint256 _deposited = _depositedOf[_fundingCycleId];\n\n        _eligibleAmount = _deposited >= _fundingCycle.target ? _fundingCycle.target : _deposited;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}