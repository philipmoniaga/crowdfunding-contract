{
  "address": "0x87b415B8C5eB735e1496DD747Bbab282187Bce69",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IConfigStore",
          "name": "_configStore",
          "type": "address"
        },
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecord",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotProjectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionReverted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknowProposal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "membershipPass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "multipers",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "CreateGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "proposalResult",
          "type": "uint8"
        }
      ],
      "name": "ExecuteProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tierIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "StakePass",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tierIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "UnStakePass",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PROPOSE_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adminOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configStore",
      "outputs": [
        {
          "internalType": "contract IConfigStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_multipliers",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_membershipPass",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "createGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_proposeResult",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_signatureBySigner",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_signature",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_executeReturns",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "getReputation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "membershipPassOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalOf",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minVoters",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minVotes",
          "type": "uint256"
        },
        {
          "internalType": "enum IDAOGovernorBooster.ProposalState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDAOGovernorBooster.ProposalParameter",
          "name": "_properties",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_signature",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recordId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "recordOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "revertProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "duration",
              "type": "uint8"
            }
          ],
          "internalType": "struct IDAOGovernorBooster.PassStake[]",
          "name": "_membershipPass",
          "type": "tuple[]"
        }
      ],
      "name": "stakePass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_reputation",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedETHOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "point",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierReputationMultiplierOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_recordIds",
          "type": "uint256[]"
        }
      ],
      "name": "unStakePass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_reputation",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalVoters",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdec35420bffe61ba14022e4edd91b49c07a3388355121ced5e1dec8ca297a853",
  "receipt": {
    "to": null,
    "from": "0x33aaE4F4bA8019704137703Fe808F6B172D72D6B",
    "contractAddress": "0x87b415B8C5eB735e1496DD747Bbab282187Bce69",
    "transactionIndex": 15,
    "gasUsed": "2653437",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb7338bf3265c0db699b0bbaa0dae70ded09b66910bc09bea5d6ff9a59693dc4e",
    "transactionHash": "0xdec35420bffe61ba14022e4edd91b49c07a3388355121ced5e1dec8ca297a853",
    "logs": [],
    "blockNumber": 10982946,
    "cumulativeGasUsed": "4159198",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x145499F59c7C919266C7B2268c323eE7dB3B0079",
    "0x680231Dc3f66D2B357d0d34b33384cE22f80e417",
    "0x22f3c559e8b31817f25Df62786924b593cC5776E"
  ],
  "numDeployments": 1,
  "solcInputHash": "4e9316abea9744a68b7555d93f5656d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IConfigStore\",\"name\":\"_configStore\",\"type\":\"address\"},{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecord\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProjectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionReverted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknowProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"membershipPass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"multipers\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CreateGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proposalResult\",\"type\":\"uint8\"}],\"name\":\"ExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tierIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"StakePass\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tierIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"UnStakePass\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROPOSE_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configStore\",\"outputs\":[{\"internalType\":\"contract IConfigStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_multipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_membershipPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"createGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_proposeResult\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_signatureBySigner\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_executeReturns\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membershipPassOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minVoters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum IDAOGovernorBooster.ProposalState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct IDAOGovernorBooster.ProposalParameter\",\"name\":\"_properties\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recordOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"revertProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"}],\"internalType\":\"struct IDAOGovernorBooster.PassStake[]\",\"name\":\"_membershipPass\",\"type\":\"tuple[]\"}],\"name\":\"stakePass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reputation\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedETHOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"point\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierReputationMultiplierOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_recordIds\",\"type\":\"uint256[]\"}],\"name\":\"unStakePass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reputation\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVoters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createGovernor(uint256,uint256[],address,address)\":{\"params\":{\"_admin\":\"The admin of the DAO who can revert the impractical proposals\",\"_membershipPass\":\"Membership-pass of the DAO\",\"_multipliers\":\"Multiplier for tier reputations\",\"_projectId\":\"The ID of the DAO\"}},\"execute(uint256,uint256,uint8,bytes,address,uint256,string,bytes)\":{\"params\":{\"_projectId\":\"The ID of the DAO\",\"_proposalId\":\"The ID of the proposal to execute\",\"_proposeResult\":\"The proposal result, 0=true 1=false\",\"_signatureBySigner\":\"the signature signed by signer\"}},\"getReputation(uint256,address)\":{\"params\":{\"_from\":\"The wallet address that you want to get Points\",\"_projectId\":\"The ID of the DAO \"}},\"propose(uint256,(string,uint256,uint256),address,uint256,string,bytes)\":{\"details\":\"There has different types of proposals, only the DAO Owner can create the proposal that enable to unlock the treasury\",\"params\":{\"_calldata\":\"The data of the proposal\",\"_projectId\":\"The ID of the DAO\",\"_properties\":\"The data properties of proposal\",\"_signature\":\"The signature of the proposal\",\"_target\":\"The address of Treasury account\",\"_value\":\"The value of ETH\"}},\"revertProposal(uint256,uint256)\":{\"params\":{\"_projectId\":\"the project id of proposal belows to\",\"_proposalId\":\"the proposal id which try to revert\"}},\"stakePass(uint256,(uint256,uint256,uint8)[])\":{\"params\":{\"_membershipPass\":\"Membership-Pass details\",\"_projectId\":\"The ID of the DAO that user want to stake\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unStakePass(uint256,uint256[])\":{\"params\":{\"_projectId\":\"the project to unstake\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createGovernor(uint256,uint256[],address,address)\":{\"notice\":\"Setup / create the admin for the governor in the DAO\"},\"execute(uint256,uint256,uint8,bytes,address,uint256,string,bytes)\":{\"notice\":\"Execute the proposal\"},\"getReputation(uint256,address)\":{\"notice\":\"Calculate the reputation points of the wallet address\"},\"propose(uint256,(string,uint256,uint256),address,uint256,string,bytes)\":{\"notice\":\"Create a proposal \"},\"revertProposal(uint256,uint256)\":{\"notice\":\"Admin can revert the incorrect proposal\"},\"stakePass(uint256,(uint256,uint256,uint8)[])\":{\"notice\":\"Stake Membership-pass to get reputation\"},\"unStakePass(uint256,uint256[])\":{\"notice\":\"Unstake MembershipPass\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAOGovernorBooster.sol\":\"DAOGovernorBooster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/DAOGovernorBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport {IConfigStore} from \\\"./interfaces/IConfigStore.sol\\\";\\nimport {TerminalUtility, ITerminalDirectory} from \\\"./abstract/TerminalUtility.sol\\\";\\nimport {IDAOGovernorBooster, IProjects} from \\\"./interfaces/IDAOGovernorBooster.sol\\\";\\n\\ncontract DAOGovernorBooster is IDAOGovernorBooster, TerminalUtility, ERC1155Holder {\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n\\n    modifier onlyAdmin(uint256 _projectId) {\\n        if (adminOf[_projectId] != msg.sender) revert UnAuthorized();\\n        _;\\n    }\\n    modifier onlyProjectOwner(uint256 _projectId) {\\n        if (msg.sender != projects.ownerOf(_projectId)) revert NotProjectOwner();\\n        _;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Stored Constants  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    uint256 private constant SECONDS_IN_MONTH = 2592000;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551    Public Stored Constants  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    uint256 public constant PROPOSE_ETH = 1e15; // TODO 1eth=1e18 stake 1 ETH to propose, WETH with 18 decimals\\n\\n    IProjects public immutable projects;\\n\\n    IConfigStore public immutable configStore;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551  Public Stored Properties   \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    // 10 => 10%, the minimum quorem needs for a proposal\\n    uint256 public proposalRate = 10;\\n\\n    uint256 public recordId;\\n\\n    // proposal\\n    mapping(uint256 => Counters.Counter) public proposalIdOf;\\n\\n    // The ID of the DAO => proposalId => StakeETH\\n    mapping(uint256 => mapping(uint256 => uint256)) public stakedETHOf;\\n\\n    // The ID of the DAO => proposalId => proposal\\n    mapping(uint256 => mapping(uint256 => Proposal)) public proposalOf;\\n\\n    // The ID of the DAO => the membershipPass address\\n    mapping(uint256 => address) public membershipPassOf;\\n\\n    // The ID of the DAO => tierId => multiper\\n    mapping(uint256 => mapping(uint256 => uint256)) public tierReputationMultiplierOf;\\n\\n    // The ID of the DAO => Stake Pass Record ID => stake record\\n    mapping(address => mapping(uint256 => StakeRecord)) public stakesOf;\\n\\n    // Wallet Address => project id => record ids\\n    mapping(address => mapping(uint256 => uint256[])) public recordOf;\\n\\n    // The ID of the Proposal => Voting Result\\n    mapping(uint256 => Vote) public votesOf;\\n\\n    // The ID of the DAO => Wallet Address\\n    mapping(uint256 => address) public adminOf;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External VIEW  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n        @notice\\n        Calculate the reputation points of the wallet address\\n\\n        @param _projectId The ID of the DAO \\n        @param _from The wallet address that you want to get Points\\n     */\\n    function getReputation(uint256 _projectId, address _from) public view returns (uint256) {\\n        uint256[] memory _records = recordOf[_from][_projectId];\\n\\n        if (_records.length == 0) return 0;\\n\\n        uint256 _reputation;\\n        for (uint256 i; i < _records.length;) {\\n            StakeRecord memory _record = stakesOf[_from][_records[i]];\\n            if (block.timestamp < _record.expiry) {\\n                _reputation += _record.point;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return _reputation;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External Transaction  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    constructor(\\n        IProjects _projects,\\n        IConfigStore _configStore,\\n        ITerminalDirectory _terminalDirectory\\n    ) TerminalUtility(_terminalDirectory) {\\n        projects = _projects;\\n        configStore = _configStore;\\n    }\\n\\n    /**\\n        @notice\\n        Setup / create the admin for the governor in the DAO\\n\\n        @param _projectId The ID of the DAO\\n        @param _multipliers Multiplier for tier reputations\\n        @param _membershipPass Membership-pass of the DAO\\n        @param _admin The admin of the DAO who can revert the impractical proposals\\n     */\\n    function createGovernor(\\n        uint256 _projectId,\\n        uint256[] calldata _multipliers,\\n        address _membershipPass,\\n        address _admin\\n    ) external override onlyTerminal(_projectId) {\\n        adminOf[_projectId] = _admin;\\n        membershipPassOf[_projectId] = _membershipPass;\\n        for(uint256 i; i < _multipliers.length;) {\\n            tierReputationMultiplierOf[_projectId][i] = _multipliers[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit CreateGovernor(_projectId, _membershipPass, _multipliers, _admin);\\n    }\\n\\n    /**\\n        @notice\\n        Create a proposal \\n\\n        @dev\\n        There has different types of proposals, only the DAO Owner can create the proposal that enable to unlock the treasury\\n\\n        @param _projectId The ID of the DAO\\n        @param _properties The data properties of proposal\\n        @param _target The address of Treasury account\\n        @param _value The value of ETH\\n        @param _signature The signature of the proposal\\n        @param _calldata The data of the proposal\\n     */\\n    function propose(\\n        uint256 _projectId,\\n        ProposalParameter calldata _properties,\\n        address _target,\\n        uint256 _value,\\n        string calldata _signature,\\n        bytes calldata _calldata\\n    ) external payable override onlyProjectOwner(_projectId) {\\n        if (_properties.start >= _properties.end || block.timestamp >= _properties.end)\\n            revert BadPeriod();\\n        if (msg.value < PROPOSE_ETH) revert InsufficientBalance();\\n\\n        proposalIdOf[_projectId].increment();\\n        uint256 _proposalId = proposalIdOf[_projectId].current();\\n        stakedETHOf[_projectId][_proposalId] = msg.value;\\n\\n        bytes32 _hash = keccak256(abi.encodePacked(_target, _value, _signature, _calldata));\\n\\n        proposalOf[_projectId][_proposalId] = Proposal({\\n            id: _proposalId,\\n            hash: _hash,\\n            uri: _properties.uri,\\n            start: _properties.start,\\n            end: _properties.end,\\n            minVotes: _ceilDiv(votesOf[_projectId].totalVotes),\\n            minVoters: _ceilDiv(votesOf[_projectId].totalVoters),\\n            state: _properties.start > block.timestamp\\n                ? ProposalState.Active\\n                : ProposalState.Pending\\n        });\\n\\n        emit ProposalCreated(_projectId, msg.sender, _proposalId);\\n    }\\n\\n    /**\\n        @notice\\n        Execute the proposal\\n\\n        @param _projectId The ID of the DAO\\n        @param _proposalId The ID of the proposal to execute\\n        @param _proposeResult The proposal result, 0=true 1=false\\n        @param _signatureBySigner the signature signed by signer\\n     */\\n    function execute(\\n        uint256 _projectId,\\n        uint256 _proposalId,\\n        uint8 _proposeResult,\\n        bytes memory _signatureBySigner,\\n        address _target,\\n        uint256 _value,\\n        string memory _signature,\\n        bytes memory _data\\n    ) external override onlyProjectOwner(_projectId) returns (bytes memory _executeReturns) {\\n        Proposal storage _proposal = proposalOf[_projectId][_proposalId];\\n        if (_proposal.id != _proposalId) revert UnknowProposal();\\n        if (block.timestamp < _proposal.end || _proposal.state == ProposalState.Executed)\\n            revert BadPeriod();\\n        if (!_isAuthorized(msg.sender, _proposalId, _proposeResult, _signatureBySigner))\\n            revert InvalidSignature();\\n\\n        bytes32 _hash = keccak256(abi.encodePacked(_target, _value, _signature, _data));\\n        if (_proposal.hash != _hash) revert TransactionNotMatch();\\n\\n        _proposal.state = ProposalState.Executed;\\n\\n        if (_proposeResult == 0) {\\n            bytes memory _callData;\\n\\n            if (bytes(_signature).length == 0) {\\n                _callData = _data;\\n            } else {\\n                _callData = abi.encodePacked(bytes4(keccak256(bytes(_signature))), _data);\\n            }\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool _success, bytes memory _returnData) = _target.call{value: _value}(_callData);\\n            if (!_success) revert TransactionReverted();\\n            _executeReturns = _returnData;\\n        }\\n        // return staked eth in this proposal\\n        uint256 staked = stakedETHOf[_projectId][_proposalId];\\n        stakedETHOf[_projectId][_proposalId] = 0;\\n        Address.sendValue(payable(msg.sender), staked);\\n\\n        emit ExecuteProposal(_projectId, msg.sender, _proposalId, _proposeResult);\\n    }\\n\\n    /**\\n        @notice\\n        Admin can revert the incorrect proposal\\n\\n        @param _projectId the project id of proposal belows to\\n        @param _proposalId the proposal id which try to revert\\n     */\\n    function revertProposal(uint256 _projectId, uint256 _proposalId)\\n        external\\n        onlyAdmin(_projectId)\\n    {\\n        if (proposalOf[_projectId][_proposalId].id == 0) revert UnknowProposal();\\n\\n        delete proposalOf[_projectId][_proposalId];\\n    }\\n\\n    /**\\n        @notice\\n        Stake Membership-pass to get reputation\\n\\n        @param _projectId The ID of the DAO that user want to stake\\n        @param _membershipPass Membership-Pass details\\n     */\\n    function stakePass(uint256 _projectId, PassStake[] memory _membershipPass)\\n        external\\n        override\\n        returns (uint256 _reputation)\\n    {\\n        address _from = msg.sender;\\n        if (_membershipPass.length == 0) return 0;\\n        if (!_isMemberOfProject(_projectId, _from)) votesOf[_projectId].totalVoters += 1;\\n\\n        uint256[] memory _tiers = new uint256[](_membershipPass.length);\\n        uint256[] memory _amounts = new uint256[](_membershipPass.length);\\n        for (uint8 i; i < _membershipPass.length;) {\\n            _tiers[i] = _membershipPass[i].tier;\\n            _amounts[i] = _membershipPass[i].amount;\\n            if (_amounts[i] == 0) revert BadAmount();\\n            unchecked {\\n                recordId ++;\\n            }\\n            recordOf[_from][_projectId].push(recordId);\\n\\n            stakesOf[_from][recordId] = StakeRecord({\\n                tier: _tiers[i],\\n                amount: _amounts[i],\\n                stakeAt: block.timestamp,\\n                expiry: block.timestamp + SECONDS_IN_MONTH * _membershipPass[i].duration,\\n                point: tierReputationMultiplierOf[_projectId][_tiers[i]] *\\n                    _membershipPass[i].duration * // TODO: Duration should be based on 1 month, 3 months, 6 months, 12 months\\n                    _amounts[i]\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        IERC1155(membershipPassOf[_projectId]).safeBatchTransferFrom(\\n            _from,\\n            address(this),\\n            _tiers,\\n            _amounts,\\n            \\\"0x00\\\"\\n        );\\n        // TODO: if Gold Pass: 3pts, Silver: 2pts |  lock 1 month => *1, lock 3 momth => *3\\n        // how to store the data for user lock Pass multiple times. (\\u6578\\u64da\\u5132\\u5b58\\u554f\\u984c\\u3001\\u8ff4\\u5708\\u67e5\\u8a62\\u3001)\\n\\n        _reputation = getReputation(_projectId, _from);\\n\\n        votesOf[_projectId].totalVotes += _reputation;\\n\\n        emit StakePass(_projectId, _from, _reputation, _tiers, _amounts);\\n    }\\n\\n    /**\\n        @notice\\n        Unstake MembershipPass\\n\\n        @param _projectId the project to unstake\\n     */\\n    function unStakePass(uint256 _projectId, uint256[] memory _recordIds)\\n        external\\n        override\\n        returns (uint256 _reputation)\\n    {\\n        address _recepient = msg.sender;\\n\\n        uint256[] memory _tiers = new uint256[](_recordIds.length);\\n        uint256[] memory _amounts = new uint256[](_recordIds.length);\\n        for (uint8 i; i < _recordIds.length;) {\\n            StakeRecord memory record = stakesOf[_recepient][_recordIds[i]];\\n            if (record.amount == 0) revert InvalidRecord();\\n            if (block.timestamp < record.expiry) revert NotExpired();\\n            _tiers[i] = record.tier;\\n            _amounts[i] = record.amount;\\n            delete stakesOf[_recepient][_recordIds[i]];\\n            delete recordOf[_recepient][_projectId][_recordIds[i]];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        IERC1155(membershipPassOf[_projectId]).safeBatchTransferFrom(\\n            address(this),\\n            _recepient,\\n            _tiers,\\n            _amounts,\\n            \\\"0x00\\\"\\n        );\\n        bool _isMemberAfterRedeem = _isMemberOfProject(_projectId, _recepient);\\n        if (!_isMemberAfterRedeem) {\\n            votesOf[_projectId].totalVoters -= 1;\\n            delete recordOf[_recepient][_projectId];\\n        }\\n\\n        _reputation = getReputation(_projectId, _recepient);\\n\\n        votesOf[_projectId].totalVotes -= _reputation;\\n\\n        emit UnStakePass(_projectId, _recepient, _reputation, _tiers, _amounts);\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Helper Functions  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n        @notice\\n        Verify the signature\\n\\n        @param _from the proposal creator\\n        @param _proposalId the target proposal\\n        @param _proposeResult the result of proposal 0=true 1=false\\n        @param _signature signature signed by signer address\\n     */\\n    function _isAuthorized(\\n        address _from,\\n        uint256 _proposalId,\\n        uint8 _proposeResult,\\n        bytes memory _signature\\n    ) private view returns (bool) {\\n        bytes32 _hash = keccak256(abi.encodePacked(_from, _proposalId, _proposeResult));\\n        return configStore.signer() == ECDSA.recover(_hash, _signature);\\n    }\\n\\n    /**\\n        @notice\\n        Returns the integer division of points. The result is rounded up\\n\\n        @param _point points\\n     */\\n    function _ceilDiv(uint256 _point) private view returns (uint256 _ceiled) {\\n        _ceiled = (_point * proposalRate + 100 - 1) / 100;\\n        if (_ceiled == 0) _ceiled = 1;\\n    }\\n\\n    /**\\n        @notice\\n        Check a wallet address is member of giving project or not\\n\\n        @param _projectId The ID of DAO\\n        @param _from The wallet address you wanna check with\\n     */\\n    function _isMemberOfProject(uint256 _projectId, address _from) private view returns (bool) {\\n        uint256[] memory _records = recordOf[_from][_projectId];\\n        if (_records.length == 0) return false;\\n        for (uint256 i; i < _records.length;) {\\n            if (_records[i] != 0) return true;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xed5cf0f2e1df379b5b6ace0cbe5206c3b74539e4d689ff8eed729c6cf36d7420\",\"license\":\"MIT\"},\"contracts/abstract/TerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ITerminalUtility.sol\\\";\\n\\nabstract contract TerminalUtility is ITerminalUtility {\\n    modifier onlyTerminal(uint256 _projectId) {\\n        if (address(terminalDirectory.terminalOf(_projectId)) != msg.sender) revert UnAuthorized();\\n        _;\\n    }\\n\\n    ITerminalDirectory public immutable override terminalDirectory;\\n\\n    /** \\n      @param _terminalDirectory A directory of a project's current terminal to receive payments in.\\n    */\\n    constructor(ITerminalDirectory _terminalDirectory) {\\n        terminalDirectory = _terminalDirectory;\\n    }\\n}\\n\",\"keccak256\":\"0x1935ff1401b8482549ebb1877d49a6aafdef8fffb661a0f93a5d7820b3a1cbac\",\"license\":\"MIT\"},\"contracts/interfaces/IBluechipsBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBluechipsBooster {\\n    event CreateProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event CreateCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event ChallengeProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event ChallengeCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RenewProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event RenewCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event Remove(\\n        address indexed from,\\n        address beneficiary,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event RemoveCustomize(\\n        address indexed from,\\n        address beneficiary,\\n        uint256 projectId,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event AddBluechip(address bluechip, uint16 multiper);\\n\\n    event AddCustomBooster(uint256 indexed projectId, address[] bluechips, uint16[] multipers);\\n\\n    error SizeNotMatch();\\n    error BadMultiper();\\n    error ZeroAddress();\\n    error RenewFirst();\\n    error NotNFTOwner();\\n    error InsufficientBalance();\\n    error BoosterRegisterd();\\n    error BoosterNotRegisterd();\\n    error ProofNotRegisterd();\\n    error ChallengeFailed();\\n    error RedeemAfterExpired();\\n    error ForbiddenUpdate();\\n    error OnlyGovernor();\\n    error TransferDisabled();\\n\\n    function count() external view returns (uint256);\\n\\n    function tokenIdOf(bytes32 _proof) external view returns (uint256);\\n\\n    function proofBy(bytes32 _proof) external view returns (address);\\n\\n    function multiplierOf(address _bluechip) external view returns (uint16);\\n\\n    function boosterWeights(address _bluechip) external view returns (uint256);\\n\\n    function proofExpiryOf(bytes32 _proof) external view returns (uint256);\\n\\n    function stakedOf(bytes32 _proof) external view returns (uint256);\\n\\n    function customBoosterWeights(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function customMultiplierOf(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function createCustomBooster(\\n        uint256 _projectId,\\n        address[] memory _bluechips,\\n        uint16[] memory _multipers\\n    ) external;\\n\\n    function createProof(address _bluechip, uint256 _tokenId) external payable;\\n\\n    function createCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external payable;\\n\\n    function challengeProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function challengeCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function renewProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function renewCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function redeemProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function redeemCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function addBlueChip(address _bluechip, uint16 _multiper) external;\\n}\\n\",\"keccak256\":\"0xe56848adbfdf1124cc15295d2b418f348de15001668fbaa1ef9ca4edad014c8c\",\"license\":\"MIT\"},\"contracts/interfaces/IConfigStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IConfigStore {\\n    event SetBaseURI(string uri);\\n\\n    event SetBaseContractURI(string uri);\\n\\n    event SetSigner(address signer);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function baseContractURI() external view returns (string memory);\\n\\n    function signer() external view returns (address);\\n\\n    function setBaseURI(string memory _uri) external;\\n\\n    function setBaseContractURI(string memory _uri) external;\\n\\n    function setSigner(address _signer) external;\\n}\\n\",\"keccak256\":\"0x79eb0298de1ae6151bdd2314c379637d6f49d320a33c18479eaa8ceb58702f5b\",\"license\":\"MIT\"},\"contracts/interfaces/IDAOGovernorBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface IDAOGovernorBooster {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Queued,\\n        Failed,\\n        Expired,\\n        Executed\\n    }\\n\\n    struct Proposal {\\n        string uri;\\n        uint256 id;\\n        bytes32 hash;\\n        uint256 start;\\n        uint256 end;\\n        uint256 minVoters;\\n        uint256 minVotes;\\n        ProposalState state;\\n    }\\n\\n    struct ProposalParameter {\\n        string uri;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    struct Vote {\\n        uint256 totalVoters;\\n        uint256 totalVotes;\\n    }\\n\\n    struct PassStake {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint8 duration; // duartion in day\\n    }\\n\\n    struct StakeRecord {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint256 point;\\n        uint256 stakeAt;\\n        uint256 expiry;\\n    }\\n\\n    /************************* EVENTS *************************/\\n    event CreateGovernor(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        uint256[] multipers,\\n        address admin\\n    );\\n\\n    event ProposalCreated(uint256 indexed projectId, address indexed from, uint256 proposalId);\\n\\n    event ExecuteProposal(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 proposalId,\\n        uint8 proposalResult\\n    );\\n\\n    event StakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    event UnStakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* ERRORS *************************/\\n    error InsufficientBalance();\\n    error UnknowProposal();\\n    error BadPeriod();\\n    error InvalidSignature();\\n    error TransactionNotMatch();\\n    error TransactionReverted();\\n    error NotProjectOwner();\\n    error BadAmount();\\n    error NotExpired();\\n    error InvalidRecord();\\n\\n    function createGovernor(\\n        uint256 _projectId,\\n        uint256[] calldata _multipers,\\n        address _membershipPass,\\n        address _admin\\n    ) external;\\n\\n    function propose(\\n        uint256 _projectId,\\n        ProposalParameter calldata _properties,\\n        address _target,\\n        uint256 _value,\\n        string calldata _signature,\\n        bytes calldata _calldata\\n    ) external payable;\\n\\n    function execute(\\n        uint256 _projectId,\\n        uint256 _proposalId,\\n        uint8 _proposeResult,\\n        bytes memory _signatureBySigner,\\n        address _target,\\n        uint256 _value,\\n        string memory _signature,\\n        bytes memory _data\\n    ) external returns (bytes memory);\\n\\n    function stakePass(uint256 _projectId, PassStake[] memory _membershipPass)\\n        external\\n        returns (uint256);\\n\\n    function unStakePass(uint256 _projectId, uint256[] memory _recordIds)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x258499e39d0b1a64842d006d6289dcd437442024c964683049856c3385cf969b\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum FundingCycleState {\\n    WarmUp,\\n    Active,\\n    Expired\\n}\\n\\nstruct Metadata {\\n    // The unique handle name for the DAO\\n    bytes32 handle;\\n    // The NFT token address of Customized Boosters\\n    address[] customBoosters;\\n    // The multipliers of customized NFT \\n    uint16[] boosterMultipliers;\\n}\\n\\nstruct AuctionedPass {\\n    // tier id, indexed from 0\\n    uint256 id;\\n    // sale price in wei\\n    uint256 salePrice;\\n    // the amount of tickets open for sale in this round\\n    uint256 saleAmount;\\n    // the amount of tickets airdroped to community\\n    uint256 communityAmount;\\n    // who own the community vouchers can free mint the community ticket\\n    address communityVoucher;\\n    // the amount of tickets reserved to next round\\n    uint256 reservedAmount;\\n}\\n\\n// 1st funding cycle:\\n// gold ticket (erc1155) :  11 salePrice 1 reserveampiunt\\n\\n// silver ticket: 10 salePrice  2 reserveampiunt\\n\\nstruct FundingCycleProperties {\\n    uint256 id;\\n    uint256 projectId;\\n    uint256 previousId;\\n    uint256 start;\\n    uint256 target;\\n    uint256 lockRate;\\n    uint16 duration;\\n    bool isPaused;\\n    uint256 cycleLimit;\\n}\\n\\nstruct FundingCycleParameter {\\n    // rate to be locked in treasury 1000 -> 10% 9999 -> 99.99%\\n    uint16 lockRate;\\n    uint16 duration;\\n    uint256 cycleLimit;\\n    uint256 target;\\n}\\n\\ninterface IFundingCycles {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event FundingCycleExist(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 tapAmount\\n    );\\n\\n    event Unlock(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 unlockAmount,\\n        uint256 totalUnlockedAmount\\n    );\\n\\n    event Init(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 previous,\\n        uint256 start,\\n        uint256 duration,\\n        uint256 target,\\n        uint256 lockRate\\n    );\\n\\n    event InitAuctionedPass(\\n        uint256 indexed fundingCycleId,\\n        AuctionedPass autionPass\\n    );\\n\\n    event UpdateLocked(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 depositAmount,\\n        uint256 totalDepositedAmount\\n    );\\n\\n    error InsufficientBalance();\\n    error BadCycleLimit();\\n    error BadDuration();\\n    error BadLockRate();\\n\\n\\n    // === External View  === // \\n    function latestIdFundingProject(uint256 _projectId) external view returns (uint256);\\n\\n    function count() external view returns (uint256);\\n\\n    function MAX_CYCLE_LIMIT() external view returns (uint8);\\n\\n    function getFundingCycle(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (FundingCycleProperties memory);\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] memory _auctionedPass\\n    ) external returns (FundingCycleProperties memory);\\n\\n    // === External Transactions === //\\n    function currentOf(uint256 _projectId) external view returns (FundingCycleProperties memory);\\n\\n    function setPauseFundingCycle(uint256 _projectId, bool _paused) external returns (bool);\\n\\n    function updateLocked(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function tap(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function unlock(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function getTappableAmount(uint256 _fundingCycleId) external view returns (uint256);\\n\\n    function getFundingCycleState(uint256 _fundingCycleId) external view returns (FundingCycleState);\\n\\n    function getAutionedPass(uint256 _fundingCycleId, uint256 _tierId) external view returns(AuctionedPass memory);\\n}\\n\",\"keccak256\":\"0x6484d0141cbc7e714d990f3b2567de8b882fbbd165fca65bff29e58835d873ee\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"./IConfigStore.sol\\\";\\n\\ninterface IMembershipPass is IERC1155, IERC2981 {\\n    event MintPass(address indexed recepient, uint256 indexed tier, uint256 amount);\\n\\n    event BatchMintPass(address indexed recepient, uint256[] tiers, uint256[] amounts);\\n\\n    error TierNotSet();\\n    error TierUnknow();\\n    error BadCapacity();\\n    error BadFee();\\n    error InsufficientBalance();\\n\\n    function feeCollector() external view returns (address);\\n\\n    function configStore() external view returns (IConfigStore);\\n\\n    /**\\n     * @notice\\n     * Implement ERC2981, but actually the most marketplaces have their own royalty logic\\n     */\\n    function royaltyInfo(uint256 _tier, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount);\\n\\n    function mintPassForMember(\\n        address _recepient,\\n        uint256 _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function batchMintPassForMember(\\n        address _recepient,\\n        uint256[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function updateFeeCollector(address _feeCollector) external;\\n}\\n\",\"keccak256\":\"0xf654e0174cc10dd42df8022d58ee56e13001d985fae8d387761b2a33d93a72f2\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPassBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IMembershipPass} from \\\"./IMembershipPass.sol\\\";\\nimport {IRoyaltyDistributor} from \\\"./IRoyaltyDistributor.sol\\\";\\n\\nstruct PayInfoWithWeight {\\n    uint256 tier;\\n    uint256 amount;\\n    uint256 weight;\\n}\\nstruct WeightInfo {\\n    uint256 amount;\\n    uint256 sqrtWeight;\\n}\\n\\ninterface IMembershipPassBooth {\\n    error ProjectNotExist();\\n\\n    /************************* EVENTS *************************/\\n    event Issue(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        address royaltyDistributor,\\n        uint256[] tierFee,\\n        uint256[] tierCapacity,\\n        uint256[] multipers\\n    );\\n\\n    event BatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event AirdropBatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event DistributeRoyaltyFee(\\n        uint256 indexed projectId,\\n        uint256 merkleRootId,\\n        uint256 distributeAmount,\\n        uint256 distributeAt,\\n        string ipfsHash\\n    );\\n\\n    event ClaimRoyaltyFee(\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256[] merkleRootIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* VIEW FUNCTIONS *************************/\\n    function tierSizeOf(uint256 _projectId) external view returns (uint256);\\n\\n    function membershipPassOf(uint256 _projectId) external view returns (IMembershipPass);\\n\\n    function royaltyDistributorOf(uint256 _projectId) external view returns (IRoyaltyDistributor);\\n\\n    function totalBiddingAmountBy(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function totalSqrtWeightBy(uint256 _fundingCycleId, uint256 _tierId) external returns (uint256);\\n\\n    function depositedWeightBy(\\n        address _from,\\n        uint256 _fundingCycleId,\\n        uint256 _tierId\\n    ) external view returns (uint256, uint256);\\n\\n    function claimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedAmountOf(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function issue(\\n        uint256 _projectId,\\n        uint256[] calldata _tierFees,\\n        uint256[] calldata _tierCapacities,\\n        uint256[] calldata _multipers\\n    ) external returns (address);\\n\\n    function stake(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        PayInfoWithWeight[] memory _payInfo\\n    ) external;\\n\\n    function batchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function airdropBatchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _tierIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function getUserAllocation(\\n        address _user,\\n        uint256 _projectId,\\n        uint256 _fundingCycleId\\n    ) external view returns (uint256[] memory);\\n\\n    function getEstimatingUserAllocation(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256[] memory _biddingAmounts,\\n        uint256[] memory _weights\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x10b7b89b5f936b530876f2bf4bca290ed1d8d3185acbafde39677de07787513a\",\"license\":\"MIT\"},\"contracts/interfaces/IPayoutStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\nstruct PayoutMod {\\n    uint16 percent;\\n    address payable beneficiary;\\n}\\n\\n\\ninterface IPayoutStore {\\n\\n    error BadPercentage();\\n    error BadTotalPercentage();\\n    error BadAddress();\\n    error NoOp();\\n\\n    event SetPayoutMod(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        PayoutMod mod,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function payoutModsOf(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (PayoutMod[] memory);\\n\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        PayoutMod[] memory _mods\\n    ) external;\\n\\n}\",\"keccak256\":\"0x1a96678a4018df454e854662c50c26682fed9602d567d883f1a69b99c8c0bbeb\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    error EmptyHandle();\\n    error TakenedHandle();\\n    error UnAuthorized();\\n\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 handle,\\n        address caller\\n    );\\n\\n    event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n    event SetBaseURI(string baseURI);\\n\\n    function count() external view returns (uint256);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n    \\n    function setBaseURI(string memory _uri) external;\\n}\\n\",\"keccak256\":\"0x3e81d01ea05c8a60c23fde7c7b565803d1f1788e6c3268f7626d42de02fd887e\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRoyaltyDistributor {\\n    error UnAuthorized();\\n    error MerkleRootExist();\\n    error BadBalance();\\n    error AlreadyClaimed();\\n    error SizeNotMatch();\\n\\n    function claimRoyaltyFee(\\n        address _from,\\n        uint256[] calldata _merkleRootIds,\\n        bytes32[][] memory _merkleProofs,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function distributeRoyaltyFee(uint256 _distributeAmount, bytes32 _merkleRoot)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9e54d786817c13b074c78fe77c4c02e0a7e7cb04220e2e2fdfa38c80bd52ab4\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IFundingCycles.sol\\\";\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./IBluechipsBooster.sol\\\";\\nimport \\\"./IDAOGovernorBooster.sol\\\";\\nimport \\\"./IMembershipPassBooth.sol\\\";\\nimport \\\"./IPayoutStore.sol\\\";\\n\\nstruct ImmutablePassTier {\\n    uint256 tierFee;\\n    uint256 multiplier;\\n    uint256 tierCapacity;\\n}\\n\\ninterface ITerminal {\\n    event Pay(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256[] tiers,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Airdrop(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256[] tierIds,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Claim(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 refundAmount,\\n        uint256[] offeringAmounts\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 govFeeAmount,\\n        uint256 netTransferAmount\\n    );\\n\\n    event AddToBalance(uint256 indexed projectId, uint256 amount, address beneficiary);\\n\\n    event UnlockTreasury(uint256 indexed projectId, uint256 unlockAmount);\\n\\n    event SetTapFee(uint256 fee);\\n\\n    event SetContributeFee(uint256 fee);\\n\\n    event SetMinLockRate(uint256 minLockRate);\\n\\n    event DistributeToPayoutMod(uint256 indexed projectId, uint256 indexed fundingCycleId, PayoutMod mod, uint256 amount, address receiver);\\n\\n    error Voucher721(address _voucher);\\n    error NoCommunityTicketLeft();\\n    error FundingCycleNotExist();\\n    error FundingCyclePaused();\\n    error FundingCycleActived();\\n    error InsufficientBalance();\\n    error AlreadyClaimed();\\n    error ZeroAddress();\\n    error BadOperationPeriod();\\n    error OnlyGovernor();\\n    error UnAuthorized();\\n    error LastWeightMustBe1();\\n    error BadPayment();\\n    error BadAmount();\\n    error BadLockRate();\\n    error BadTapFee();\\n\\n    function superAdmin() external view returns (address);\\n\\n    function tapFee() external view returns (uint256);\\n\\n    function contributeFee() external view returns (uint256);\\n\\n    function devTreasury() external view returns (address);\\n\\n    function minLockRate() external view returns (uint256);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function fundingCycles() external view returns (IFundingCycles);\\n\\n    function membershipPassBooth() external view returns (IMembershipPassBooth);\\n\\n    function daoGovernorBooster() external view returns (IDAOGovernorBooster);\\n\\n    function bluechipsBooster() external view returns (IBluechipsBooster);\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n    function payoutStore() external view returns (IPayoutStore);\\n\\n    function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n    function addToBalance(uint256 _projectId) external payable;\\n\\n    function setTapFee(uint256 _fee) external;\\n\\n    function setContributeFee(uint256 _fee) external;\\n\\n    function setMinLockRate(uint256 _minLockRate) external;\\n\\n    function createDao(\\n        Metadata memory _metadata,\\n        ImmutablePassTier[] calldata _tiers,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] memory _payoutMods\\n    ) external;\\n\\n    function createNewFundingCycle(\\n        uint256 projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] calldata _payoutMod\\n    ) external;\\n\\n    function contribute(\\n        uint256 _projectId,\\n        uint256[] memory _tiers,\\n        uint256[] memory _amounts,\\n        string memory _memo\\n    ) external payable;\\n\\n    function communityContribute(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        string memory _memo\\n    ) external;\\n\\n    function claimPassOrRefund(uint256 _projectId, uint256 _fundingCycleId) external;\\n\\n    function tap(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unLockTreasury(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _unlockAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc567bfe1f856ef4975f3a466a6f091eff22e8d5a8c6473d6b0ab6b340bf0206d\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    error ZeroAddress();\\n    error UnAuthorized();\\n    error UnknowTerminal();\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x6cc378750f4f01d98e587014e0ae7815d75788ab4741e5020cc0dd12815e5583\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminalUtility {\\n    error UnAuthorized();\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n}\\n\",\"keccak256\":\"0x358295960cfdafb516f540d130421deb236feff2a998ff8062cd31b890a87cfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600a6000553480156200001657600080fd5b5060405162002fb938038062002fb983398101604081905262000039916200005f565b6001600160601b0319606091821b811660805292811b831660a0521b1660c052620000cb565b60008060006060848603121562000074578283fd5b83516200008181620000b2565b60208501519093506200009481620000b2565b6040850151909250620000a781620000b2565b809150509250925092565b6001600160a01b0381168114620000c857600080fd5b50565b60805160601c60a05160601c60c05160601c612e9962000120600039600081816104f10152611cd001526000818161046a015281816113bf015261183901526000818161035901526112280152612e996000f3fe6080604052600436106101665760003560e01c806378f51e4d116100d15780639d69dc4e1161008a578063bc197c8111610064578063bc197c8114610560578063c862e3d4146105a5578063f23a6e61146105dd578063f7dfe22b1461060957600080fd5b80639d69dc4e146104df578063a69a33d714610513578063b21518e21461053357600080fd5b806378f51e4d146103a85780637cc28c83146103bb5780637d5e10ad146104385780638b79543c146104585780638fed3d891461048c5780639abdf87a146104a757600080fd5b80635537a6fa116101235780635537a6fa1461028657806361a0b72a146102bc5780636530735e146102dc578063673a46f2146103255780636abcf8e3146103475780637419d1161461037b57600080fd5b806301ffc9a71461016b578063239441f9146101a057806341511a8d146101ce578063482cfedd146102025780635045b41214610222578063552137f914610238575b600080fd5b34801561017757600080fd5b5061018b610186366004612606565b61061f565b60405190151581526020015b60405180910390f35b3480156101ac57600080fd5b506101c06101bb3660046127e6565b610656565b604051908152602001610197565b3480156101da57600080fd5b506101ee6101e93660046128e8565b610abf565b604051610197989796959493929190612be9565b34801561020e57600080fd5b506101c061021d366004612646565b610b97565b34801561022e57600080fd5b506101c060005481565b34801561024457600080fd5b5061026e61025336600461262e565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610197565b34801561029257600080fd5b5061026e6102a136600461262e565b600a602052600090815260409020546001600160a01b031681565b3480156102c857600080fd5b506101c06102d7366004612675565b610ce5565b3480156102e857600080fd5b506103106102f736600461262e565b6009602052600090815260409020805460019091015482565b60408051928352602083019190915201610197565b34801561033157600080fd5b50610345610340366004612745565b611206565b005b34801561035357600080fd5b5061026e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561038757600080fd5b506101c061039636600461262e565b60026020526000908152604090205481565b6103456103b636600461282a565b6113a7565b3480156103c757600080fd5b506104106103d63660046125a7565b6007602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610197565b34801561044457600080fd5b506101c06104533660046125d2565b611706565b34801561046457600080fd5b5061026e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561049857600080fd5b506101c066038d7ea4c6800081565b3480156104b357600080fd5b506101c06104c23660046128e8565b600360209081526000928352604080842090915290825290205481565b3480156104eb57600080fd5b5061026e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561051f57600080fd5b5061034561052e3660046128e8565b611744565b34801561053f57600080fd5b5061055361054e366004612909565b611816565b6040516101979190612bd6565b34801561056c57600080fd5b5061058c61057b366004612498565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610197565b3480156105b157600080fd5b506101c06105c03660046128e8565b600660209081526000928352604080842090915290825290205481565b3480156105e957600080fd5b5061058c6105f8366004612541565b63f23a6e6160e01b95945050505050565b34801561061557600080fd5b506101c060015481565b60006001600160e01b03198216630271189760e51b148061065057506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080339050600083516001600160401b0381111561068557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106ae578160200160208202803683370190505b509050600084516001600160401b038111156106da57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610703578160200160208202803683370190505b50905060005b85518160ff16101561095d576001600160a01b038416600090815260076020526040812087518290899060ff861690811061075457634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090508060200151600014156107cf5760405163f2a3e8db60e01b815260040160405180910390fd5b80608001514210156107f45760405163d0404f8560e01b815260040160405180910390fd5b8060000151848360ff168151811061081c57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508060200151838360ff168151811061085057634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060076000866001600160a01b03166001600160a01b031681526020019081526020016000206000888460ff16815181106108a657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825281810192909252604090810160009081208181556001810182905560028101829055600381018290556004018190556001600160a01b0388168152600883528181208b825290925290208751889060ff851690811061092357634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061094957634e487b7160e01b600052603260045260246000fd5b600091825260208220015550600101610709565b5060008681526005602052604090819020549051631759616b60e11b81526001600160a01b0390911690632eb2c2d6906109a1903090879087908790600401612b19565b600060405180830381600087803b1580156109bb57600080fd5b505af11580156109cf573d6000803e3d6000fd5b5050505060006109df8785611b48565b905080610a36576000878152600960205260408120805460019290610a05908490612da0565b90915550506001600160a01b03841660009081526008602090815260408083208a84529091528120610a3691612254565b610a408785610b97565b945084600960008981526020019081526020016000206001016000828254610a689190612da0565b92505081905550836001600160a01b0316877fb0c7abfb6eb06499a7d788a5c359444e6cdb3cd73668035af9b20f0951a07bd6878686604051610aad93929190612c55565b60405180910390a35050505092915050565b6004602090815260009283526040808420909152908252902080548190610ae590612de7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1190612de7565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b50505050600183015460028401546003850154600486015460058701546006880154600790980154969794969395509193909260ff1688565b6001600160a01b0381166000908152600860209081526040808320858452825280832080548251818502810185019093528083528493830182828015610bfc57602002820191906000526020600020905b815481526020019060010190808311610be8575b50505050509050805160001415610c17576000915050610650565b6000805b8251811015610cdc576001600160a01b038516600090815260076020526040812084518290869085908110610c6057634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090508060800151421015610cd3576040810151610cd09084612d49565b92505b50600101610c1b565b50949350505050565b80516000903390610cfa576000915050610650565b610d048482611b48565b610d2d576000848152600960205260408120805460019290610d27908490612d49565b90915550505b600083516001600160401b03811115610d5657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d7f578160200160208202803683370190505b509050600084516001600160401b03811115610dab57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610dd4578160200160208202803683370190505b50905060005b85518160ff16101561110857858160ff1681518110610e0957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151838260ff1681518110610e3857634e487b7160e01b600052603260045260246000fd5b602002602001018181525050858160ff1681518110610e6757634e487b7160e01b600052603260045260246000fd5b602002602001015160200151828260ff1681518110610e9657634e487b7160e01b600052603260045260246000fd5b602002602001018181525050818160ff1681518110610ec557634e487b7160e01b600052603260045260246000fd5b602002602001015160001415610eee5760405163749b593960e01b815260040160405180910390fd5b6001805481018082556001600160a01b03861660009081526008602090815260408083208c84528252808320805495860181558352912090920155805160a0810190915283518190859060ff8516908110610f5957634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001838360ff1681518110610f8957634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001838360ff1681518110610fb957634e487b7160e01b600052603260045260246000fd5b6020026020010151888460ff1681518110610fe457634e487b7160e01b600052603260045260246000fd5b60200260200101516040015160ff16600660008c81526020019081526020016000206000888760ff168151811061102b57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000205461104c9190612d81565b6110569190612d81565b8152602001428152602001878360ff168151811061108457634e487b7160e01b600052603260045260246000fd5b60200260200101516040015160ff1662278d006110a19190612d81565b6110ab9042612d49565b90526001600160a01b03851660009081526007602090815260408083206001805485529083529281902084518155918401518284015583015160028201556060830151600382015560809092015160049092019190915501610dda565b5060008681526005602052604090819020549051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061114c908690309087908790600401612b19565b600060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050506111888684610b97565b9350836009600088815260200190815260200160002060010160008282546111b09190612d49565b92505081905550826001600160a01b0316867f391a83cfa923c97322ac794a9cebd498d4b5641ea5b0d09cbccaf3f2b67ac78e8685856040516111f593929190612c55565b60405180910390a350505092915050565b604051634fe0eced60e01b815260048101869052859033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634fe0eced9060240160206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a29190612475565b6001600160a01b0316146112c95760405163be24598360e01b815260040160405180910390fd5b6000868152600a6020908152604080832080546001600160a01b038088166001600160a01b03199283161790925560059093529083208054918716919092161790555b848110156113605785858281811061133457634e487b7160e01b600052603260045260246000fd5b60008a81526006602090815260408083208784528252909120910292909201359091555060010161130c565b50857fe4eac2915a3b232e7c1a8c849de37043ab57b0930f09dd29a9c4d4ca69640053848787866040516113979493929190612b81565b60405180910390a2505050505050565b6040516331a9108f60e11b81526004810189905288907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b15801561140957600080fd5b505afa15801561141d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114419190612475565b6001600160a01b0316336001600160a01b03161461147257604051637c2411e960e01b815260040160405180910390fd5b8760400135886020013510158061148d575087604001354210155b156114ab57604051633dee3b7160e11b815260040160405180910390fd5b66038d7ea4c680003410156114d357604051631e9acf1760e31b815260040160405180910390fd5b6000898152600260209081526040808320805460010190819055600383528184208185528352818420349055905190929161151a918b918b918b918b918b918b9101612a31565b60408051601f19818403018152828252805160209091012061010083019091529150806115478c80612c8a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602080830186905260408084018690528e82013560608501528e81013560808501528f8352600990915290205460a0909101906115b990611c21565b81526020016115dd600960008f815260200190815260200160002060010154611c21565b8152602001428c60200135116115f45760006115f7565b60015b600581111561161657634e487b7160e01b600052602160045260246000fd5b905260008c8152600460209081526040808320868452825290912082518051919261164692849290910190612272565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908360058111156116bb57634e487b7160e01b600052602160045260246000fd5b0217905550506040518381523391508c907f3417b456fad6209c73445d5efd446d686e75e4560f0f50c13b5a5cde976447b49060200160405180910390a35050505050505050505050565b6008602052826000526040600020602052816000526040600020818154811061172e57600080fd5b9060005260206000200160009250925050505481565b6000828152600a602052604090205482906001600160a01b0316331461177d5760405163be24598360e01b815260040160405180910390fd5b60008381526004602090815260408083208584529091529020600101546117b757604051636aed889560e01b815260040160405180910390fd5b60008381526004602090815260408083208584529091528120906117db82826122f6565b50600060018201819055600282018190556003820181905560048201819055600582018190556006820155600701805460ff19169055505050565b6040516331a9108f60e11b81526004810189905260609089906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b15801561187b57600080fd5b505afa15801561188f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b39190612475565b6001600160a01b0316336001600160a01b0316146118e457604051637c2411e960e01b815260040160405180910390fd5b60008a81526004602090815260408083208c8452909152902060018101548a1461192157604051636aed889560e01b815260040160405180910390fd5b806004015442108061195957506005600782015460ff16600581111561195757634e487b7160e01b600052602160045260246000fd5b145b1561197757604051633dee3b7160e11b815260040160405180910390fd5b611983338b8b8b611c64565b6119a057604051638baa579f60e01b815260040160405180910390fd5b6000878787876040516020016119b99493929190612a77565b604051602081830303815290604052805190602001209050808260020154146119f557604051630fb5d77960e31b815260040160405180910390fd5b60078201805460ff1916600517905560ff8a16611ad1576060865160001415611a1f575084611a4b565b868051906020012086604051602001611a39929190612acc565b60405160208183030381529060405290505b6000808a6001600160a01b03168a84604051611a679190612afd565b60006040518083038185875af1925050503d8060008114611aa4576040519150601f19603f3d011682016040523d82523d6000602084013e611aa9565b606091505b509150915081611acc576040516348b3e13d60e11b815260040160405180910390fd5b955050505b60008c81526003602090815260408083208e845290915281208054919055611af93382611d73565b604080518d815260ff8d16602082015233918f917fa59f9b2dc4c8fed59ad676058c365dc39fef85a09cdf9b9e292b0e713b5e8e98910160405180910390a35050505098975050505050505050565b6001600160a01b0381166000908152600860209081526040808320858452825280832080548251818502810185019093528083528493830182828015611bad57602002820191906000526020600020905b815481526020019060010190808311611b99575b50505050509050805160001415611bc8576000915050610650565b60005b8151811015611c1657818181518110611bf457634e487b7160e01b600052603260045260246000fd5b6020026020010151600014611c0e57600192505050610650565b600101611bcb565b506000949350505050565b60006064600160005484611c359190612d81565b611c40906064612d49565b611c4a9190612da0565b611c549190612d61565b905080611c5f575060015b919050565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526001600160f81b031960f884901b1660548201526000908190605501604051602081830303815290604052805190602001209050611cc58184611e96565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663238ac9336040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2757600080fd5b505afa158015611d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5f9190612475565b6001600160a01b0316149695505050505050565b80471015611dc85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611e15576040519150601f19603f3d011682016040523d82523d6000602084013e611e1a565b606091505b5050905080611e915760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401611dbf565b505050565b6000806000611ea58585611eba565b91509150611eb281611f2a565b509392505050565b600080825160411415611ef15760208301516040840151606085015160001a611ee58782858561212e565b94509450505050611f23565b825160401415611f1b5760208301516040840151611f1086838361221b565b935093505050611f23565b506000905060025b9250929050565b6000816004811115611f4c57634e487b7160e01b600052602160045260246000fd5b1415611f555750565b6001816004811115611f7757634e487b7160e01b600052602160045260246000fd5b1415611fc55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401611dbf565b6002816004811115611fe757634e487b7160e01b600052602160045260246000fd5b14156120355760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401611dbf565b600381600481111561205757634e487b7160e01b600052602160045260246000fd5b14156120b05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401611dbf565b60048160048111156120d257634e487b7160e01b600052602160045260246000fd5b141561212b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401611dbf565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156121655750600090506003612212565b8460ff16601b1415801561217d57508460ff16601c14155b1561218e5750600090506004612212565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156121e2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661220b57600060019250925050612212565b9150600090505b94509492505050565b6000806001600160ff1b0383168161223860ff86901c601b612d49565b90506122468782888561212e565b935093505050935093915050565b508054600082559060005260206000209081019061212b919061232c565b82805461227e90612de7565b90600052602060002090601f0160209004810192826122a057600085556122e6565b82601f106122b957805160ff19168380011785556122e6565b828001600101855582156122e6579182015b828111156122e65782518255916020019190600101906122cb565b506122f292915061232c565b5090565b50805461230290612de7565b6000825580601f10612312575050565b601f01602090049060005260206000209081019061212b91905b5b808211156122f2576000815560010161232d565b8035611c5f81612e4e565b600082601f83011261235c578081fd5b8135602061237161236c83612d26565b612cf6565b80838252828201915082860187848660051b8901011115612390578586fd5b855b858110156123ae57813584529284019290840190600101612392565b5090979650505050505050565b60008083601f8401126123cc578182fd5b5081356001600160401b038111156123e2578182fd5b602083019150836020828501011115611f2357600080fd5b600082601f83011261240a578081fd5b81356001600160401b0381111561242357612423612e38565b612436601f8201601f1916602001612cf6565b81815284602083860101111561244a578283fd5b816020850160208301379081016020019190915292915050565b803560ff81168114611c5f57600080fd5b600060208284031215612486578081fd5b815161249181612e4e565b9392505050565b600080600080600060a086880312156124af578081fd5b85356124ba81612e4e565b945060208601356124ca81612e4e565b935060408601356001600160401b03808211156124e5578283fd5b6124f189838a0161234c565b94506060880135915080821115612506578283fd5b61251289838a0161234c565b93506080880135915080821115612527578283fd5b50612534888289016123fa565b9150509295509295909350565b600080600080600060a08688031215612558578081fd5b853561256381612e4e565b9450602086013561257381612e4e565b9350604086013592506060860135915060808601356001600160401b0381111561259b578182fd5b612534888289016123fa565b600080604083850312156125b9578182fd5b82356125c481612e4e565b946020939093013593505050565b6000806000606084860312156125e6578081fd5b83356125f181612e4e565b95602085013595506040909401359392505050565b600060208284031215612617578081fd5b81356001600160e01b031981168114612491578182fd5b60006020828403121561263f578081fd5b5035919050565b60008060408385031215612658578182fd5b82359150602083013561266a81612e4e565b809150509250929050565b6000806040808486031215612688578283fd5b833592506020808501356001600160401b038111156126a5578384fd5b8501601f810187136126b5578384fd5b80356126c361236c82612d26565b818152838101908385016060808502860187018c10156126e1578889fd5b8895505b848610156127345780828d0312156126fb578889fd5b612703612cce565b82358152878301358882015261271a898401612464565b818a015284526001959095019492860192908101906126e5565b50979a909950975050505050505050565b60008060008060006080868803121561275c578283fd5b8535945060208601356001600160401b0380821115612779578485fd5b818801915088601f83011261278c578485fd5b81358181111561279a578586fd5b8960208260051b85010111156127ae578586fd5b60208301965080955050505060408601356127c881612e4e565b915060608601356127d881612e4e565b809150509295509295909350565b600080604083850312156127f8578182fd5b8235915060208301356001600160401b03811115612814578182fd5b6128208582860161234c565b9150509250929050565b60008060008060008060008060c0898b031215612845578586fd5b8835975060208901356001600160401b0380821115612862578788fd5b908a01906060828d031215612875578788fd5b90975060408a01359061288782612e4e565b90965060608a0135955060808a013590808211156128a3578485fd5b6128af8c838d016123bb565b909650945060a08b01359150808211156128c7578384fd5b506128d48b828c016123bb565b999c989b5096995094979396929594505050565b600080604083850312156128fa578182fd5b50508035926020909101359150565b600080600080600080600080610100898b031215612925578182fd5b883597506020890135965061293c60408a01612464565b955060608901356001600160401b0380821115612957578384fd5b6129638c838d016123fa565b965061297160808c01612341565b955060a08b0135945060c08b013591508082111561298d578384fd5b6129998c838d016123fa565b935060e08b01359150808211156129ae578283fd5b506129bb8b828c016123fa565b9150509295985092959890939650565b6000815180845260208085019450808401835b838110156129fa578151875295820195908201906001016129de565b509495945050505050565b60008151808452612a1d816020860160208601612db7565b601f01601f19169290920160200192915050565b6bffffffffffffffffffffffff198760601b1681528560148201528385603483013760008482016034810182815284868237509092016034019182525095945050505050565b6bffffffffffffffffffffffff198560601b16815283601482015260008351612aa7816034850160208801612db7565b835190830190612abe816034840160208801612db7565b016034019695505050505050565b6001600160e01b0319831681528151600090612aef816004850160208701612db7565b919091016004019392505050565b60008251612b0f818460208701612db7565b9190910192915050565b6001600160a01b0385811682528416602082015260a060408201819052600090612b45908301856129cb565b8281036060840152612b5781856129cb565b838103608090940193909352505060048152630307830360e41b6020820152604001949350505050565b6001600160a01b03858116825260606020830181905282018490526000906001600160fb1b03851115612bb2578182fd5b8460051b808760808601378301608001918252929092166040909101529392505050565b6020815260006124916020830184612a05565b6000610100808352612bfd8184018c612a05565b9150508860208301528760408301528660608301528560808301528460a08301528360c083015260068310612c4257634e487b7160e01b600052602160045260246000fd5b8260e08301529998505050505050505050565b838152606060208201526000612c6e60608301856129cb565b8281036040840152612c8081856129cb565b9695505050505050565b6000808335601e19843603018112612ca0578283fd5b8301803591506001600160401b03821115612cb9578283fd5b602001915036819003821315611f2357600080fd5b604051606081016001600160401b0381118282101715612cf057612cf0612e38565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612d1e57612d1e612e38565b604052919050565b60006001600160401b03821115612d3f57612d3f612e38565b5060051b60200190565b60008219821115612d5c57612d5c612e22565b500190565b600082612d7c57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d9b57612d9b612e22565b500290565b600082821015612db257612db2612e22565b500390565b60005b83811015612dd2578181015183820152602001612dba565b83811115612de1576000848401525b50505050565b600181811c90821680612dfb57607f821691505b60208210811415612e1c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461212b57600080fdfea2646970667358221220b555aa9d249685bcac24d7bc0abbbff2d0533deb32d1a2e26d2f3cbe176d5a4564736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createGovernor(uint256,uint256[],address,address)": {
        "params": {
          "_admin": "The admin of the DAO who can revert the impractical proposals",
          "_membershipPass": "Membership-pass of the DAO",
          "_multipliers": "Multiplier for tier reputations",
          "_projectId": "The ID of the DAO"
        }
      },
      "execute(uint256,uint256,uint8,bytes,address,uint256,string,bytes)": {
        "params": {
          "_projectId": "The ID of the DAO",
          "_proposalId": "The ID of the proposal to execute",
          "_proposeResult": "The proposal result, 0=true 1=false",
          "_signatureBySigner": "the signature signed by signer"
        }
      },
      "getReputation(uint256,address)": {
        "params": {
          "_from": "The wallet address that you want to get Points",
          "_projectId": "The ID of the DAO "
        }
      },
      "propose(uint256,(string,uint256,uint256),address,uint256,string,bytes)": {
        "details": "There has different types of proposals, only the DAO Owner can create the proposal that enable to unlock the treasury",
        "params": {
          "_calldata": "The data of the proposal",
          "_projectId": "The ID of the DAO",
          "_properties": "The data properties of proposal",
          "_signature": "The signature of the proposal",
          "_target": "The address of Treasury account",
          "_value": "The value of ETH"
        }
      },
      "revertProposal(uint256,uint256)": {
        "params": {
          "_projectId": "the project id of proposal belows to",
          "_proposalId": "the proposal id which try to revert"
        }
      },
      "stakePass(uint256,(uint256,uint256,uint8)[])": {
        "params": {
          "_membershipPass": "Membership-Pass details",
          "_projectId": "The ID of the DAO that user want to stake"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unStakePass(uint256,uint256[])": {
        "params": {
          "_projectId": "the project to unstake"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createGovernor(uint256,uint256[],address,address)": {
        "notice": "Setup / create the admin for the governor in the DAO"
      },
      "execute(uint256,uint256,uint8,bytes,address,uint256,string,bytes)": {
        "notice": "Execute the proposal"
      },
      "getReputation(uint256,address)": {
        "notice": "Calculate the reputation points of the wallet address"
      },
      "propose(uint256,(string,uint256,uint256),address,uint256,string,bytes)": {
        "notice": "Create a proposal "
      },
      "revertProposal(uint256,uint256)": {
        "notice": "Admin can revert the incorrect proposal"
      },
      "stakePass(uint256,(uint256,uint256,uint8)[])": {
        "notice": "Stake Membership-pass to get reputation"
      },
      "unStakePass(uint256,uint256[])": {
        "notice": "Unstake MembershipPass"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9556,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "proposalRate",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9558,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "recordId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9563,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "proposalIdOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Counter)4499_storage)"
      },
      {
        "astId": 9569,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "stakedETHOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9576,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "proposalOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Proposal)15855_storage))"
      },
      {
        "astId": 9580,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "membershipPassOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9586,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "tierReputationMultiplierOf",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9593,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "stakesOf",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakeRecord)15885_storage))"
      },
      {
        "astId": 9600,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "recordOf",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 9605,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "votesOf",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Vote)15867_storage)"
      },
      {
        "astId": 9609,
        "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
        "label": "adminOf",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ProposalState)15837": {
        "encoding": "inplace",
        "label": "enum IDAOGovernorBooster.ProposalState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakeRecord)15885_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IDAOGovernorBooster.StakeRecord))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(StakeRecord)15885_storage)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Proposal)15855_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct IDAOGovernorBooster.Proposal))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Proposal)15855_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Counter)4499_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)4499_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposal)15855_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDAOGovernorBooster.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)15855_storage"
      },
      "t_mapping(t_uint256,t_struct(StakeRecord)15885_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDAOGovernorBooster.StakeRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeRecord)15885_storage"
      },
      "t_mapping(t_uint256,t_struct(Vote)15867_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDAOGovernorBooster.Vote)",
        "numberOfBytes": "32",
        "value": "t_struct(Vote)15867_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)4499_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4498,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)15855_storage": {
        "encoding": "inplace",
        "label": "struct IDAOGovernorBooster.Proposal",
        "members": [
          {
            "astId": 15839,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "uri",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 15841,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15843,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "hash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 15845,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "start",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15847,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "end",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15849,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "minVoters",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15851,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "minVotes",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 15854,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(ProposalState)15837"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(StakeRecord)15885_storage": {
        "encoding": "inplace",
        "label": "struct IDAOGovernorBooster.StakeRecord",
        "members": [
          {
            "astId": 15876,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "tier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15878,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15880,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "point",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15882,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "stakeAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15884,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "expiry",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Vote)15867_storage": {
        "encoding": "inplace",
        "label": "struct IDAOGovernorBooster.Vote",
        "members": [
          {
            "astId": 15864,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "totalVoters",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15866,
            "contract": "contracts/DAOGovernorBooster.sol:DAOGovernorBooster",
            "label": "totalVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}