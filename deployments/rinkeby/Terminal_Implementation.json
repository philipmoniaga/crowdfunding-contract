{
  "address": "0x7d004CA6656961C383493E0b5730d26C9BaE8319",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadLockRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadOperationPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadTapFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundingCycleActived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundingCycleNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundingCyclePaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LastWeightMustBe1",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCommunityTicketLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voucher",
          "type": "address"
        }
      ],
      "name": "Voucher721",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "AddToBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tierIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "offeringAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct PayoutMod",
          "name": "mod",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "DistributeToPayoutMod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tiers",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetContributeFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minLockRate",
          "type": "uint256"
        }
      ],
      "name": "SetMinLockRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetTapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "govFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netTransferAmount",
          "type": "uint256"
        }
      ],
      "name": "Tap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockAmount",
          "type": "uint256"
        }
      ],
      "name": "UnlockTreasury",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "addToBalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bluechipsBooster",
      "outputs": [
        {
          "internalType": "contract IBluechipsBooster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "claimPassOrRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "communityContribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tiers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contributeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "handle",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "customBoosters",
              "type": "address[]"
            },
            {
              "internalType": "uint16[]",
              "name": "boosterMultipliers",
              "type": "uint16[]"
            }
          ],
          "internalType": "struct Metadata",
          "name": "_metadata",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tierFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tierCapacity",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutablePassTier[]",
          "name": "_tiers",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "lockRate",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycleParameter",
          "name": "_params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "communityAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "communityVoucher",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reservedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionedPass[]",
          "name": "_auctionedPass",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct PayoutMod[]",
          "name": "_payoutMods",
          "type": "tuple[]"
        }
      ],
      "name": "createDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "lockRate",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycleParameter",
          "name": "_params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "communityAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "communityVoucher",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reservedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionedPass[]",
          "name": "_auctionedPass",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct PayoutMod[]",
          "name": "_payoutMods",
          "type": "tuple[]"
        }
      ],
      "name": "createNewFundingCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoGovernorBooster",
      "outputs": [
        {
          "internalType": "contract IDAOGovernorBooster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingCycles",
      "outputs": [
        {
          "internalType": "contract IFundingCycles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_payData",
          "type": "uint256[]"
        }
      ],
      "name": "getEstimatingAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "allocations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "getOfferingAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "allocations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "getRefundingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "getUnSoldTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IFundingCycles",
          "name": "_fundingCycles",
          "type": "address"
        },
        {
          "internalType": "contract IMembershipPassBooth",
          "name": "_passBooth",
          "type": "address"
        },
        {
          "internalType": "contract IDAOGovernorBooster",
          "name": "_governorBooster",
          "type": "address"
        },
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        },
        {
          "internalType": "contract IBluechipsBooster",
          "name": "_bluechipsBooster",
          "type": "address"
        },
        {
          "internalType": "contract IPayoutStore",
          "name": "_payoutStore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "membershipPassBooth",
      "outputs": [
        {
          "internalType": "contract IMembershipPassBooth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLockRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutStore",
      "outputs": [
        {
          "internalType": "contract IPayoutStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setContributeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLockRate",
          "type": "uint256"
        }
      ],
      "name": "setMinLockRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPausedFundingCycleProject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setTapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "superAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "tap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockAmount",
          "type": "uint256"
        }
      ],
      "name": "unLockTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bcbd4faf7c86b9fa5c77499a463d4e437e5628bb2aaf9ac5bcc958a056d38a7",
  "receipt": {
    "to": null,
    "from": "0x33aaE4F4bA8019704137703Fe808F6B172D72D6B",
    "contractAddress": "0x7d004CA6656961C383493E0b5730d26C9BaE8319",
    "transactionIndex": 7,
    "gasUsed": "3916567",
    "logsBloom": "0x
    "blockHash": "0xfda8b6235808053c75ac44a9b2f05b9c887d3fb85e9d60f82c6be03bea63da0a",
    "transactionHash": "0x9bcbd4faf7c86b9fa5c77499a463d4e437e5628bb2aaf9ac5bcc958a056d38a7",
    "logs": [],
    "blockNumber": 10982948,
    "cumulativeGasUsed": "6775862",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4e9316abea9744a68b7555d93f5656d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadLockRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadOperationPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadTapFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingCycleActived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingCycleNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingCyclePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LastWeightMustBe1\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCommunityTicketLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voucher\",\"type\":\"address\"}],\"name\":\"Voucher721\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"AddToBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tierIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"offeringAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct PayoutMod\",\"name\":\"mod\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"DistributeToPayoutMod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tiers\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetContributeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLockRate\",\"type\":\"uint256\"}],\"name\":\"SetMinLockRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetTapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"govFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netTransferAmount\",\"type\":\"uint256\"}],\"name\":\"Tap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"}],\"name\":\"UnlockTreasury\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"addToBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bluechipsBooster\",\"outputs\":[{\"internalType\":\"contract IBluechipsBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"claimPassOrRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"communityContribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"handle\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"customBoosters\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"boosterMultipliers\",\"type\":\"uint16[]\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tierFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierCapacity\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutablePassTier[]\",\"name\":\"_tiers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"lockRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycleParameter\",\"name\":\"_params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"communityVoucher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionedPass[]\",\"name\":\"_auctionedPass\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct PayoutMod[]\",\"name\":\"_payoutMods\",\"type\":\"tuple[]\"}],\"name\":\"createDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"lockRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycleParameter\",\"name\":\"_params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"communityVoucher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionedPass[]\",\"name\":\"_auctionedPass\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct PayoutMod[]\",\"name\":\"_payoutMods\",\"type\":\"tuple[]\"}],\"name\":\"createNewFundingCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoGovernorBooster\",\"outputs\":[{\"internalType\":\"contract IDAOGovernorBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycles\",\"outputs\":[{\"internalType\":\"contract IFundingCycles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_payData\",\"type\":\"uint256[]\"}],\"name\":\"getEstimatingAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"getOfferingAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"getRefundingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"getUnSoldTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IFundingCycles\",\"name\":\"_fundingCycles\",\"type\":\"address\"},{\"internalType\":\"contract IMembershipPassBooth\",\"name\":\"_passBooth\",\"type\":\"address\"},{\"internalType\":\"contract IDAOGovernorBooster\",\"name\":\"_governorBooster\",\"type\":\"address\"},{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"},{\"internalType\":\"contract IBluechipsBooster\",\"name\":\"_bluechipsBooster\",\"type\":\"address\"},{\"internalType\":\"contract IPayoutStore\",\"name\":\"_payoutStore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipPassBooth\",\"outputs\":[{\"internalType\":\"contract IMembershipPassBooth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutStore\",\"outputs\":[{\"internalType\":\"contract IPayoutStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setContributeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLockRate\",\"type\":\"uint256\"}],\"name\":\"setMinLockRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPausedFundingCycleProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockAmount\",\"type\":\"uint256\"}],\"name\":\"unLockTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToBalance(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to which the funds received belong.\"}},\"claimPassOrRefund(uint256,uint256)\":{\"params\":{\"_fundingCycleId\":\"the funding cycle id to claim\",\"_projectId\":\"the project id to claim\"}},\"communityContribute(uint256,uint256,string)\":{\"params\":{\"_fundingCycleId\":\"The funding cycle id\",\"_memo\":\"memo attached when purchase\",\"_projectId\":\"The ID of the DAO being contribute to\"}},\"contribute(uint256,uint256[],uint256[],string)\":{\"params\":{\"_amounts\":\"The amounts of submitted\",\"_memo\":\"The memo that will be attached in the published event after purchasing\",\"_projectId\":\"The ID of the DAO being contribute to\",\"_tiers\":\"The payment tier ids\"}},\"createDao((bytes32,address[],uint16[]),(uint256,uint256,uint256)[],(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[],(uint16,address)[])\":{\"params\":{\"_auctionedPass\":\"Auctioned pass information\",\"_metadata\":\"The metadata for the DAO\",\"_params\":\"The parameters for Funding Cycle \",\"_payoutMods\":\"The payout infos\",\"_tiers\":\"The total tiers of the Membership-pass\"}},\"createNewFundingCycle(uint256,(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[],(uint16,address)[])\":{\"params\":{\"_auctionedPass\":\"auctioned pass information\",\"_params\":\"The parameters for funding cycle\",\"_projectId\":\"The project id of the dao\"}},\"getEstimatingAmount(uint256,uint256,uint256[])\":{\"params\":{\"_fundingCycleId\":\"The ID of the funding cycle\",\"_payData\":\"payment info\",\"_projectId\":\"The ID of the DAO\"}},\"getOfferingAmount(address,uint256,uint256)\":{\"params\":{\"_from\":\"The wallet address of the user \",\"_fundingCycleId\":\"The ID of the funding cycle\",\"_projectId\":\"The ID of the DAO you contributed with\"},\"returns\":{\"allocations\":\"The allocation percentage of each tier Passes offering in this funding cycle\",\"amounts\":\"The amount of each tier Passes offering in this funding cycle\"}},\"getRefundingAmount(address,uint256,uint256)\":{\"params\":{\"_from\":\"user address\",\"_fundingCycleId\":\"the funding cycle id\",\"_projectId\":\"the project id of contribute dao\"}},\"getUnSoldTickets(uint256)\":{\"params\":{\"_fundingCycleId\":\"the funding cycle id\"}},\"initialize(address,address,address,address,address,address,address,address,address)\":{\"params\":{\"_admin\":\"super admin\",\"_devTreasury\":\"dev treasury address, receive contribute fee and tap fee\",\"_fundingCycles\":\"A funding cycle configuration store. (DAO Creator can launch mutiple times.)\",\"_governorBooster\":\"The governor booster\",\"_passBooth\":\"The tiers with the Membership-pass this DAO has\",\"_projects\":\"A DAO's contract which mints ERC721 represent project's ownership and transfers.\"}},\"setPausedFundingCycleProject(uint256,bool)\":{\"params\":{\"_paused\":\"status true or false for the funding cycle.\",\"_projectId\":\"The ID of the project to which the funds received belong.\"}},\"tap(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount being tapped\",\"_fundingCycleId\":\"The ID of the funding cycle to tap\",\"_projectId\":\"The ID of the project to which the funding cycle being tapped belongs\"}},\"unLockTreasury(uint256,uint256,uint256)\":{\"details\":\"Only daoGovernor contract\",\"params\":{\"_fundingCycleId\":\"The Id of the fundingCycle to unlock\",\"_projectId\":\"The Id of the project to unlock\",\"_unlockAmount\":\"The amount being unlocked\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"addToBalance(uint256)\":{\"notice\":\"Receives and allocates funds belonging to the specified project.\"},\"claimPassOrRefund(uint256,uint256)\":{\"notice\":\"Claim menbershippass or refund overlow part\"},\"communityContribute(uint256,uint256,string)\":{\"notice\":\"Community members can mint the  membership pass for free. For those who has the specific NFT in wallet, enable to claim free pass\"},\"contribute(uint256,uint256[],uint256[],string)\":{\"notice\":\"Contribute ETH to a dao\"},\"createDao((bytes32,address[],uint16[]),(uint256,uint256,uint256)[],(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[],(uint16,address)[])\":{\"notice\":\"Deploy a DAO, this will mint an ERC721 into the `_owner`'s account, and configure a first funding cycle.\"},\"createNewFundingCycle(uint256,(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[],(uint16,address)[])\":{\"notice\":\"Create the new Funding Cycle for spesific project, need to check the reserve amount pass in Treasury\"},\"getEstimatingAmount(uint256,uint256,uint256[])\":{\"notice\":\"Estimate allocate tickets\"},\"getOfferingAmount(address,uint256,uint256)\":{\"notice\":\"Get offering tickets by funding cycle\"},\"getRefundingAmount(address,uint256,uint256)\":{\"notice\":\"Get offering tickets by funding cycle\"},\"getUnSoldTickets(uint256)\":{\"notice\":\"Calculate the unsold tickets by funding cycle id\"},\"initialize(address,address,address,address,address,address,address,address,address)\":{\"notice\":\"Due to a requirement of the proxy-based upgradeability system, no constructors can be used in upgradeable contracts\"},\"setPausedFundingCycleProject(uint256,bool)\":{\"notice\":\"Set paused status to the current active funding cycle in the spesific project.\"},\"tap(uint256,uint256,uint256)\":{\"notice\":\"Tap into funds that have been contributed to a project's funding cycles\"},\"unLockTreasury(uint256,uint256,uint256)\":{\"notice\":\"Unlock the locked balance in dao treasury\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Terminal.sol\":\"Terminal\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@prb/math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"contracts/Terminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@prb/math/contracts/PRBMath.sol\\\";\\n\\nimport {ITerminal, IProjects, IFundingCycles, IMembershipPassBooth, IDAOGovernorBooster, IBluechipsBooster, ITerminalDirectory, IPayoutStore, FundingCycleState, Metadata, ImmutablePassTier, FundingCycleParameter, AuctionedPass, FundingCycleProperties, PayInfoWithWeight, IERC721, PayoutMod} from \\\"./interfaces/ITerminal.sol\\\";\\n\\ncontract Terminal is ITerminal, Initializable, ReentrancyGuardUpgradeable {\\n    using SafeMath for uint256;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551  Private Stored Properties  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    address public override superAdmin;\\n\\n    // The percent fee takes when from tapped amounts, 1 => 1%\\n    uint256 public override tapFee;\\n\\n    // The percent fee takes when user contribute to a project, 1 => 0.1%\\n    uint256 public override contributeFee;\\n\\n    // The dev treasury address\\n    address public override devTreasury;\\n\\n    // The min lock percent of funds in treasury. 3000 => 30%\\n    uint256 public override minLockRate;\\n\\n    // the amount of ETH that each project is responsible for.\\n    mapping(uint256 => uint256) public override balanceOf;\\n\\n    IProjects public override projects;\\n\\n    IFundingCycles public override fundingCycles;\\n\\n    IMembershipPassBooth public override membershipPassBooth;\\n\\n    IDAOGovernorBooster public override daoGovernorBooster;\\n\\n    IBluechipsBooster public override bluechipsBooster;\\n\\n    ITerminalDirectory public override terminalDirectory;\\n\\n    IPayoutStore public override payoutStore;\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != superAdmin) revert UnAuthorized();\\n        _;\\n    }\\n\\n    modifier onlyProjectFundingCycleMatch(uint256 _projectId, uint256 _fundingCycleId) {\\n        FundingCycleProperties memory _fundingCycle = fundingCycles.getFundingCycle(\\n            _fundingCycleId\\n        );\\n        if (_projectId == 0 || _fundingCycle.projectId != _projectId) revert FundingCycleNotExist();\\n        _;\\n    }\\n\\n    modifier onlyCorrectPeroid(uint256 _fundingCycleId, FundingCycleState _expectState) {\\n        if (fundingCycles.getFundingCycleState(_fundingCycleId) != _expectState)\\n            revert BadOperationPeriod();\\n        _;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551  External / Public VIEW  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    /**\\n\\t\\t@notice\\n\\t\\tGet offering tickets by funding cycle\\n\\n\\t\\t@param _from The wallet address of the user \\n\\t\\t@param _projectId The ID of the DAO you contributed with\\n\\t\\t@param _fundingCycleId The ID of the funding cycle\\n\\t\\t@return amounts The amount of each tier Passes offering in this funding cycle\\n\\t\\t@return allocations The allocation percentage of each tier Passes offering in this funding cycle\\n\\t*/\\n    function getOfferingAmount(\\n        address _from,\\n        uint256 _projectId,\\n        uint256 _fundingCycleId\\n    ) public view returns (uint256[] memory amounts, uint256[] memory allocations) {\\n        allocations = membershipPassBooth.getUserAllocation(_from, _projectId, _fundingCycleId);\\n\\n        amounts = new uint256[](allocations.length);\\n        for (uint256 i; i < allocations.length;) {\\n            if (allocations[i] == 0) {\\n                amounts[i] = 0;\\n                continue;\\n            }\\n            amounts[i] = allocations[i]\\n                .mul(fundingCycles.getAutionedPass(_fundingCycleId, i).saleAmount)\\n                .div(1e6);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n\\t\\t@notice\\n\\t\\tEstimate allocate tickets\\n\\n\\t\\t@param _projectId The ID of the DAO\\n\\t\\t@param _fundingCycleId The ID of the funding cycle\\n\\t\\t@param _payData payment info\\n\\t*/\\n    function getEstimatingAmount(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256[] memory _payData\\n    ) external view returns (uint256[] memory amounts, uint256[] memory allocations) {\\n        uint256[] memory _weights = new uint256[](_payData.length);\\n        for (uint256 i; i < _payData.length;) {\\n            _weights[i] = _payData[i] * fundingCycles.getAutionedPass(_fundingCycleId, i).salePrice;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        allocations = membershipPassBooth.getEstimatingUserAllocation(\\n            _projectId,\\n            _fundingCycleId,\\n            _payData,\\n            _weights\\n        );\\n        for (uint256 i; i < allocations.length;) {\\n            amounts[i] = allocations[i]\\n                .mul(fundingCycles.getAutionedPass(_fundingCycleId, i).saleAmount)\\n                .div(1e6);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n\\t\\t@notice\\n\\t\\tGet offering tickets by funding cycle\\n\\n\\t\\t@param _from user address\\n\\t\\t@param _projectId the project id of contribute dao\\n\\t\\t@param _fundingCycleId the funding cycle id\\n\\t*/\\n    function getRefundingAmount(\\n        address _from,\\n        uint256 _projectId,\\n        uint256 _fundingCycleId\\n    ) public view returns (uint256 amount) {\\n        (uint256[] memory _offeringAmounts, ) = getOfferingAmount(\\n            _from,\\n            _projectId,\\n            _fundingCycleId\\n        );\\n        for (uint256 i; i < _offeringAmounts.length;) {\\n            (uint256 _amount, ) = membershipPassBooth.depositedWeightBy(_from, _fundingCycleId, i);\\n            if (_amount == 0) continue;\\n            amount += _amount.sub(_offeringAmounts[i]).mul(\\n                fundingCycles.getAutionedPass(_fundingCycleId, i).salePrice\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n\\t\\t@notice\\n\\t\\tCalculate the unsold tickets by funding cycle id\\n\\n\\t\\t@param _fundingCycleId the funding cycle id\\n\\t*/\\n    function getUnSoldTickets(uint256 _fundingCycleId) public view returns (uint256) {}\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   CONTRACT SETUP  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    /**\\n\\t\\t@notice\\n\\t\\tDue to a requirement of the proxy-based upgradeability system, no constructors can be used in upgradeable contracts\\n\\t    \\n\\t\\t@param _projects A DAO's contract which mints ERC721 represent project's ownership and transfers.\\n\\t\\t@param _fundingCycles A funding cycle configuration store. (DAO Creator can launch mutiple times.)\\n\\t\\t@param _passBooth The tiers with the Membership-pass this DAO has\\n\\t\\t@param _governorBooster The governor booster\\n\\t\\t@param _devTreasury dev treasury address, receive contribute fee and tap fee\\n\\t\\t@param _admin super admin\\n\\t */\\n    function initialize(\\n        IProjects _projects,\\n        IFundingCycles _fundingCycles,\\n        IMembershipPassBooth _passBooth,\\n        IDAOGovernorBooster _governorBooster,\\n        ITerminalDirectory _terminalDirectory,\\n        IBluechipsBooster _bluechipsBooster,\\n        IPayoutStore _payoutStore,\\n        address _devTreasury,\\n        address _admin\\n    ) public initializer {\\n        if (\\n            _projects == IProjects(address(0)) ||\\n            _fundingCycles == IFundingCycles(address(0)) ||\\n            _passBooth == IMembershipPassBooth(address(0)) ||\\n            _governorBooster == IDAOGovernorBooster(address(0)) ||\\n            _terminalDirectory == ITerminalDirectory(address(0)) ||\\n            _bluechipsBooster == IBluechipsBooster(address(0)) ||\\n            _payoutStore == IPayoutStore(address(0)) ||\\n            _devTreasury == address(0) ||\\n            _admin == address(0)\\n        ) revert ZeroAddress();\\n\\n        __ReentrancyGuard_init();\\n        projects = _projects;\\n        fundingCycles = _fundingCycles;\\n        membershipPassBooth = _passBooth;\\n        daoGovernorBooster = _governorBooster;\\n        terminalDirectory = _terminalDirectory;\\n        bluechipsBooster = _bluechipsBooster;\\n        devTreasury = _devTreasury;\\n        payoutStore = _payoutStore;\\n        superAdmin = _admin;\\n        contributeFee = 1;\\n        tapFee = 4;\\n        minLockRate = 5000;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External Transaction  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    /**\\n\\t\\t@notice\\n\\t\\tDeploy a DAO, this will mint an ERC721 into the `_owner`'s account, and configure a first funding cycle.\\n\\n        @param _metadata The metadata for the DAO\\n    \\t@param _tiers The total tiers of the Membership-pass\\n\\t\\t@param _params The parameters for Funding Cycle \\n\\t\\t@param _auctionedPass Auctioned pass information\\n        @param _payoutMods The payout infos\\n\\t */\\n    function createDao(\\n        Metadata calldata _metadata,\\n        ImmutablePassTier[] calldata _tiers,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] calldata _payoutMods\\n    ) external override {\\n        _validateConfigProperties(_auctionedPass, _params);\\n\\n        uint256 _projectId = projects.create(msg.sender, _metadata.handle, this);\\n        _setupProject(_projectId, _metadata, _tiers, _auctionedPass);\\n\\n        FundingCycleProperties memory fundingCycleProperty = fundingCycles.configure(\\n            _projectId,\\n            _params,\\n            _auctionedPass\\n        );\\n        payoutStore.setPayoutMods(_projectId, fundingCycleProperty.id, _payoutMods);\\n    }\\n\\n    /**\\n\\t\\t@notice\\n\\t\\tCreate the new Funding Cycle for spesific project, need to check the reserve amount pass in Treasury\\n\\n\\t\\t@param _projectId The project id of the dao\\n\\t\\t@param _params The parameters for funding cycle\\n\\t\\t@param _auctionedPass auctioned pass information\\n\\t */\\n    function createNewFundingCycle(\\n        uint256 _projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] calldata _payoutMods\\n    ) external override {\\n        if (msg.sender != projects.ownerOf(_projectId)) revert UnAuthorized();\\n\\n        _validateConfigProperties(_auctionedPass, _params);\\n\\n        uint256 latestFundingCycleId = fundingCycles.latestIdFundingProject(_projectId);\\n\\n        FundingCycleProperties memory property = fundingCycles.configure(\\n            _projectId,\\n            _params,\\n            _auctionedPass\\n        );\\n\\n        if (property.id == latestFundingCycleId) revert FundingCycleActived();\\n        payoutStore.setPayoutMods(_projectId, property.id, _payoutMods);\\n    }\\n\\n    /**\\n\\t\\t@notice\\n\\t\\tContribute ETH to a dao\\n\\n\\t\\t@param _projectId The ID of the DAO being contribute to\\n\\t\\t@param _tiers The payment tier ids\\n\\t\\t@param _amounts The amounts of submitted\\n\\t\\t@param _memo The memo that will be attached in the published event after purchasing\\n\\t */\\n    function contribute(\\n        uint256 _projectId,\\n        uint256[] memory _tiers,\\n        uint256[] memory _amounts,\\n        string memory _memo\\n    ) external payable override {\\n        FundingCycleProperties memory _fundingCycle = fundingCycles.currentOf(_projectId);\\n        uint256 _fundingCycleId = _fundingCycle.id;\\n        if (_fundingCycleId == 0) revert FundingCycleNotExist();\\n        if (fundingCycles.getFundingCycleState(_fundingCycleId) != FundingCycleState.Active)\\n            revert BadOperationPeriod();\\n\\n        // Make sure its not paused.\\n        if (_fundingCycle.isPaused) revert FundingCyclePaused();\\n        if (_tiers.length != _amounts.length) revert BadPayment();\\n\\n        uint256 _amount;\\n        PayInfoWithWeight[] memory _payInfoWithWeights = new PayInfoWithWeight[](_tiers.length);\\n        for (uint256 i; i < _tiers.length;) {\\n            AuctionedPass memory _auctionedPass = fundingCycles.getAutionedPass(\\n                _fundingCycleId,\\n                _tiers[i]\\n            );\\n            _amount = _amount.add(_amounts[i].mul(_auctionedPass.salePrice));\\n            _payInfoWithWeights[i] = PayInfoWithWeight({\\n                tier: _tiers[i],\\n                amount: _amounts[i],\\n                weight: _auctionedPass.salePrice\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        // contribute fee amount\\n        uint256 feeAmount = _amount.mul(contributeFee.div(100));\\n        if (msg.value < _amount.add(feeAmount)) revert InsufficientBalance();\\n\\n        // update tappable and locked balance\\n        fundingCycles.updateLocked(_projectId, _fundingCycleId, _amount);\\n\\n        // Transfer fee to the dev address\\n        AddressUpgradeable.sendValue(payable(devTreasury), feeAmount);\\n\\n        // Add to the balance of the project.\\n        balanceOf[_projectId] += _amount;\\n\\n        address _beneficiary = msg.sender;\\n        membershipPassBooth.stake(_projectId, _fundingCycleId, _beneficiary, _payInfoWithWeights);\\n\\n        emit Pay(_projectId, _fundingCycleId, _beneficiary, _amount, _tiers, _amounts, _memo);\\n    }\\n\\n    /**\\n\\t\\t@notice\\n\\t\\tCommunity members can mint the  membership pass for free. For those who has the specific NFT in wallet, enable to claim free pass\\n\\n\\t\\t@param _projectId The ID of the DAO being contribute to\\n\\t\\t@param _fundingCycleId The funding cycle id\\n\\t\\t@param _memo memo attached when purchase\\n\\t */\\n    function communityContribute(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        string memory _memo\\n    ) external override onlyProjectFundingCycleMatch(_projectId, _fundingCycleId) {\\n        address _beneficiary = msg.sender;\\n        if (membershipPassBooth.airdropClaimedOf(_beneficiary, _fundingCycleId))\\n            revert AlreadyClaimed();\\n\\n        uint256 tierSize = membershipPassBooth.tierSizeOf(_projectId);\\n        uint256[] memory _tiers = new uint256[](tierSize);\\n        uint256[] memory _amounts = new uint256[](tierSize);\\n        for (uint256 i; i < tierSize;) {\\n            AuctionedPass memory _auctionedPass = fundingCycles.getAutionedPass(_fundingCycleId, i);\\n            _tiers[i] = _auctionedPass.id;\\n            _amounts[i] = 0;\\n            if (\\n                IERC721(_auctionedPass.communityVoucher).balanceOf(_beneficiary) > 0 &&\\n                _auctionedPass.communityAmount -\\n                    membershipPassBooth.airdropClaimedAmountOf(_fundingCycleId, _auctionedPass.id) >\\n                0\\n            ) {\\n                _amounts[i] = 1;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        if (_tiers.length == 0) revert NoCommunityTicketLeft();\\n\\n        membershipPassBooth.airdropBatchMintTicket(\\n            _projectId,\\n            _fundingCycleId,\\n            _beneficiary,\\n            _tiers,\\n            _amounts\\n        );\\n\\n        emit Airdrop(_projectId, _fundingCycleId, _beneficiary, _tiers, _amounts, _memo);\\n    }\\n\\n    /**\\n\\t\\t@notice\\n\\t\\tClaim menbershippass or refund overlow part\\n\\n\\t\\t@param _projectId the project id to claim\\n\\t\\t@param _fundingCycleId the funding cycle id to claim\\n\\t */\\n    function claimPassOrRefund(uint256 _projectId, uint256 _fundingCycleId)\\n        external\\n        override\\n        nonReentrant\\n        onlyProjectFundingCycleMatch(_projectId, _fundingCycleId)\\n        onlyCorrectPeroid(_fundingCycleId, FundingCycleState.Expired)\\n    {\\n        address _from = msg.sender;\\n        if (membershipPassBooth.claimedOf(_from, _fundingCycleId)) revert AlreadyClaimed();\\n\\n        uint256 _refundAmount = getRefundingAmount(_from, _projectId, _fundingCycleId);\\n        if (_refundAmount > 0) {\\n            if (balanceOf[_projectId] < _refundAmount) revert InsufficientBalance();\\n            balanceOf[_projectId] = balanceOf[_projectId] - _refundAmount;\\n            AddressUpgradeable.sendValue(payable(_from), _refundAmount);\\n        }\\n        (uint256[] memory _offeringAmounts, ) = getOfferingAmount(\\n            _from,\\n            _projectId,\\n            _fundingCycleId\\n        );\\n        membershipPassBooth.batchMintTicket(_projectId, _fundingCycleId, _from, _offeringAmounts);\\n\\n        emit Claim(_projectId, _fundingCycleId, _from, _refundAmount, _offeringAmounts);\\n    }\\n\\n    /**\\n\\t\\t@notice\\n\\t\\tTap into funds that have been contributed to a project's funding cycles\\n\\n\\t\\t@param _projectId The ID of the project to which the funding cycle being tapped belongs\\n\\t\\t@param _fundingCycleId The ID of the funding cycle to tap\\n\\t\\t@param _amount The amount being tapped\\n\\t */\\n    function tap(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyProjectFundingCycleMatch(_projectId, _fundingCycleId)\\n        onlyCorrectPeroid(_fundingCycleId, FundingCycleState.Expired)\\n    {\\n        if (msg.sender != projects.ownerOf(_projectId)) revert UnAuthorized();\\n        if (fundingCycles.getFundingCycleState(_fundingCycleId) != FundingCycleState.Expired)\\n            revert BadOperationPeriod();\\n\\n        // get a reference to this project's current balance, including any earned yield.\\n        uint256 _balance = balanceOf[_projectId];\\n        if (_amount > _balance) revert InsufficientBalance();\\n\\n        // register the funds as tapped. Get the ID of the funding cycle that was tapped.\\n        fundingCycles.tap(_projectId, _fundingCycleId, _amount);\\n\\n        // removed the tapped funds from the project's balance.\\n        balanceOf[_projectId] = _balance - _amount;\\n\\n        uint256 _feeAmount = _amount.mul(tapFee).div(100);\\n        uint256 _tappableAmount = _amount.sub(_feeAmount);\\n        AddressUpgradeable.sendValue(payable(devTreasury), _feeAmount);\\n\\n        uint256 _leftoverTransferAmount = _distributeToPayoutMods(\\n            _projectId,\\n            _fundingCycleId,\\n            _tappableAmount\\n        );\\n        address payable _projectOwner = payable(projects.ownerOf(_projectId));\\n\\n        if (_leftoverTransferAmount > 0) {\\n            AddressUpgradeable.sendValue(_projectOwner, _leftoverTransferAmount);\\n        }\\n\\n        emit Tap(_projectId, _fundingCycleId, msg.sender, _feeAmount, _tappableAmount);\\n    }\\n\\n    /**\\n\\t\\t@notice\\n\\t\\tUnlock the locked balance in dao treasury\\n\\n\\t\\t@dev\\n\\t\\tOnly daoGovernor contract\\n\\n\\t\\t@param _projectId The Id of the project to unlock\\n\\t\\t@param _fundingCycleId The Id of the fundingCycle to unlock\\n\\t\\t@param _unlockAmount The amount being unlocked\\n\\t */\\n    function unLockTreasury(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _unlockAmount\\n    )\\n        external\\n        override\\n        onlyProjectFundingCycleMatch(_projectId, _fundingCycleId)\\n        onlyCorrectPeroid(_fundingCycleId, FundingCycleState.Expired)\\n    {\\n        if (msg.sender != address(daoGovernorBooster)) revert OnlyGovernor();\\n\\n        fundingCycles.unlock(_projectId, _fundingCycleId, _unlockAmount);\\n\\n        emit UnlockTreasury(_projectId, _unlockAmount);\\n    }\\n\\n    /**\\n        @notice\\n        Set paused status to the current active funding cycle in the spesific project.\\n\\n        @param _projectId The ID of the project to which the funds received belong.\\n        @param _paused status true or false for the funding cycle.\\n     */\\n    function setPausedFundingCycleProject(uint256 _projectId, bool _paused)\\n        external\\n        returns (bool)\\n    {\\n        if (msg.sender != projects.ownerOf(_projectId) && msg.sender != superAdmin)\\n            revert UnAuthorized();\\n\\n        return fundingCycles.setPauseFundingCycle(_projectId, _paused);\\n    }\\n\\n    function setTapFee(uint256 _fee) external override onlyAdmin {\\n        if (_fee > 10) revert BadTapFee();\\n\\n        tapFee = _fee;\\n\\n        emit SetTapFee(_fee);\\n    }\\n\\n    function setContributeFee(uint256 _fee) external override onlyAdmin {\\n        contributeFee = _fee;\\n\\n        emit SetContributeFee(_fee);\\n    }\\n\\n    function setMinLockRate(uint256 _minLockRate) external override onlyAdmin {\\n        minLockRate = _minLockRate;\\n\\n        emit SetMinLockRate(_minLockRate);\\n    }\\n\\n    /**\\n        @notice\\n        Receives and allocates funds belonging to the specified project.\\n\\n        @param _projectId The ID of the project to which the funds received belong.\\n     */\\n    function addToBalance(uint256 _projectId) external payable override {\\n        // The amount must be positive.\\n        if (msg.value <= 0) revert BadAmount();\\n        balanceOf[_projectId] = balanceOf[_projectId] + msg.value;\\n        emit AddToBalance(_projectId, msg.value, msg.sender);\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Helper Functions  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    /**\\n\\t\\t@notice\\n\\t\\tValidate the Config Setting For Passes For The Fundraising this time\\n\\n\\t\\t@param _auctionedPasses The ID of the funding cycle\\n\\t */\\n    function _validateConfigProperties(\\n        AuctionedPass[] calldata _auctionedPasses,\\n        FundingCycleParameter calldata _params\\n    ) private view {\\n        for (uint256 i; i < _auctionedPasses.length;) {\\n            if (\\n                _auctionedPasses[i].communityVoucher != address(0) &&\\n                !IERC721(_auctionedPasses[i].communityVoucher).supportsInterface(0x80ac58cd)\\n            ) revert Voucher721(_auctionedPasses[i].communityVoucher);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        if (_params.lockRate < minLockRate) revert BadLockRate();\\n    }\\n\\n    /** \\n      @notice\\n      Pays out the mods for the specified funding cycle.\\n      @param _projectId The project id base the distribution on.\\n      @param _fundingCycleId The funding cycle id to base the distribution on.\\n      @param _amount The total amount being paid out.\\n      @return leftoverAmount If the mod percents dont add up to 100%, the leftover amount is returned.\\n    */\\n    function _distributeToPayoutMods(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _amount\\n    ) private returns (uint256 leftoverAmount) {\\n        // Set the leftover amount to the initial amount.\\n        leftoverAmount = _amount;\\n\\n        // Get a reference to the project's payout mods.\\n        PayoutMod[] memory _mods = payoutStore.payoutModsOf(_fundingCycleId);\\n\\n        if (_mods.length == 0) return leftoverAmount;\\n\\n        //Transfer between all mods.\\n        for (uint256 _i; _i < _mods.length;) {\\n            // Get a reference to the mod being iterated on.\\n            PayoutMod memory _mod = _mods[_i];\\n\\n            // The amount to send towards mods. Mods percents are out of 10000.\\n            uint256 _modCut = PRBMath.mulDiv(_amount, _mod.percent, 10000);\\n\\n            if (_modCut > 0) {\\n                AddressUpgradeable.sendValue(_mod.beneficiary, _modCut);\\n            }\\n\\n            // Subtract from the amount to be sent to the beneficiary.\\n            leftoverAmount = leftoverAmount - _modCut;\\n\\n            unchecked {\\n                _i++;\\n            }\\n\\n            emit DistributeToPayoutMod(_fundingCycleId, _projectId, _mod, _modCut, msg.sender);\\n        }\\n    }\\n\\n    function _setupProject(\\n        uint256 _projectId,\\n        Metadata calldata _metadata,\\n        ImmutablePassTier[] calldata _tiers,\\n        AuctionedPass[] calldata _auctionedPass\\n    ) internal {\\n        uint256[] memory _tierFee = new uint256[](_tiers.length);\\n        uint256[] memory _tierCapacity = new uint256[](_tiers.length);\\n        uint256[] memory _multipliers = new uint256[](_tiers.length);\\n\\n        for (uint256 i; i < _tiers.length;) {\\n            if (\\n                (_auctionedPass[i].saleAmount +\\n                    _auctionedPass[i].communityAmount +\\n                    _auctionedPass[i].reservedAmount) > _tiers[i].tierCapacity\\n            ) {\\n                revert InsufficientBalance();\\n            }\\n            _tierFee[i] = _tiers[i].tierFee;\\n            _tierCapacity[i] = _tiers[i].tierCapacity;\\n            _multipliers[i] = _tiers[i].multiplier;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        address membershipPass = membershipPassBooth.issue(\\n            _projectId,\\n            _tierFee,\\n            _tierCapacity,\\n            _multipliers\\n        );\\n\\n        daoGovernorBooster.createGovernor(_projectId, _multipliers, membershipPass, superAdmin);\\n\\n        if (_metadata.customBoosters.length > 0)\\n            bluechipsBooster.createCustomBooster(\\n                _projectId,\\n                _metadata.customBoosters,\\n                _metadata.boosterMultipliers\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x938060a7a8536e58cbe9586c9ce5e91327b7a3c86a6625855a533b37778fc1dd\",\"license\":\"MIT\"},\"contracts/interfaces/IBluechipsBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBluechipsBooster {\\n    event CreateProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event CreateCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event ChallengeProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event ChallengeCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RenewProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event RenewCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event Remove(\\n        address indexed from,\\n        address beneficiary,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event RemoveCustomize(\\n        address indexed from,\\n        address beneficiary,\\n        uint256 projectId,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event AddBluechip(address bluechip, uint16 multiper);\\n\\n    event AddCustomBooster(uint256 indexed projectId, address[] bluechips, uint16[] multipers);\\n\\n    error SizeNotMatch();\\n    error BadMultiper();\\n    error ZeroAddress();\\n    error RenewFirst();\\n    error NotNFTOwner();\\n    error InsufficientBalance();\\n    error BoosterRegisterd();\\n    error BoosterNotRegisterd();\\n    error ProofNotRegisterd();\\n    error ChallengeFailed();\\n    error RedeemAfterExpired();\\n    error ForbiddenUpdate();\\n    error OnlyGovernor();\\n    error TransferDisabled();\\n\\n    function count() external view returns (uint256);\\n\\n    function tokenIdOf(bytes32 _proof) external view returns (uint256);\\n\\n    function proofBy(bytes32 _proof) external view returns (address);\\n\\n    function multiplierOf(address _bluechip) external view returns (uint16);\\n\\n    function boosterWeights(address _bluechip) external view returns (uint256);\\n\\n    function proofExpiryOf(bytes32 _proof) external view returns (uint256);\\n\\n    function stakedOf(bytes32 _proof) external view returns (uint256);\\n\\n    function customBoosterWeights(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function customMultiplierOf(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function createCustomBooster(\\n        uint256 _projectId,\\n        address[] memory _bluechips,\\n        uint16[] memory _multipers\\n    ) external;\\n\\n    function createProof(address _bluechip, uint256 _tokenId) external payable;\\n\\n    function createCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external payable;\\n\\n    function challengeProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function challengeCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function renewProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function renewCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function redeemProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function redeemCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function addBlueChip(address _bluechip, uint16 _multiper) external;\\n}\\n\",\"keccak256\":\"0xe56848adbfdf1124cc15295d2b418f348de15001668fbaa1ef9ca4edad014c8c\",\"license\":\"MIT\"},\"contracts/interfaces/IConfigStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IConfigStore {\\n    event SetBaseURI(string uri);\\n\\n    event SetBaseContractURI(string uri);\\n\\n    event SetSigner(address signer);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function baseContractURI() external view returns (string memory);\\n\\n    function signer() external view returns (address);\\n\\n    function setBaseURI(string memory _uri) external;\\n\\n    function setBaseContractURI(string memory _uri) external;\\n\\n    function setSigner(address _signer) external;\\n}\\n\",\"keccak256\":\"0x79eb0298de1ae6151bdd2314c379637d6f49d320a33c18479eaa8ceb58702f5b\",\"license\":\"MIT\"},\"contracts/interfaces/IDAOGovernorBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface IDAOGovernorBooster {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Queued,\\n        Failed,\\n        Expired,\\n        Executed\\n    }\\n\\n    struct Proposal {\\n        string uri;\\n        uint256 id;\\n        bytes32 hash;\\n        uint256 start;\\n        uint256 end;\\n        uint256 minVoters;\\n        uint256 minVotes;\\n        ProposalState state;\\n    }\\n\\n    struct ProposalParameter {\\n        string uri;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    struct Vote {\\n        uint256 totalVoters;\\n        uint256 totalVotes;\\n    }\\n\\n    struct PassStake {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint8 duration; // duartion in day\\n    }\\n\\n    struct StakeRecord {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint256 point;\\n        uint256 stakeAt;\\n        uint256 expiry;\\n    }\\n\\n    /************************* EVENTS *************************/\\n    event CreateGovernor(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        uint256[] multipers,\\n        address admin\\n    );\\n\\n    event ProposalCreated(uint256 indexed projectId, address indexed from, uint256 proposalId);\\n\\n    event ExecuteProposal(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 proposalId,\\n        uint8 proposalResult\\n    );\\n\\n    event StakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    event UnStakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* ERRORS *************************/\\n    error InsufficientBalance();\\n    error UnknowProposal();\\n    error BadPeriod();\\n    error InvalidSignature();\\n    error TransactionNotMatch();\\n    error TransactionReverted();\\n    error NotProjectOwner();\\n    error BadAmount();\\n    error NotExpired();\\n    error InvalidRecord();\\n\\n    function createGovernor(\\n        uint256 _projectId,\\n        uint256[] calldata _multipers,\\n        address _membershipPass,\\n        address _admin\\n    ) external;\\n\\n    function propose(\\n        uint256 _projectId,\\n        ProposalParameter calldata _properties,\\n        address _target,\\n        uint256 _value,\\n        string calldata _signature,\\n        bytes calldata _calldata\\n    ) external payable;\\n\\n    function execute(\\n        uint256 _projectId,\\n        uint256 _proposalId,\\n        uint8 _proposeResult,\\n        bytes memory _signatureBySigner,\\n        address _target,\\n        uint256 _value,\\n        string memory _signature,\\n        bytes memory _data\\n    ) external returns (bytes memory);\\n\\n    function stakePass(uint256 _projectId, PassStake[] memory _membershipPass)\\n        external\\n        returns (uint256);\\n\\n    function unStakePass(uint256 _projectId, uint256[] memory _recordIds)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x258499e39d0b1a64842d006d6289dcd437442024c964683049856c3385cf969b\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum FundingCycleState {\\n    WarmUp,\\n    Active,\\n    Expired\\n}\\n\\nstruct Metadata {\\n    // The unique handle name for the DAO\\n    bytes32 handle;\\n    // The NFT token address of Customized Boosters\\n    address[] customBoosters;\\n    // The multipliers of customized NFT \\n    uint16[] boosterMultipliers;\\n}\\n\\nstruct AuctionedPass {\\n    // tier id, indexed from 0\\n    uint256 id;\\n    // sale price in wei\\n    uint256 salePrice;\\n    // the amount of tickets open for sale in this round\\n    uint256 saleAmount;\\n    // the amount of tickets airdroped to community\\n    uint256 communityAmount;\\n    // who own the community vouchers can free mint the community ticket\\n    address communityVoucher;\\n    // the amount of tickets reserved to next round\\n    uint256 reservedAmount;\\n}\\n\\n// 1st funding cycle:\\n// gold ticket (erc1155) :  11 salePrice 1 reserveampiunt\\n\\n// silver ticket: 10 salePrice  2 reserveampiunt\\n\\nstruct FundingCycleProperties {\\n    uint256 id;\\n    uint256 projectId;\\n    uint256 previousId;\\n    uint256 start;\\n    uint256 target;\\n    uint256 lockRate;\\n    uint16 duration;\\n    bool isPaused;\\n    uint256 cycleLimit;\\n}\\n\\nstruct FundingCycleParameter {\\n    // rate to be locked in treasury 1000 -> 10% 9999 -> 99.99%\\n    uint16 lockRate;\\n    uint16 duration;\\n    uint256 cycleLimit;\\n    uint256 target;\\n}\\n\\ninterface IFundingCycles {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event FundingCycleExist(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 tapAmount\\n    );\\n\\n    event Unlock(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 unlockAmount,\\n        uint256 totalUnlockedAmount\\n    );\\n\\n    event Init(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 previous,\\n        uint256 start,\\n        uint256 duration,\\n        uint256 target,\\n        uint256 lockRate\\n    );\\n\\n    event InitAuctionedPass(\\n        uint256 indexed fundingCycleId,\\n        AuctionedPass autionPass\\n    );\\n\\n    event UpdateLocked(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 depositAmount,\\n        uint256 totalDepositedAmount\\n    );\\n\\n    error InsufficientBalance();\\n    error BadCycleLimit();\\n    error BadDuration();\\n    error BadLockRate();\\n\\n\\n    // === External View  === // \\n    function latestIdFundingProject(uint256 _projectId) external view returns (uint256);\\n\\n    function count() external view returns (uint256);\\n\\n    function MAX_CYCLE_LIMIT() external view returns (uint8);\\n\\n    function getFundingCycle(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (FundingCycleProperties memory);\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] memory _auctionedPass\\n    ) external returns (FundingCycleProperties memory);\\n\\n    // === External Transactions === //\\n    function currentOf(uint256 _projectId) external view returns (FundingCycleProperties memory);\\n\\n    function setPauseFundingCycle(uint256 _projectId, bool _paused) external returns (bool);\\n\\n    function updateLocked(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function tap(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function unlock(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function getTappableAmount(uint256 _fundingCycleId) external view returns (uint256);\\n\\n    function getFundingCycleState(uint256 _fundingCycleId) external view returns (FundingCycleState);\\n\\n    function getAutionedPass(uint256 _fundingCycleId, uint256 _tierId) external view returns(AuctionedPass memory);\\n}\\n\",\"keccak256\":\"0x6484d0141cbc7e714d990f3b2567de8b882fbbd165fca65bff29e58835d873ee\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"./IConfigStore.sol\\\";\\n\\ninterface IMembershipPass is IERC1155, IERC2981 {\\n    event MintPass(address indexed recepient, uint256 indexed tier, uint256 amount);\\n\\n    event BatchMintPass(address indexed recepient, uint256[] tiers, uint256[] amounts);\\n\\n    error TierNotSet();\\n    error TierUnknow();\\n    error BadCapacity();\\n    error BadFee();\\n    error InsufficientBalance();\\n\\n    function feeCollector() external view returns (address);\\n\\n    function configStore() external view returns (IConfigStore);\\n\\n    /**\\n     * @notice\\n     * Implement ERC2981, but actually the most marketplaces have their own royalty logic\\n     */\\n    function royaltyInfo(uint256 _tier, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount);\\n\\n    function mintPassForMember(\\n        address _recepient,\\n        uint256 _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function batchMintPassForMember(\\n        address _recepient,\\n        uint256[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function updateFeeCollector(address _feeCollector) external;\\n}\\n\",\"keccak256\":\"0xf654e0174cc10dd42df8022d58ee56e13001d985fae8d387761b2a33d93a72f2\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPassBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IMembershipPass} from \\\"./IMembershipPass.sol\\\";\\nimport {IRoyaltyDistributor} from \\\"./IRoyaltyDistributor.sol\\\";\\n\\nstruct PayInfoWithWeight {\\n    uint256 tier;\\n    uint256 amount;\\n    uint256 weight;\\n}\\nstruct WeightInfo {\\n    uint256 amount;\\n    uint256 sqrtWeight;\\n}\\n\\ninterface IMembershipPassBooth {\\n    error ProjectNotExist();\\n\\n    /************************* EVENTS *************************/\\n    event Issue(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        address royaltyDistributor,\\n        uint256[] tierFee,\\n        uint256[] tierCapacity,\\n        uint256[] multipers\\n    );\\n\\n    event BatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event AirdropBatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event DistributeRoyaltyFee(\\n        uint256 indexed projectId,\\n        uint256 merkleRootId,\\n        uint256 distributeAmount,\\n        uint256 distributeAt,\\n        string ipfsHash\\n    );\\n\\n    event ClaimRoyaltyFee(\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256[] merkleRootIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* VIEW FUNCTIONS *************************/\\n    function tierSizeOf(uint256 _projectId) external view returns (uint256);\\n\\n    function membershipPassOf(uint256 _projectId) external view returns (IMembershipPass);\\n\\n    function royaltyDistributorOf(uint256 _projectId) external view returns (IRoyaltyDistributor);\\n\\n    function totalBiddingAmountBy(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function totalSqrtWeightBy(uint256 _fundingCycleId, uint256 _tierId) external returns (uint256);\\n\\n    function depositedWeightBy(\\n        address _from,\\n        uint256 _fundingCycleId,\\n        uint256 _tierId\\n    ) external view returns (uint256, uint256);\\n\\n    function claimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedAmountOf(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function issue(\\n        uint256 _projectId,\\n        uint256[] calldata _tierFees,\\n        uint256[] calldata _tierCapacities,\\n        uint256[] calldata _multipers\\n    ) external returns (address);\\n\\n    function stake(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        PayInfoWithWeight[] memory _payInfo\\n    ) external;\\n\\n    function batchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function airdropBatchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _tierIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function getUserAllocation(\\n        address _user,\\n        uint256 _projectId,\\n        uint256 _fundingCycleId\\n    ) external view returns (uint256[] memory);\\n\\n    function getEstimatingUserAllocation(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256[] memory _biddingAmounts,\\n        uint256[] memory _weights\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x10b7b89b5f936b530876f2bf4bca290ed1d8d3185acbafde39677de07787513a\",\"license\":\"MIT\"},\"contracts/interfaces/IPayoutStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\nstruct PayoutMod {\\n    uint16 percent;\\n    address payable beneficiary;\\n}\\n\\n\\ninterface IPayoutStore {\\n\\n    error BadPercentage();\\n    error BadTotalPercentage();\\n    error BadAddress();\\n    error NoOp();\\n\\n    event SetPayoutMod(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        PayoutMod mod,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function payoutModsOf(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (PayoutMod[] memory);\\n\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        PayoutMod[] memory _mods\\n    ) external;\\n\\n}\",\"keccak256\":\"0x1a96678a4018df454e854662c50c26682fed9602d567d883f1a69b99c8c0bbeb\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    error EmptyHandle();\\n    error TakenedHandle();\\n    error UnAuthorized();\\n\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 handle,\\n        address caller\\n    );\\n\\n    event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n    event SetBaseURI(string baseURI);\\n\\n    function count() external view returns (uint256);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n    \\n    function setBaseURI(string memory _uri) external;\\n}\\n\",\"keccak256\":\"0x3e81d01ea05c8a60c23fde7c7b565803d1f1788e6c3268f7626d42de02fd887e\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRoyaltyDistributor {\\n    error UnAuthorized();\\n    error MerkleRootExist();\\n    error BadBalance();\\n    error AlreadyClaimed();\\n    error SizeNotMatch();\\n\\n    function claimRoyaltyFee(\\n        address _from,\\n        uint256[] calldata _merkleRootIds,\\n        bytes32[][] memory _merkleProofs,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function distributeRoyaltyFee(uint256 _distributeAmount, bytes32 _merkleRoot)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9e54d786817c13b074c78fe77c4c02e0a7e7cb04220e2e2fdfa38c80bd52ab4\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IFundingCycles.sol\\\";\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./IBluechipsBooster.sol\\\";\\nimport \\\"./IDAOGovernorBooster.sol\\\";\\nimport \\\"./IMembershipPassBooth.sol\\\";\\nimport \\\"./IPayoutStore.sol\\\";\\n\\nstruct ImmutablePassTier {\\n    uint256 tierFee;\\n    uint256 multiplier;\\n    uint256 tierCapacity;\\n}\\n\\ninterface ITerminal {\\n    event Pay(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256[] tiers,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Airdrop(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256[] tierIds,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Claim(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 refundAmount,\\n        uint256[] offeringAmounts\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 govFeeAmount,\\n        uint256 netTransferAmount\\n    );\\n\\n    event AddToBalance(uint256 indexed projectId, uint256 amount, address beneficiary);\\n\\n    event UnlockTreasury(uint256 indexed projectId, uint256 unlockAmount);\\n\\n    event SetTapFee(uint256 fee);\\n\\n    event SetContributeFee(uint256 fee);\\n\\n    event SetMinLockRate(uint256 minLockRate);\\n\\n    event DistributeToPayoutMod(uint256 indexed projectId, uint256 indexed fundingCycleId, PayoutMod mod, uint256 amount, address receiver);\\n\\n    error Voucher721(address _voucher);\\n    error NoCommunityTicketLeft();\\n    error FundingCycleNotExist();\\n    error FundingCyclePaused();\\n    error FundingCycleActived();\\n    error InsufficientBalance();\\n    error AlreadyClaimed();\\n    error ZeroAddress();\\n    error BadOperationPeriod();\\n    error OnlyGovernor();\\n    error UnAuthorized();\\n    error LastWeightMustBe1();\\n    error BadPayment();\\n    error BadAmount();\\n    error BadLockRate();\\n    error BadTapFee();\\n\\n    function superAdmin() external view returns (address);\\n\\n    function tapFee() external view returns (uint256);\\n\\n    function contributeFee() external view returns (uint256);\\n\\n    function devTreasury() external view returns (address);\\n\\n    function minLockRate() external view returns (uint256);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function fundingCycles() external view returns (IFundingCycles);\\n\\n    function membershipPassBooth() external view returns (IMembershipPassBooth);\\n\\n    function daoGovernorBooster() external view returns (IDAOGovernorBooster);\\n\\n    function bluechipsBooster() external view returns (IBluechipsBooster);\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n    function payoutStore() external view returns (IPayoutStore);\\n\\n    function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n    function addToBalance(uint256 _projectId) external payable;\\n\\n    function setTapFee(uint256 _fee) external;\\n\\n    function setContributeFee(uint256 _fee) external;\\n\\n    function setMinLockRate(uint256 _minLockRate) external;\\n\\n    function createDao(\\n        Metadata memory _metadata,\\n        ImmutablePassTier[] calldata _tiers,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] memory _payoutMods\\n    ) external;\\n\\n    function createNewFundingCycle(\\n        uint256 projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] calldata _payoutMod\\n    ) external;\\n\\n    function contribute(\\n        uint256 _projectId,\\n        uint256[] memory _tiers,\\n        uint256[] memory _amounts,\\n        string memory _memo\\n    ) external payable;\\n\\n    function communityContribute(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        string memory _memo\\n    ) external;\\n\\n    function claimPassOrRefund(uint256 _projectId, uint256 _fundingCycleId) external;\\n\\n    function tap(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unLockTreasury(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _unlockAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc567bfe1f856ef4975f3a466a6f091eff22e8d5a8c6473d6b0ab6b340bf0206d\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    error ZeroAddress();\\n    error UnAuthorized();\\n    error UnknowTerminal();\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x6cc378750f4f01d98e587014e0ae7815d75788ab4741e5020cc0dd12815e5583\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506145e5806100206000396000f3fe6080604052600436106101cd5760003560e01c80638a19e355116100f7578063b19ab07611610095578063d8044c7611610064578063d8044c7614610523578063ecd958dc14610543578063f2b6378714610563578063f5e95acb1461059357600080fd5b8063b19ab076146104a2578063b1f8cc97146104c2578063c2368e37146104e2578063d512e1d51461050257600080fd5b806398f23ea2116100d157806398f23ea2146104115780639cc7f70814610427578063adb817ec14610454578063ae91719f1461047457600080fd5b80638a19e355146103be5780638b79543c146103d15780639417ecbd146103f157600080fd5b8063426b0b591161016f5780636abcf8e31161013e5780636abcf8e31461033e5780637a206fc61461035e5780637b2fe4ad1461037e578063882af6671461039e57600080fd5b8063426b0b59146102be57806342bbcec1146102de578063506df65b146102fe5780635990bad41461031e57600080fd5b806329575f6a116101ab57806329575f6a146102485780632e163fe014610268578063379e90681461027e5780633e8e2cf91461029e57600080fd5b80631c7a7e14146101d25780631e9db9ab146101fb57806320748dd514610210575b600080fd5b3480156101de57600080fd5b506101e860355481565b6040519081526020015b60405180910390f35b61020e610209366004613c95565b6105b3565b005b34801561021c57600080fd5b50603b54610230906001600160a01b031681565b6040516001600160a01b0390911681526020016101f2565b34801561025457600080fd5b50603354610230906001600160a01b031681565b34801561027457600080fd5b506101e860375481565b34801561028a57600080fd5b50603c54610230906001600160a01b031681565b3480156102aa57600080fd5b5061020e6102b9366004613c65565b610b38565b3480156102ca57600080fd5b50603f54610230906001600160a01b031681565b3480156102ea57600080fd5b5061020e6102f9366004613eac565b610b9f565b34801561030a57600080fd5b5061020e610319366004613eac565b610dea565b34801561032a57600080fd5b5061020e610339366004613e69565b61131c565b34801561034a57600080fd5b50603e54610230906001600160a01b031681565b34801561036a57600080fd5b5061020e610379366004613c65565b6118b0565b34801561038a57600080fd5b5061020e610399366004613d51565b611932565b3480156103aa57600080fd5b50603a54610230906001600160a01b031681565b61020e6103cc366004613c65565b611b8e565b3480156103dd57600080fd5b50603954610230906001600160a01b031681565b3480156103fd57600080fd5b50603d54610230906001600160a01b031681565b34801561041d57600080fd5b506101e860345481565b34801561043357600080fd5b506101e8610442366004613c65565b60386020526000908152604090205481565b34801561046057600080fd5b5061020e61046f366004613dd8565b611c1c565b34801561048057600080fd5b5061049461048f366004613e1c565b611fc9565b6040516101f2929190613f5c565b3480156104ae57600080fd5b50603654610230906001600160a01b031681565b3480156104ce57600080fd5b5061020e6104dd366004613c65565b6122a1565b3480156104ee57600080fd5b506101e86104fd3660046137f9565b612301565b34801561050e57600080fd5b506101e861051d366004613c65565b50600090565b34801561052f57600080fd5b5061049461053e3660046137f9565b61249e565b34801561054f57600080fd5b5061020e61055e366004613b74565b6126e3565b34801561056f57600080fd5b5061058361057e366004613d22565b61288b565b60405190151581526020016101f2565b34801561059f57600080fd5b5061020e6105ae366004613994565b6129df565b603a546040516321d1336160e11b8152600481018690526000916001600160a01b0316906343a266c2906024016101206040518083038186803b1580156105f957600080fd5b505afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106319190613aee565b805190915080610654576040516392cadd9760e01b815260040160405180910390fd5b603a54604051633842770b60e11b8152600481018390526001916001600160a01b031690637084ee169060240160206040518083038186803b15801561069957600080fd5b505afa1580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190613a4f565b60028111156106f057634e487b7160e01b600052602160045260246000fd5b1461070e57604051638179537560e01b815260040160405180910390fd5b8160e0015115610731576040516349b5e0d160e01b815260040160405180910390fd5b83518551146107535760405163bdbbb53360e01b815260040160405180910390fd5b60008086516001600160401b0381111561077d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156107d257816020015b6107bf60405180606001604052806000815260200160008152602001600081525090565b81526020019060019003908161079b5790505b50905060005b875181101561098657603a5488516000916001600160a01b031690636f336d229087908c908690811061081b57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610849929190918252602082015260400190565b60c06040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190613a6e565b90506108e36108dc82602001518a85815181106108c657634e487b7160e01b600052603260045260246000fd5b6020026020010151612bf890919063ffffffff16565b8590612c04565b935060405180606001604052808a848151811061091057634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200189848151811061093d57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001826020015181525083838151811061097257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152506001016107d8565b5060006109a96109a26064603554612c1090919063ffffffff16565b8490612bf8565b90506109b58382612c04565b3410156109d557604051631e9acf1760e31b815260040160405180910390fd5b603a5460405163038b8dd760e11b8152600481018b905260248101869052604481018590526001600160a01b03909116906307171bae90606401600060405180830381600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b5050603654610a5892506001600160a01b0316905082612c1c565b60008981526038602052604081208054859290610a769084906144df565b9091555050603b546040516313307b6160e21b815233916001600160a01b031690634cc1ed8490610ab1908d90899086908990600401614261565b600060405180830381600087803b158015610acb57600080fd5b505af1158015610adf573d6000803e3d6000fd5b50505050806001600160a01b0316858b7fc5b456166a7a575fb3c52d7cca0d0b228bc381a279ce887cb6eea1166243d9d4878d8d8d604051610b249493929190614154565b60405180910390a450505050505050505050565b6033546001600160a01b03163314610b635760405163be24598360e01b815260040160405180910390fd5b60358190556040518181527fcaec6d496fdfb43ed3f5e30e20eca7da329967e239c012ede5900e82251d0c8b906020015b60405180910390a150565b603a54604051635172bb2360e11b815260048101849052849184916000916001600160a01b03169063a2e57646906024016101206040518083038186803b158015610be957600080fd5b505afa158015610bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c219190613aee565b9050821580610c34575082816020015114155b15610c52576040516392cadd9760e01b815260040160405180910390fd5b84600280603a54604051633842770b60e11b8152600481018590526001600160a01b0390911690637084ee169060240160206040518083038186803b158015610c9a57600080fd5b505afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190613a4f565b6002811115610cf157634e487b7160e01b600052602160045260246000fd5b14610d0f57604051638179537560e01b815260040160405180910390fd5b603c546001600160a01b03163314610d3a5760405163070545c960e51b815260040160405180910390fd5b603a54604051633d5ca87560e11b8152600481018a905260248101899052604481018890526001600160a01b0390911690637ab950ea90606401600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b50505050877f48eff2839dc2714dcdb7db8f8de267cb04a9d086db45ea42312e8b5b81eb0a6387604051610dd891815260200190565b60405180910390a25050505050505050565b60026001541415610e425760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155603a54604051635172bb2360e11b815260048101849052849184916000916001600160a01b03169063a2e57646906024016101206040518083038186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec99190613aee565b9050821580610edc575082816020015114155b15610efa576040516392cadd9760e01b815260040160405180910390fd5b84600280603a54604051633842770b60e11b8152600481018590526001600160a01b0390911690637084ee169060240160206040518083038186803b158015610f4257600080fd5b505afa158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190613a4f565b6002811115610f9957634e487b7160e01b600052602160045260246000fd5b14610fb757604051638179537560e01b815260040160405180910390fd5b6039546040516331a9108f60e11b8152600481018a90526001600160a01b0390911690636352211e9060240160206040518083038186803b158015610ffb57600080fd5b505afa15801561100f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103391906137dd565b6001600160a01b0316336001600160a01b0316146110645760405163be24598360e01b815260040160405180910390fd5b603a54604051633842770b60e11b8152600481018990526002916001600160a01b031690637084ee169060240160206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190613a4f565b600281111561110057634e487b7160e01b600052602160045260246000fd5b1461111e57604051638179537560e01b815260040160405180910390fd5b6000888152603860205260409020548087111561114e57604051631e9acf1760e31b815260040160405180910390fd5b603a5460405163506df65b60e01b8152600481018b9052602481018a9052604481018990526001600160a01b039091169063506df65b90606401600060405180830381600087803b1580156111a257600080fd5b505af11580156111b6573d6000803e3d6000fd5b5050505086816111c69190614536565b60008a8152603860205260408120919091556034546111f3906064906111ed908b90612bf8565b90612c10565b905060006112018983612d3a565b60365490915061121a906001600160a01b031683612c1c565b60006112278c8c84612d46565b6039546040516331a9108f60e11b8152600481018f90529192506000916001600160a01b0390911690636352211e9060240160206040518083038186803b15801561127157600080fd5b505afa158015611285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a991906137dd565b905081156112bb576112bb8183612c1c565b336001600160a01b03168c8e7fba86cb310dba20723fcebe9b822e3d442c300588419146c035131de47cb4bf5c8787604051611301929190918252602082015260400190565b60405180910390a45050600180555050505050505050505050565b603a54604051635172bb2360e11b815260048101849052849184916000916001600160a01b03169063a2e57646906024016101206040518083038186803b15801561136657600080fd5b505afa15801561137a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139e9190613aee565b90508215806113b1575082816020015114155b156113cf576040516392cadd9760e01b815260040160405180910390fd5b603b54604051631c645c9f60e01b8152336004820181905260248201889052916001600160a01b031690631c645c9f90604401602060405180830381600087803b15801561141c57600080fd5b505af1158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190613978565b1561147257604051630c8d9eab60e31b815260040160405180910390fd5b603b5460405163fe0d584d60e01b8152600481018990526000916001600160a01b03169063fe0d584d9060240160206040518083038186803b1580156114b757600080fd5b505afa1580156114cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ef9190613c7d565b90506000816001600160401b0381111561151957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611542578160200160208202803683370190505b5090506000826001600160401b0381111561156d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611596578160200160208202803683370190505b50905060005b838110156117e757603a54604051633799b69160e11b8152600481018c9052602481018390526000916001600160a01b031690636f336d229060440160c06040518083038186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190613a6e565b9050806000015184838151811061164f57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600083838151811061167d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015260808101516040516370a0823160e01b81526001600160a01b03888116600483015260009216906370a082319060240160206040518083038186803b1580156116d057600080fd5b505afa1580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117089190613c7d565b1180156117aa5750603b548151604051630708d0c760e21b8152600481018e905260248101919091526000916001600160a01b031690631c23431c90604401602060405180830381600087803b15801561176157600080fd5b505af1158015611775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117999190613c7d565b82606001516117a89190614536565b115b156117de5760018383815181106117d157634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5060010161159c565b508151611807576040516345ab780760e01b815260040160405180910390fd5b603b54604051630aaf90f160e31b81526001600160a01b039091169063557c87889061183f908d908d90899088908890600401614306565b600060405180830381600087803b15801561185957600080fd5b505af115801561186d573d6000803e3d6000fd5b50505050836001600160a01b0316898b7f2ddfc660215ae9e66dec4b7f281af2e454fcea9356c8a3470d2ee3fe1c01a62985858d604051610b2493929190613f8a565b6033546001600160a01b031633146118db5760405163be24598360e01b815260040160405180910390fd5b600a8111156118fd57604051637f16ee6b60e01b815260040160405180910390fd5b60348190556040518181527f4cad663e6c336dd2ca0939462d65a0e2c9abcfb89d09e3886de41c3d67b2671990602001610b94565b6039546040516331a9108f60e11b8152600481018890526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561197657600080fd5b505afa15801561198a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ae91906137dd565b6001600160a01b0316336001600160a01b0316146119df5760405163be24598360e01b815260040160405180910390fd5b6119ea848487612eb8565b603a54604051631137edad60e11b8152600481018890526000916001600160a01b03169063226fdb5a9060240160206040518083038186803b158015611a2f57600080fd5b505afa158015611a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a679190613c7d565b603a54604051630638ef5160e51b81529192506000916001600160a01b039091169063c71dea2090611aa3908b908b908b908b90600401614193565b61012060405180830381600087803b158015611abe57600080fd5b505af1158015611ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af69190613aee565b8051909150821415611b1b5760405163517a3b2d60e01b815260040160405180910390fd5b603f54815160405163e5467d7f60e01b81526001600160a01b039092169163e5467d7f91611b52918c919089908990600401614351565b600060405180830381600087803b158015611b6c57600080fd5b505af1158015611b80573d6000803e3d6000fd5b505050505050505050505050565b60003411611baf5760405163749b593960e01b815260040160405180910390fd5b600081815260386020526040902054611bc99034906144df565b600082815260386020908152604091829020929092558051348152339281019290925282917f08534c4f6026a713959f9286d994e8430e6d0fd11045360abf782bacaa288d43910160405180910390a250565b60026001541415611c6f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610e39565b6002600155603a54604051635172bb2360e11b815260048101839052839183916000916001600160a01b03169063a2e57646906024016101206040518083038186803b158015611cbe57600080fd5b505afa158015611cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf69190613aee565b9050821580611d09575082816020015114155b15611d27576040516392cadd9760e01b815260040160405180910390fd5b83600280603a54604051633842770b60e11b8152600481018590526001600160a01b0390911690637084ee169060240160206040518083038186803b158015611d6f57600080fd5b505afa158015611d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da79190613a4f565b6002811115611dc657634e487b7160e01b600052602160045260246000fd5b14611de457604051638179537560e01b815260040160405180910390fd5b603b5460405163c12c3f0760e01b8152336004820181905260248201899052916001600160a01b03169063c12c3f0790604401602060405180830381600087803b158015611e3157600080fd5b505af1158015611e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e699190613978565b15611e8757604051630c8d9eab60e31b815260040160405180910390fd5b6000611e94828a8a612301565b90508015611efe57600089815260386020526040902054811115611ecb57604051631e9acf1760e31b815260040160405180910390fd5b600089815260386020526040902054611ee5908290614536565b60008a815260386020526040902055611efe8282612c1c565b6000611f0b838b8b61249e565b50603b5460405162c4aa6b60e71b81529192506001600160a01b031690636255358090611f42908d908d90889087906004016142d9565b600060405180830381600087803b158015611f5c57600080fd5b505af1158015611f70573d6000803e3d6000fd5b50505050826001600160a01b0316898b7f3a0da244be3f3ca6524dd79d1fc42da08544979abcf3931fcbb784a1afa8117c8585604051611fb19291906140af565b60405180910390a45050600180555050505050505050565b606080600083516001600160401b03811115611ff557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561201e578160200160208202803683370190505b50905060005b845181101561211957603a54604051633799b69160e11b815260048101889052602481018390526001600160a01b0390911690636f336d229060440160c06040518083038186803b15801561207857600080fd5b505afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b09190613a6e565b602001518582815181106120d457634e487b7160e01b600052603260045260246000fd5b60200260200101516120e69190614517565b82828151811061210657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600101612024565b50603b54604051632ac1ca4960e01b81526001600160a01b0390911690632ac1ca49906121509089908990899087906004016143c9565b60006040518083038186803b15801561216857600080fd5b505afa15801561217c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121a491908101906138f2565b915060005b825181101561229757603a54604051633799b69160e11b8152600481018890526024810183905261226491620f4240916111ed916001600160a01b031690636f336d229060440160c06040518083038186803b15801561220857600080fd5b505afa15801561221c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122409190613a6e565b604001518685815181106108c657634e487b7160e01b600052603260045260246000fd5b84828151811061228457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001016121a9565b5050935093915050565b6033546001600160a01b031633146122cc5760405163be24598360e01b815260040160405180910390fd5b60378190556040518181527f1887639addea89c07fe268468b61db3c0974a6328dd70d1ab60d24cade98977790602001610b94565b60008061230f85858561249e565b50905060005b815181101561249557603b5460405163442012c360e01b81526001600160a01b0388811660048301526024820187905260448201849052600092169063442012c390606401604080518083038186803b15801561237157600080fd5b505afa158015612385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a99190613df9565b509050806123b75750612315565b603a54604051633799b69160e11b81526004810187905260248101849052612480916001600160a01b031690636f336d229060440160c06040518083038186803b15801561240457600080fd5b505afa158015612418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243c9190613a6e565b6020015161247a85858151811061246357634e487b7160e01b600052603260045260246000fd5b602002602001015184612d3a90919063ffffffff16565b90612bf8565b61248a90856144df565b935050600101612315565b50509392505050565b603b5460405163256e8b2760e01b81526001600160a01b0385811660048301526024820185905260448201849052606092839291169063256e8b279060640160006040518083038186803b1580156124f557600080fd5b505afa158015612509573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261253191908101906138f2565b905080516001600160401b0381111561255a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612583578160200160208202803683370190505b50915060005b81518110156126da578181815181106125b257634e487b7160e01b600052603260045260246000fd5b6020026020010151600014156125f55760008382815181106125e457634e487b7160e01b600052603260045260246000fd5b602002602001018181525050612589565b603a54604051633799b69160e11b815260048101869052602481018390526126a791620f4240916111ed916001600160a01b031690636f336d229060440160c06040518083038186803b15801561264b57600080fd5b505afa15801561265f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126839190613a6e565b604001518585815181106108c657634e487b7160e01b600052603260045260246000fd5b8382815181106126c757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600101612589565b50935093915050565b6126ee848487612eb8565b60395460405163e8f830cb60e01b8152336004820152893560248201523060448201526000916001600160a01b03169063e8f830cb90606401602060405180830381600087803b15801561274157600080fd5b505af1158015612755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127799190613c7d565b9050612789818a8a8a8989613067565b603a54604051630638ef5160e51b81526000916001600160a01b03169063c71dea20906127c09085908b908b908b90600401614193565b61012060405180830381600087803b1580156127db57600080fd5b505af11580156127ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128139190613aee565b603f54815160405163e5467d7f60e01b81529293506001600160a01b039091169163e5467d7f9161284d9186919089908990600401614351565b600060405180830381600087803b15801561286757600080fd5b505af115801561287b573d6000803e3d6000fd5b5050505050505050505050505050565b6039546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e9060240160206040518083038186803b1580156128d057600080fd5b505afa1580156128e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290891906137dd565b6001600160a01b0316336001600160a01b03161415801561293457506033546001600160a01b03163314155b156129525760405163be24598360e01b815260040160405180910390fd5b603a54604051635f63e5ed60e11b81526004810185905283151560248201526001600160a01b039091169063bec7cbda90604401602060405180830381600087803b1580156129a057600080fd5b505af11580156129b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d89190613978565b9392505050565b600054610100900460ff166129fa5760005460ff16156129fe565b303b155b612a615760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e39565b600054610100900460ff16158015612a83576000805461ffff19166101011790555b6001600160a01b038a161580612aa057506001600160a01b038916155b80612ab257506001600160a01b038816155b80612ac457506001600160a01b038716155b80612ad657506001600160a01b038616155b80612ae857506001600160a01b038516155b80612afa57506001600160a01b038416155b80612b0c57506001600160a01b038316155b80612b1e57506001600160a01b038216155b15612b3c5760405163d92e233d60e01b815260040160405180910390fd5b612b446134af565b603980546001600160a01b03199081166001600160a01b038d811691909117909255603a805482168c8416179055603b805482168b8416179055603c805482168a8416179055603e80548216898416179055603d80548216888416179055603680548216868416179055603f8054821687841617905560338054909116918416919091179055600160355560046034556113886037558015612bec576000805461ff00191690555b50505050505050505050565b60006129d88284614517565b60006129d882846144df565b60006129d882846144f7565b80471015612c6c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610e39565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612cb9576040519150601f19603f3d011682016040523d82523d6000602084013e612cbe565b606091505b5050905080612d355760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610e39565b505050565b60006129d88284614536565b603f54604051633f9ea14960e21b81526004810184905282916000916001600160a01b039091169063fe7a85249060240160006040518083038186803b158015612d8f57600080fd5b505afa158015612da3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612dcb919081019061382d565b9050805160001415612ddd57506129d8565b60005b8151811015612495576000828281518110612e0b57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000612e2c86836000015161ffff166127106134e0565b90508015612e4257612e42826020015182612c1c565b612e4c8186614536565b60408051845161ffff1681526020808601516001600160a01b031690820152908101839052336060820152909550600190930192889088907fb617d9bda163028dfa8583222665603f72a701523b2e5aa7c449ab1dd1caa8039060800160405180910390a35050612de0565b60005b82811015613033576000848483818110612ee557634e487b7160e01b600052603260045260246000fd5b905060c002016080016020810190612efd91906137c1565b6001600160a01b031614158015612fc95750838382818110612f2f57634e487b7160e01b600052603260045260246000fd5b905060c002016080016020810190612f4791906137c1565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b0391909116906301ffc9a79060240160206040518083038186803b158015612f8f57600080fd5b505afa158015612fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc79190613978565b155b1561302b57838382818110612fee57634e487b7160e01b600052603260045260246000fd5b905060c00201608001602081019061300691906137c1565b604051634f8b719960e01b81526001600160a01b039091166004820152602401610e39565b600101612ebb565b506037546130446020830183613c49565b61ffff161015612d3557604051632e0e8e6760e11b815260040160405180910390fd5b6000836001600160401b0381111561308f57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156130b8578160200160208202803683370190505b5090506000846001600160401b038111156130e357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561310c578160200160208202803683370190505b5090506000856001600160401b0381111561313757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613160578160200160208202803683370190505b50905060005b868110156133525787878281811061318e57634e487b7160e01b600052603260045260246000fd5b905060600201604001358686838181106131b857634e487b7160e01b600052603260045260246000fd5b905060c0020160a001358787848181106131e257634e487b7160e01b600052603260045260246000fd5b905060c002016060013588888581811061320c57634e487b7160e01b600052603260045260246000fd5b905060c002016040013561322091906144df565b61322a91906144df565b111561324957604051631e9acf1760e31b815260040160405180910390fd5b87878281811061326957634e487b7160e01b600052603260045260246000fd5b9050606002016000013584828151811061329357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508787828181106132bf57634e487b7160e01b600052603260045260246000fd5b905060600201604001358382815181106132e957634e487b7160e01b600052603260045260246000fd5b60200260200101818152505087878281811061331557634e487b7160e01b600052603260045260246000fd5b9050606002016020013582828151811061333f57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600101613166565b50603b546040516359105c3360e11b81526000916001600160a01b03169063b220b8669061338a908d9088908890889060040161410a565b602060405180830381600087803b1580156133a457600080fd5b505af11580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc91906137dd565b603c5460335460405163339d237960e11b81529293506001600160a01b039182169263673a46f292613418928f928892889216906004016140d0565b600060405180830381600087803b15801561343257600080fd5b505af1158015613446573d6000803e3d6000fd5b506000925061345b91505060208b018b6143fa565b90501115612bec57603d546001600160a01b0316630e42eb698b61348260208d018d6143fa565b61348f60408f018f6143fa565b6040518663ffffffff1660e01b815260040161284d959493929190614018565b600054610100900460ff166134d65760405162461bcd60e51b8152600401610e3990613fcd565b6134de6135bc565b565b6000808060001985870985870292508281108382030391505080600014156135295783828161351f57634e487b7160e01b600052601260045260246000fd5b04925050506129d8565b83811061355357604051631dcf306360e21b81526004810182905260248101859052604401610e39565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600054610100900460ff166135e35760405162461bcd60e51b8152600401610e3990613fcd565b60018055565b60008083601f8401126135fa578182fd5b5081356001600160401b03811115613610578182fd5b60208301915083602060c08302850101111561362b57600080fd5b9250929050565b60008083601f840112613643578182fd5b5081356001600160401b03811115613659578182fd5b60208301915083602060608302850101111561362b57600080fd5b60008083601f840112613685578182fd5b5081356001600160401b0381111561369b578182fd5b6020830191508360208260061b850101111561362b57600080fd5b600082601f8301126136c6578081fd5b813560206136db6136d6836144bc565b61448c565b80838252828201915082860187848660051b89010111156136fa578586fd5b855b85811015613718578135845292840192908401906001016136fc565b5090979650505050505050565b805161373081614591565b919050565b600082601f830112613745578081fd5b81356001600160401b0381111561375e5761375e614563565b613771601f8201601f191660200161448c565b818152846020838601011115613785578283fd5b816020850160208301379081016020019190915292915050565b6000608082840312156137b0578081fd5b50919050565b80516137308161459f565b6000602082840312156137d2578081fd5b81356129d881614579565b6000602082840312156137ee578081fd5b81516129d881614579565b60008060006060848603121561380d578182fd5b833561381881614579565b95602085013595506040909401359392505050565b6000602080838503121561383f578182fd5b82516001600160401b03811115613854578283fd5b8301601f81018513613864578283fd5b80516138726136d6826144bc565b80828252848201915084840188868560061b8701011115613891578687fd5b8694505b838510156138e657604080828b0312156138ad578788fd5b6138b5614441565b82516138c08161459f565b8152828801516138cf81614579565b818901528452600195909501949286019201613895565b50979650505050505050565b60006020808385031215613904578182fd5b82516001600160401b03811115613919578283fd5b8301601f81018513613929578283fd5b80516139376136d6826144bc565b80828252848201915084840188868560051b8701011115613956578687fd5b8694505b838510156138e657805183526001949094019391850191850161395a565b600060208284031215613989578081fd5b81516129d881614591565b60008060008060008060008060006101208a8c0312156139b2578687fd5b89356139bd81614579565b985060208a01356139cd81614579565b975060408a01356139dd81614579565b965060608a01356139ed81614579565b955060808a01356139fd81614579565b945060a08a0135613a0d81614579565b935060c08a0135613a1d81614579565b925060e08a0135613a2d81614579565b91506101008a0135613a3e81614579565b809150509295985092959850929598565b600060208284031215613a60578081fd5b8151600381106129d8578182fd5b600060c08284031215613a7f578081fd5b60405160c081018181106001600160401b0382111715613aa157613aa1614563565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151613ad681614579565b608082015260a0928301519281019290925250919050565b60006101208284031215613b00578081fd5b613b08614469565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a0820152613b4a60c084016137b6565b60c0820152613b5b60e08401613725565b60e0820152610100928301519281019290925250919050565b600080600080600080600080610100898b031215613b90578182fd5b88356001600160401b0380821115613ba6578384fd5b908a01906060828d031215613bb9578384fd5b90985060208a01359080821115613bce578384fd5b613bda8c838d01613632565b9099509750879150613bef8c60408d0161379f565b965060c08b0135915080821115613c04578384fd5b613c108c838d016135e9565b909650945060e08b0135915080821115613c28578384fd5b50613c358b828c01613674565b999c989b5096995094979396929594505050565b600060208284031215613c5a578081fd5b81356129d88161459f565b600060208284031215613c76578081fd5b5035919050565b600060208284031215613c8e578081fd5b5051919050565b60008060008060808587031215613caa578182fd5b8435935060208501356001600160401b0380821115613cc7578384fd5b613cd3888389016136b6565b94506040870135915080821115613ce8578384fd5b613cf4888389016136b6565b93506060870135915080821115613d09578283fd5b50613d1687828801613735565b91505092959194509250565b60008060408385031215613d34578182fd5b823591506020830135613d4681614591565b809150509250929050565b60008060008060008060e08789031215613d69578384fd5b86359550613d7a886020890161379f565b945060a08701356001600160401b0380821115613d95578586fd5b613da18a838b016135e9565b909650945060c0890135915080821115613db9578384fd5b50613dc689828a01613674565b979a9699509497509295939492505050565b60008060408385031215613dea578182fd5b50508035926020909101359150565b60008060408385031215613e0b578182fd5b505080516020909101519092909150565b600080600060608486031215613e30578081fd5b833592506020840135915060408401356001600160401b03811115613e53578182fd5b613e5f868287016136b6565b9150509250925092565b600080600060608486031215613e7d578081fd5b833592506020840135915060408401356001600160401b03811115613ea0578182fd5b613e5f86828701613735565b600080600060608486031215613ec0578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b83811015613f0657815187529582019590820190600101613eea565b509495945050505050565b60008151808452815b81811015613f3657602081850181015186830182015201613f1a565b81811115613f475782602083870101525b50601f01601f19169290920160200192915050565b604081526000613f6f6040830185613ed7565b8281036020840152613f818185613ed7565b95945050505050565b606081526000613f9d6060830186613ed7565b8281036020840152613faf8186613ed7565b90508281036040840152613fc38185613f11565b9695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b85815260606020808301829052908201859052600090869060808401835b8881101561406457833561404981614579565b6001600160a01b031682529282019290820190600101614036565b5084810360408601528581528101915085835b868110156140a057813561408a8161459f565b61ffff1684529282019290820190600101614077565b50919998505050505050505050565b8281526040602082015260006140c86040830184613ed7565b949350505050565b8481526080602082015260006140e96080830186613ed7565b6001600160a01b039485166040840152929093166060909101529392505050565b8481526080602082015260006141236080830186613ed7565b82810360408401526141358186613ed7565b905082810360608401526141498185613ed7565b979650505050505050565b84815260806020820152600061416d6080830186613ed7565b828103604084015261417f8186613ed7565b905082810360608401526141498185613f11565b600060c0808301878452602087356141aa8161459f565b61ffff9081168683015288820135906141c28261459f565b60408183168189015260609250808b01358389015260809150828b01358289015260a086818a0152858a875260e08a0190508b9650885b8b81101561424f57873582528688013587830152838801358483015285880135868301528488013561422a81614579565b6001600160a01b031682860152878301358383015296880196908801906001016141f9565b509d9c50505050505050505050505050565b60006080820186835260208681850152604060018060a01b03871681860152606060808187015283875180865260a0880191508489019550865b818110156142c857865180518452868101518785015285015185840152958501959183019160010161429b565b50909b9a5050505050505050505050565b84815283602082015260018060a01b0383166040820152608060608201526000613fc36080830184613ed7565b85815284602082015260018060a01b038416604082015260a06060820152600061433360a0830185613ed7565b82810360808401526143458185613ed7565b98975050505050505050565b60006060820186835260208681850152604060608186015282868452608086019050879350845b878110156143bb57843561438b8161459f565b61ffff1682528484013561439e81614579565b6001600160a01b0316828501529382019390820190600101614378565b509998505050505050505050565b8481528360208201526080604082015260006143e86080830185613ed7565b82810360608401526141498185613ed7565b6000808335601e19843603018112614410578283fd5b8301803591506001600160401b03821115614429578283fd5b6020019150600581901b360382131561362b57600080fd5b604080519081016001600160401b038111828210171561446357614463614563565b60405290565b60405161012081016001600160401b038111828210171561446357614463614563565b604051601f8201601f191681016001600160401b03811182821017156144b4576144b4614563565b604052919050565b60006001600160401b038211156144d5576144d5614563565b5060051b60200190565b600082198211156144f2576144f261454d565b500190565b60008261451257634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156145315761453161454d565b500290565b6000828210156145485761454861454d565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461458e57600080fd5b50565b801515811461458e57600080fd5b61ffff8116811461458e57600080fdfea264697066735822122060fc0a4f2b479e895590061c903b190dcf8a27cd77ae7f88d84412269655f3ac64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638a19e355116100f7578063b19ab07611610095578063d8044c7611610064578063d8044c7614610523578063ecd958dc14610543578063f2b6378714610563578063f5e95acb1461059357600080fd5b8063b19ab076146104a2578063b1f8cc97146104c2578063c2368e37146104e2578063d512e1d51461050257600080fd5b806398f23ea2116100d157806398f23ea2146104115780639cc7f70814610427578063adb817ec14610454578063ae91719f1461047457600080fd5b80638a19e355146103be5780638b79543c146103d15780639417ecbd146103f157600080fd5b8063426b0b591161016f5780636abcf8e31161013e5780636abcf8e31461033e5780637a206fc61461035e5780637b2fe4ad1461037e578063882af6671461039e57600080fd5b8063426b0b59146102be57806342bbcec1146102de578063506df65b146102fe5780635990bad41461031e57600080fd5b806329575f6a116101ab57806329575f6a146102485780632e163fe014610268578063379e90681461027e5780633e8e2cf91461029e57600080fd5b80631c7a7e14146101d25780631e9db9ab146101fb57806320748dd514610210575b600080fd5b3480156101de57600080fd5b506101e860355481565b6040519081526020015b60405180910390f35b61020e610209366004613c95565b6105b3565b005b34801561021c57600080fd5b50603b54610230906001600160a01b031681565b6040516001600160a01b0390911681526020016101f2565b34801561025457600080fd5b50603354610230906001600160a01b031681565b34801561027457600080fd5b506101e860375481565b34801561028a57600080fd5b50603c54610230906001600160a01b031681565b3480156102aa57600080fd5b5061020e6102b9366004613c65565b610b38565b3480156102ca57600080fd5b50603f54610230906001600160a01b031681565b3480156102ea57600080fd5b5061020e6102f9366004613eac565b610b9f565b34801561030a57600080fd5b5061020e610319366004613eac565b610dea565b34801561032a57600080fd5b5061020e610339366004613e69565b61131c565b34801561034a57600080fd5b50603e54610230906001600160a01b031681565b34801561036a57600080fd5b5061020e610379366004613c65565b6118b0565b34801561038a57600080fd5b5061020e610399366004613d51565b611932565b3480156103aa57600080fd5b50603a54610230906001600160a01b031681565b61020e6103cc366004613c65565b611b8e565b3480156103dd57600080fd5b50603954610230906001600160a01b031681565b3480156103fd57600080fd5b50603d54610230906001600160a01b031681565b34801561041d57600080fd5b506101e860345481565b34801561043357600080fd5b506101e8610442366004613c65565b60386020526000908152604090205481565b34801561046057600080fd5b5061020e61046f366004613dd8565b611c1c565b34801561048057600080fd5b5061049461048f366004613e1c565b611fc9565b6040516101f2929190613f5c565b3480156104ae57600080fd5b50603654610230906001600160a01b031681565b3480156104ce57600080fd5b5061020e6104dd366004613c65565b6122a1565b3480156104ee57600080fd5b506101e86104fd3660046137f9565b612301565b34801561050e57600080fd5b506101e861051d366004613c65565b50600090565b34801561052f57600080fd5b5061049461053e3660046137f9565b61249e565b34801561054f57600080fd5b5061020e61055e366004613b74565b6126e3565b34801561056f57600080fd5b5061058361057e366004613d22565b61288b565b60405190151581526020016101f2565b34801561059f57600080fd5b5061020e6105ae366004613994565b6129df565b603a546040516321d1336160e11b8152600481018690526000916001600160a01b0316906343a266c2906024016101206040518083038186803b1580156105f957600080fd5b505afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106319190613aee565b805190915080610654576040516392cadd9760e01b815260040160405180910390fd5b603a54604051633842770b60e11b8152600481018390526001916001600160a01b031690637084ee169060240160206040518083038186803b15801561069957600080fd5b505afa1580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190613a4f565b60028111156106f057634e487b7160e01b600052602160045260246000fd5b1461070e57604051638179537560e01b815260040160405180910390fd5b8160e0015115610731576040516349b5e0d160e01b815260040160405180910390fd5b83518551146107535760405163bdbbb53360e01b815260040160405180910390fd5b60008086516001600160401b0381111561077d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156107d257816020015b6107bf60405180606001604052806000815260200160008152602001600081525090565b81526020019060019003908161079b5790505b50905060005b875181101561098657603a5488516000916001600160a01b031690636f336d229087908c908690811061081b57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610849929190918252602082015260400190565b60c06040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190613a6e565b90506108e36108dc82602001518a85815181106108c657634e487b7160e01b600052603260045260246000fd5b6020026020010151612bf890919063ffffffff16565b8590612c04565b935060405180606001604052808a848151811061091057634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200189848151811061093d57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001826020015181525083838151811061097257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152506001016107d8565b5060006109a96109a26064603554612c1090919063ffffffff16565b8490612bf8565b90506109b58382612c04565b3410156109d557604051631e9acf1760e31b815260040160405180910390fd5b603a5460405163038b8dd760e11b8152600481018b905260248101869052604481018590526001600160a01b03909116906307171bae90606401600060405180830381600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b5050603654610a5892506001600160a01b0316905082612c1c565b60008981526038602052604081208054859290610a769084906144df565b9091555050603b546040516313307b6160e21b815233916001600160a01b031690634cc1ed8490610ab1908d90899086908990600401614261565b600060405180830381600087803b158015610acb57600080fd5b505af1158015610adf573d6000803e3d6000fd5b50505050806001600160a01b0316858b7fc5b456166a7a575fb3c52d7cca0d0b228bc381a279ce887cb6eea1166243d9d4878d8d8d604051610b249493929190614154565b60405180910390a450505050505050505050565b6033546001600160a01b03163314610b635760405163be24598360e01b815260040160405180910390fd5b60358190556040518181527fcaec6d496fdfb43ed3f5e30e20eca7da329967e239c012ede5900e82251d0c8b906020015b60405180910390a150565b603a54604051635172bb2360e11b815260048101849052849184916000916001600160a01b03169063a2e57646906024016101206040518083038186803b158015610be957600080fd5b505afa158015610bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c219190613aee565b9050821580610c34575082816020015114155b15610c52576040516392cadd9760e01b815260040160405180910390fd5b84600280603a54604051633842770b60e11b8152600481018590526001600160a01b0390911690637084ee169060240160206040518083038186803b158015610c9a57600080fd5b505afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190613a4f565b6002811115610cf157634e487b7160e01b600052602160045260246000fd5b14610d0f57604051638179537560e01b815260040160405180910390fd5b603c546001600160a01b03163314610d3a5760405163070545c960e51b815260040160405180910390fd5b603a54604051633d5ca87560e11b8152600481018a905260248101899052604481018890526001600160a01b0390911690637ab950ea90606401600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b50505050877f48eff2839dc2714dcdb7db8f8de267cb04a9d086db45ea42312e8b5b81eb0a6387604051610dd891815260200190565b60405180910390a25050505050505050565b60026001541415610e425760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155603a54604051635172bb2360e11b815260048101849052849184916000916001600160a01b03169063a2e57646906024016101206040518083038186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec99190613aee565b9050821580610edc575082816020015114155b15610efa576040516392cadd9760e01b815260040160405180910390fd5b84600280603a54604051633842770b60e11b8152600481018590526001600160a01b0390911690637084ee169060240160206040518083038186803b158015610f4257600080fd5b505afa158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190613a4f565b6002811115610f9957634e487b7160e01b600052602160045260246000fd5b14610fb757604051638179537560e01b815260040160405180910390fd5b6039546040516331a9108f60e11b8152600481018a90526001600160a01b0390911690636352211e9060240160206040518083038186803b158015610ffb57600080fd5b505afa15801561100f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103391906137dd565b6001600160a01b0316336001600160a01b0316146110645760405163be24598360e01b815260040160405180910390fd5b603a54604051633842770b60e11b8152600481018990526002916001600160a01b031690637084ee169060240160206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190613a4f565b600281111561110057634e487b7160e01b600052602160045260246000fd5b1461111e57604051638179537560e01b815260040160405180910390fd5b6000888152603860205260409020548087111561114e57604051631e9acf1760e31b815260040160405180910390fd5b603a5460405163506df65b60e01b8152600481018b9052602481018a9052604481018990526001600160a01b039091169063506df65b90606401600060405180830381600087803b1580156111a257600080fd5b505af11580156111b6573d6000803e3d6000fd5b5050505086816111c69190614536565b60008a8152603860205260408120919091556034546111f3906064906111ed908b90612bf8565b90612c10565b905060006112018983612d3a565b60365490915061121a906001600160a01b031683612c1c565b60006112278c8c84612d46565b6039546040516331a9108f60e11b8152600481018f90529192506000916001600160a01b0390911690636352211e9060240160206040518083038186803b15801561127157600080fd5b505afa158015611285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a991906137dd565b905081156112bb576112bb8183612c1c565b336001600160a01b03168c8e7fba86cb310dba20723fcebe9b822e3d442c300588419146c035131de47cb4bf5c8787604051611301929190918252602082015260400190565b60405180910390a45050600180555050505050505050505050565b603a54604051635172bb2360e11b815260048101849052849184916000916001600160a01b03169063a2e57646906024016101206040518083038186803b15801561136657600080fd5b505afa15801561137a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139e9190613aee565b90508215806113b1575082816020015114155b156113cf576040516392cadd9760e01b815260040160405180910390fd5b603b54604051631c645c9f60e01b8152336004820181905260248201889052916001600160a01b031690631c645c9f90604401602060405180830381600087803b15801561141c57600080fd5b505af1158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190613978565b1561147257604051630c8d9eab60e31b815260040160405180910390fd5b603b5460405163fe0d584d60e01b8152600481018990526000916001600160a01b03169063fe0d584d9060240160206040518083038186803b1580156114b757600080fd5b505afa1580156114cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ef9190613c7d565b90506000816001600160401b0381111561151957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611542578160200160208202803683370190505b5090506000826001600160401b0381111561156d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611596578160200160208202803683370190505b50905060005b838110156117e757603a54604051633799b69160e11b8152600481018c9052602481018390526000916001600160a01b031690636f336d229060440160c06040518083038186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190613a6e565b9050806000015184838151811061164f57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600083838151811061167d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015260808101516040516370a0823160e01b81526001600160a01b03888116600483015260009216906370a082319060240160206040518083038186803b1580156116d057600080fd5b505afa1580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117089190613c7d565b1180156117aa5750603b548151604051630708d0c760e21b8152600481018e905260248101919091526000916001600160a01b031690631c23431c90604401602060405180830381600087803b15801561176157600080fd5b505af1158015611775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117999190613c7d565b82606001516117a89190614536565b115b156117de5760018383815181106117d157634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5060010161159c565b508151611807576040516345ab780760e01b815260040160405180910390fd5b603b54604051630aaf90f160e31b81526001600160a01b039091169063557c87889061183f908d908d90899088908890600401614306565b600060405180830381600087803b15801561185957600080fd5b505af115801561186d573d6000803e3d6000fd5b50505050836001600160a01b0316898b7f2ddfc660215ae9e66dec4b7f281af2e454fcea9356c8a3470d2ee3fe1c01a62985858d604051610b2493929190613f8a565b6033546001600160a01b031633146118db5760405163be24598360e01b815260040160405180910390fd5b600a8111156118fd57604051637f16ee6b60e01b815260040160405180910390fd5b60348190556040518181527f4cad663e6c336dd2ca0939462d65a0e2c9abcfb89d09e3886de41c3d67b2671990602001610b94565b6039546040516331a9108f60e11b8152600481018890526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561197657600080fd5b505afa15801561198a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ae91906137dd565b6001600160a01b0316336001600160a01b0316146119df5760405163be24598360e01b815260040160405180910390fd5b6119ea848487612eb8565b603a54604051631137edad60e11b8152600481018890526000916001600160a01b03169063226fdb5a9060240160206040518083038186803b158015611a2f57600080fd5b505afa158015611a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a679190613c7d565b603a54604051630638ef5160e51b81529192506000916001600160a01b039091169063c71dea2090611aa3908b908b908b908b90600401614193565b61012060405180830381600087803b158015611abe57600080fd5b505af1158015611ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af69190613aee565b8051909150821415611b1b5760405163517a3b2d60e01b815260040160405180910390fd5b603f54815160405163e5467d7f60e01b81526001600160a01b039092169163e5467d7f91611b52918c919089908990600401614351565b600060405180830381600087803b158015611b6c57600080fd5b505af1158015611b80573d6000803e3d6000fd5b505050505050505050505050565b60003411611baf5760405163749b593960e01b815260040160405180910390fd5b600081815260386020526040902054611bc99034906144df565b600082815260386020908152604091829020929092558051348152339281019290925282917f08534c4f6026a713959f9286d994e8430e6d0fd11045360abf782bacaa288d43910160405180910390a250565b60026001541415611c6f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610e39565b6002600155603a54604051635172bb2360e11b815260048101839052839183916000916001600160a01b03169063a2e57646906024016101206040518083038186803b158015611cbe57600080fd5b505afa158015611cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf69190613aee565b9050821580611d09575082816020015114155b15611d27576040516392cadd9760e01b815260040160405180910390fd5b83600280603a54604051633842770b60e11b8152600481018590526001600160a01b0390911690637084ee169060240160206040518083038186803b158015611d6f57600080fd5b505afa158015611d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da79190613a4f565b6002811115611dc657634e487b7160e01b600052602160045260246000fd5b14611de457604051638179537560e01b815260040160405180910390fd5b603b5460405163c12c3f0760e01b8152336004820181905260248201899052916001600160a01b03169063c12c3f0790604401602060405180830381600087803b158015611e3157600080fd5b505af1158015611e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e699190613978565b15611e8757604051630c8d9eab60e31b815260040160405180910390fd5b6000611e94828a8a612301565b90508015611efe57600089815260386020526040902054811115611ecb57604051631e9acf1760e31b815260040160405180910390fd5b600089815260386020526040902054611ee5908290614536565b60008a815260386020526040902055611efe8282612c1c565b6000611f0b838b8b61249e565b50603b5460405162c4aa6b60e71b81529192506001600160a01b031690636255358090611f42908d908d90889087906004016142d9565b600060405180830381600087803b158015611f5c57600080fd5b505af1158015611f70573d6000803e3d6000fd5b50505050826001600160a01b0316898b7f3a0da244be3f3ca6524dd79d1fc42da08544979abcf3931fcbb784a1afa8117c8585604051611fb19291906140af565b60405180910390a45050600180555050505050505050565b606080600083516001600160401b03811115611ff557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561201e578160200160208202803683370190505b50905060005b845181101561211957603a54604051633799b69160e11b815260048101889052602481018390526001600160a01b0390911690636f336d229060440160c06040518083038186803b15801561207857600080fd5b505afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b09190613a6e565b602001518582815181106120d457634e487b7160e01b600052603260045260246000fd5b60200260200101516120e69190614517565b82828151811061210657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600101612024565b50603b54604051632ac1ca4960e01b81526001600160a01b0390911690632ac1ca49906121509089908990899087906004016143c9565b60006040518083038186803b15801561216857600080fd5b505afa15801561217c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121a491908101906138f2565b915060005b825181101561229757603a54604051633799b69160e11b8152600481018890526024810183905261226491620f4240916111ed916001600160a01b031690636f336d229060440160c06040518083038186803b15801561220857600080fd5b505afa15801561221c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122409190613a6e565b604001518685815181106108c657634e487b7160e01b600052603260045260246000fd5b84828151811061228457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001016121a9565b5050935093915050565b6033546001600160a01b031633146122cc5760405163be24598360e01b815260040160405180910390fd5b60378190556040518181527f1887639addea89c07fe268468b61db3c0974a6328dd70d1ab60d24cade98977790602001610b94565b60008061230f85858561249e565b50905060005b815181101561249557603b5460405163442012c360e01b81526001600160a01b0388811660048301526024820187905260448201849052600092169063442012c390606401604080518083038186803b15801561237157600080fd5b505afa158015612385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a99190613df9565b509050806123b75750612315565b603a54604051633799b69160e11b81526004810187905260248101849052612480916001600160a01b031690636f336d229060440160c06040518083038186803b15801561240457600080fd5b505afa158015612418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243c9190613a6e565b6020015161247a85858151811061246357634e487b7160e01b600052603260045260246000fd5b602002602001015184612d3a90919063ffffffff16565b90612bf8565b61248a90856144df565b935050600101612315565b50509392505050565b603b5460405163256e8b2760e01b81526001600160a01b0385811660048301526024820185905260448201849052606092839291169063256e8b279060640160006040518083038186803b1580156124f557600080fd5b505afa158015612509573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261253191908101906138f2565b905080516001600160401b0381111561255a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612583578160200160208202803683370190505b50915060005b81518110156126da578181815181106125b257634e487b7160e01b600052603260045260246000fd5b6020026020010151600014156125f55760008382815181106125e457634e487b7160e01b600052603260045260246000fd5b602002602001018181525050612589565b603a54604051633799b69160e11b815260048101869052602481018390526126a791620f4240916111ed916001600160a01b031690636f336d229060440160c06040518083038186803b15801561264b57600080fd5b505afa15801561265f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126839190613a6e565b604001518585815181106108c657634e487b7160e01b600052603260045260246000fd5b8382815181106126c757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600101612589565b50935093915050565b6126ee848487612eb8565b60395460405163e8f830cb60e01b8152336004820152893560248201523060448201526000916001600160a01b03169063e8f830cb90606401602060405180830381600087803b15801561274157600080fd5b505af1158015612755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127799190613c7d565b9050612789818a8a8a8989613067565b603a54604051630638ef5160e51b81526000916001600160a01b03169063c71dea20906127c09085908b908b908b90600401614193565b61012060405180830381600087803b1580156127db57600080fd5b505af11580156127ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128139190613aee565b603f54815160405163e5467d7f60e01b81529293506001600160a01b039091169163e5467d7f9161284d9186919089908990600401614351565b600060405180830381600087803b15801561286757600080fd5b505af115801561287b573d6000803e3d6000fd5b5050505050505050505050505050565b6039546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e9060240160206040518083038186803b1580156128d057600080fd5b505afa1580156128e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290891906137dd565b6001600160a01b0316336001600160a01b03161415801561293457506033546001600160a01b03163314155b156129525760405163be24598360e01b815260040160405180910390fd5b603a54604051635f63e5ed60e11b81526004810185905283151560248201526001600160a01b039091169063bec7cbda90604401602060405180830381600087803b1580156129a057600080fd5b505af11580156129b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d89190613978565b9392505050565b600054610100900460ff166129fa5760005460ff16156129fe565b303b155b612a615760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e39565b600054610100900460ff16158015612a83576000805461ffff19166101011790555b6001600160a01b038a161580612aa057506001600160a01b038916155b80612ab257506001600160a01b038816155b80612ac457506001600160a01b038716155b80612ad657506001600160a01b038616155b80612ae857506001600160a01b038516155b80612afa57506001600160a01b038416155b80612b0c57506001600160a01b038316155b80612b1e57506001600160a01b038216155b15612b3c5760405163d92e233d60e01b815260040160405180910390fd5b612b446134af565b603980546001600160a01b03199081166001600160a01b038d811691909117909255603a805482168c8416179055603b805482168b8416179055603c805482168a8416179055603e80548216898416179055603d80548216888416179055603680548216868416179055603f8054821687841617905560338054909116918416919091179055600160355560046034556113886037558015612bec576000805461ff00191690555b50505050505050505050565b60006129d88284614517565b60006129d882846144df565b60006129d882846144f7565b80471015612c6c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610e39565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612cb9576040519150601f19603f3d011682016040523d82523d6000602084013e612cbe565b606091505b5050905080612d355760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610e39565b505050565b60006129d88284614536565b603f54604051633f9ea14960e21b81526004810184905282916000916001600160a01b039091169063fe7a85249060240160006040518083038186803b158015612d8f57600080fd5b505afa158015612da3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612dcb919081019061382d565b9050805160001415612ddd57506129d8565b60005b8151811015612495576000828281518110612e0b57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000612e2c86836000015161ffff166127106134e0565b90508015612e4257612e42826020015182612c1c565b612e4c8186614536565b60408051845161ffff1681526020808601516001600160a01b031690820152908101839052336060820152909550600190930192889088907fb617d9bda163028dfa8583222665603f72a701523b2e5aa7c449ab1dd1caa8039060800160405180910390a35050612de0565b60005b82811015613033576000848483818110612ee557634e487b7160e01b600052603260045260246000fd5b905060c002016080016020810190612efd91906137c1565b6001600160a01b031614158015612fc95750838382818110612f2f57634e487b7160e01b600052603260045260246000fd5b905060c002016080016020810190612f4791906137c1565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b0391909116906301ffc9a79060240160206040518083038186803b158015612f8f57600080fd5b505afa158015612fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc79190613978565b155b1561302b57838382818110612fee57634e487b7160e01b600052603260045260246000fd5b905060c00201608001602081019061300691906137c1565b604051634f8b719960e01b81526001600160a01b039091166004820152602401610e39565b600101612ebb565b506037546130446020830183613c49565b61ffff161015612d3557604051632e0e8e6760e11b815260040160405180910390fd5b6000836001600160401b0381111561308f57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156130b8578160200160208202803683370190505b5090506000846001600160401b038111156130e357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561310c578160200160208202803683370190505b5090506000856001600160401b0381111561313757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613160578160200160208202803683370190505b50905060005b868110156133525787878281811061318e57634e487b7160e01b600052603260045260246000fd5b905060600201604001358686838181106131b857634e487b7160e01b600052603260045260246000fd5b905060c0020160a001358787848181106131e257634e487b7160e01b600052603260045260246000fd5b905060c002016060013588888581811061320c57634e487b7160e01b600052603260045260246000fd5b905060c002016040013561322091906144df565b61322a91906144df565b111561324957604051631e9acf1760e31b815260040160405180910390fd5b87878281811061326957634e487b7160e01b600052603260045260246000fd5b9050606002016000013584828151811061329357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508787828181106132bf57634e487b7160e01b600052603260045260246000fd5b905060600201604001358382815181106132e957634e487b7160e01b600052603260045260246000fd5b60200260200101818152505087878281811061331557634e487b7160e01b600052603260045260246000fd5b9050606002016020013582828151811061333f57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600101613166565b50603b546040516359105c3360e11b81526000916001600160a01b03169063b220b8669061338a908d9088908890889060040161410a565b602060405180830381600087803b1580156133a457600080fd5b505af11580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc91906137dd565b603c5460335460405163339d237960e11b81529293506001600160a01b039182169263673a46f292613418928f928892889216906004016140d0565b600060405180830381600087803b15801561343257600080fd5b505af1158015613446573d6000803e3d6000fd5b506000925061345b91505060208b018b6143fa565b90501115612bec57603d546001600160a01b0316630e42eb698b61348260208d018d6143fa565b61348f60408f018f6143fa565b6040518663ffffffff1660e01b815260040161284d959493929190614018565b600054610100900460ff166134d65760405162461bcd60e51b8152600401610e3990613fcd565b6134de6135bc565b565b6000808060001985870985870292508281108382030391505080600014156135295783828161351f57634e487b7160e01b600052601260045260246000fd5b04925050506129d8565b83811061355357604051631dcf306360e21b81526004810182905260248101859052604401610e39565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600054610100900460ff166135e35760405162461bcd60e51b8152600401610e3990613fcd565b60018055565b60008083601f8401126135fa578182fd5b5081356001600160401b03811115613610578182fd5b60208301915083602060c08302850101111561362b57600080fd5b9250929050565b60008083601f840112613643578182fd5b5081356001600160401b03811115613659578182fd5b60208301915083602060608302850101111561362b57600080fd5b60008083601f840112613685578182fd5b5081356001600160401b0381111561369b578182fd5b6020830191508360208260061b850101111561362b57600080fd5b600082601f8301126136c6578081fd5b813560206136db6136d6836144bc565b61448c565b80838252828201915082860187848660051b89010111156136fa578586fd5b855b85811015613718578135845292840192908401906001016136fc565b5090979650505050505050565b805161373081614591565b919050565b600082601f830112613745578081fd5b81356001600160401b0381111561375e5761375e614563565b613771601f8201601f191660200161448c565b818152846020838601011115613785578283fd5b816020850160208301379081016020019190915292915050565b6000608082840312156137b0578081fd5b50919050565b80516137308161459f565b6000602082840312156137d2578081fd5b81356129d881614579565b6000602082840312156137ee578081fd5b81516129d881614579565b60008060006060848603121561380d578182fd5b833561381881614579565b95602085013595506040909401359392505050565b6000602080838503121561383f578182fd5b82516001600160401b03811115613854578283fd5b8301601f81018513613864578283fd5b80516138726136d6826144bc565b80828252848201915084840188868560061b8701011115613891578687fd5b8694505b838510156138e657604080828b0312156138ad578788fd5b6138b5614441565b82516138c08161459f565b8152828801516138cf81614579565b818901528452600195909501949286019201613895565b50979650505050505050565b60006020808385031215613904578182fd5b82516001600160401b03811115613919578283fd5b8301601f81018513613929578283fd5b80516139376136d6826144bc565b80828252848201915084840188868560051b8701011115613956578687fd5b8694505b838510156138e657805183526001949094019391850191850161395a565b600060208284031215613989578081fd5b81516129d881614591565b60008060008060008060008060006101208a8c0312156139b2578687fd5b89356139bd81614579565b985060208a01356139cd81614579565b975060408a01356139dd81614579565b965060608a01356139ed81614579565b955060808a01356139fd81614579565b945060a08a0135613a0d81614579565b935060c08a0135613a1d81614579565b925060e08a0135613a2d81614579565b91506101008a0135613a3e81614579565b809150509295985092959850929598565b600060208284031215613a60578081fd5b8151600381106129d8578182fd5b600060c08284031215613a7f578081fd5b60405160c081018181106001600160401b0382111715613aa157613aa1614563565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151613ad681614579565b608082015260a0928301519281019290925250919050565b60006101208284031215613b00578081fd5b613b08614469565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a0820152613b4a60c084016137b6565b60c0820152613b5b60e08401613725565b60e0820152610100928301519281019290925250919050565b600080600080600080600080610100898b031215613b90578182fd5b88356001600160401b0380821115613ba6578384fd5b908a01906060828d031215613bb9578384fd5b90985060208a01359080821115613bce578384fd5b613bda8c838d01613632565b9099509750879150613bef8c60408d0161379f565b965060c08b0135915080821115613c04578384fd5b613c108c838d016135e9565b909650945060e08b0135915080821115613c28578384fd5b50613c358b828c01613674565b999c989b5096995094979396929594505050565b600060208284031215613c5a578081fd5b81356129d88161459f565b600060208284031215613c76578081fd5b5035919050565b600060208284031215613c8e578081fd5b5051919050565b60008060008060808587031215613caa578182fd5b8435935060208501356001600160401b0380821115613cc7578384fd5b613cd3888389016136b6565b94506040870135915080821115613ce8578384fd5b613cf4888389016136b6565b93506060870135915080821115613d09578283fd5b50613d1687828801613735565b91505092959194509250565b60008060408385031215613d34578182fd5b823591506020830135613d4681614591565b809150509250929050565b60008060008060008060e08789031215613d69578384fd5b86359550613d7a886020890161379f565b945060a08701356001600160401b0380821115613d95578586fd5b613da18a838b016135e9565b909650945060c0890135915080821115613db9578384fd5b50613dc689828a01613674565b979a9699509497509295939492505050565b60008060408385031215613dea578182fd5b50508035926020909101359150565b60008060408385031215613e0b578182fd5b505080516020909101519092909150565b600080600060608486031215613e30578081fd5b833592506020840135915060408401356001600160401b03811115613e53578182fd5b613e5f868287016136b6565b9150509250925092565b600080600060608486031215613e7d578081fd5b833592506020840135915060408401356001600160401b03811115613ea0578182fd5b613e5f86828701613735565b600080600060608486031215613ec0578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b83811015613f0657815187529582019590820190600101613eea565b509495945050505050565b60008151808452815b81811015613f3657602081850181015186830182015201613f1a565b81811115613f475782602083870101525b50601f01601f19169290920160200192915050565b604081526000613f6f6040830185613ed7565b8281036020840152613f818185613ed7565b95945050505050565b606081526000613f9d6060830186613ed7565b8281036020840152613faf8186613ed7565b90508281036040840152613fc38185613f11565b9695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b85815260606020808301829052908201859052600090869060808401835b8881101561406457833561404981614579565b6001600160a01b031682529282019290820190600101614036565b5084810360408601528581528101915085835b868110156140a057813561408a8161459f565b61ffff1684529282019290820190600101614077565b50919998505050505050505050565b8281526040602082015260006140c86040830184613ed7565b949350505050565b8481526080602082015260006140e96080830186613ed7565b6001600160a01b039485166040840152929093166060909101529392505050565b8481526080602082015260006141236080830186613ed7565b82810360408401526141358186613ed7565b905082810360608401526141498185613ed7565b979650505050505050565b84815260806020820152600061416d6080830186613ed7565b828103604084015261417f8186613ed7565b905082810360608401526141498185613f11565b600060c0808301878452602087356141aa8161459f565b61ffff9081168683015288820135906141c28261459f565b60408183168189015260609250808b01358389015260809150828b01358289015260a086818a0152858a875260e08a0190508b9650885b8b81101561424f57873582528688013587830152838801358483015285880135868301528488013561422a81614579565b6001600160a01b031682860152878301358383015296880196908801906001016141f9565b509d9c50505050505050505050505050565b60006080820186835260208681850152604060018060a01b03871681860152606060808187015283875180865260a0880191508489019550865b818110156142c857865180518452868101518785015285015185840152958501959183019160010161429b565b50909b9a5050505050505050505050565b84815283602082015260018060a01b0383166040820152608060608201526000613fc36080830184613ed7565b85815284602082015260018060a01b038416604082015260a06060820152600061433360a0830185613ed7565b82810360808401526143458185613ed7565b98975050505050505050565b60006060820186835260208681850152604060608186015282868452608086019050879350845b878110156143bb57843561438b8161459f565b61ffff1682528484013561439e81614579565b6001600160a01b0316828501529382019390820190600101614378565b509998505050505050505050565b8481528360208201526080604082015260006143e86080830185613ed7565b82810360608401526141498185613ed7565b6000808335601e19843603018112614410578283fd5b8301803591506001600160401b03821115614429578283fd5b6020019150600581901b360382131561362b57600080fd5b604080519081016001600160401b038111828210171561446357614463614563565b60405290565b60405161012081016001600160401b038111828210171561446357614463614563565b604051601f8201601f191681016001600160401b03811182821017156144b4576144b4614563565b604052919050565b60006001600160401b038211156144d5576144d5614563565b5060051b60200190565b600082198211156144f2576144f261454d565b500190565b60008261451257634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156145315761453161454d565b500290565b6000828210156145485761454861454d565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461458e57600080fd5b50565b801515811461458e57600080fd5b61ffff8116811461458e57600080fdfea264697066735822122060fc0a4f2b479e895590061c903b190dcf8a27cd77ae7f88d84412269655f3ac64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToBalance(uint256)": {
        "params": {
          "_projectId": "The ID of the project to which the funds received belong."
        }
      },
      "claimPassOrRefund(uint256,uint256)": {
        "params": {
          "_fundingCycleId": "the funding cycle id to claim",
          "_projectId": "the project id to claim"
        }
      },
      "communityContribute(uint256,uint256,string)": {
        "params": {
          "_fundingCycleId": "The funding cycle id",
          "_memo": "memo attached when purchase",
          "_projectId": "The ID of the DAO being contribute to"
        }
      },
      "contribute(uint256,uint256[],uint256[],string)": {
        "params": {
          "_amounts": "The amounts of submitted",
          "_memo": "The memo that will be attached in the published event after purchasing",
          "_projectId": "The ID of the DAO being contribute to",
          "_tiers": "The payment tier ids"
        }
      },
      "createDao((bytes32,address[],uint16[]),(uint256,uint256,uint256)[],(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[],(uint16,address)[])": {
        "params": {
          "_auctionedPass": "Auctioned pass information",
          "_metadata": "The metadata for the DAO",
          "_params": "The parameters for Funding Cycle ",
          "_payoutMods": "The payout infos",
          "_tiers": "The total tiers of the Membership-pass"
        }
      },
      "createNewFundingCycle(uint256,(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[],(uint16,address)[])": {
        "params": {
          "_auctionedPass": "auctioned pass information",
          "_params": "The parameters for funding cycle",
          "_projectId": "The project id of the dao"
        }
      },
      "getEstimatingAmount(uint256,uint256,uint256[])": {
        "params": {
          "_fundingCycleId": "The ID of the funding cycle",
          "_payData": "payment info",
          "_projectId": "The ID of the DAO"
        }
      },
      "getOfferingAmount(address,uint256,uint256)": {
        "params": {
          "_from": "The wallet address of the user ",
          "_fundingCycleId": "The ID of the funding cycle",
          "_projectId": "The ID of the DAO you contributed with"
        },
        "returns": {
          "allocations": "The allocation percentage of each tier Passes offering in this funding cycle",
          "amounts": "The amount of each tier Passes offering in this funding cycle"
        }
      },
      "getRefundingAmount(address,uint256,uint256)": {
        "params": {
          "_from": "user address",
          "_fundingCycleId": "the funding cycle id",
          "_projectId": "the project id of contribute dao"
        }
      },
      "getUnSoldTickets(uint256)": {
        "params": {
          "_fundingCycleId": "the funding cycle id"
        }
      },
      "initialize(address,address,address,address,address,address,address,address,address)": {
        "params": {
          "_admin": "super admin",
          "_devTreasury": "dev treasury address, receive contribute fee and tap fee",
          "_fundingCycles": "A funding cycle configuration store. (DAO Creator can launch mutiple times.)",
          "_governorBooster": "The governor booster",
          "_passBooth": "The tiers with the Membership-pass this DAO has",
          "_projects": "A DAO's contract which mints ERC721 represent project's ownership and transfers."
        }
      },
      "setPausedFundingCycleProject(uint256,bool)": {
        "params": {
          "_paused": "status true or false for the funding cycle.",
          "_projectId": "The ID of the project to which the funds received belong."
        }
      },
      "tap(uint256,uint256,uint256)": {
        "params": {
          "_amount": "The amount being tapped",
          "_fundingCycleId": "The ID of the funding cycle to tap",
          "_projectId": "The ID of the project to which the funding cycle being tapped belongs"
        }
      },
      "unLockTreasury(uint256,uint256,uint256)": {
        "details": "Only daoGovernor contract",
        "params": {
          "_fundingCycleId": "The Id of the fundingCycle to unlock",
          "_projectId": "The Id of the project to unlock",
          "_unlockAmount": "The amount being unlocked"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "addToBalance(uint256)": {
        "notice": "Receives and allocates funds belonging to the specified project."
      },
      "claimPassOrRefund(uint256,uint256)": {
        "notice": "Claim menbershippass or refund overlow part"
      },
      "communityContribute(uint256,uint256,string)": {
        "notice": "Community members can mint the  membership pass for free. For those who has the specific NFT in wallet, enable to claim free pass"
      },
      "contribute(uint256,uint256[],uint256[],string)": {
        "notice": "Contribute ETH to a dao"
      },
      "createDao((bytes32,address[],uint16[]),(uint256,uint256,uint256)[],(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[],(uint16,address)[])": {
        "notice": "Deploy a DAO, this will mint an ERC721 into the `_owner`'s account, and configure a first funding cycle."
      },
      "createNewFundingCycle(uint256,(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[],(uint16,address)[])": {
        "notice": "Create the new Funding Cycle for spesific project, need to check the reserve amount pass in Treasury"
      },
      "getEstimatingAmount(uint256,uint256,uint256[])": {
        "notice": "Estimate allocate tickets"
      },
      "getOfferingAmount(address,uint256,uint256)": {
        "notice": "Get offering tickets by funding cycle"
      },
      "getRefundingAmount(address,uint256,uint256)": {
        "notice": "Get offering tickets by funding cycle"
      },
      "getUnSoldTickets(uint256)": {
        "notice": "Calculate the unsold tickets by funding cycle id"
      },
      "initialize(address,address,address,address,address,address,address,address,address)": {
        "notice": "Due to a requirement of the proxy-based upgradeability system, no constructors can be used in upgradeable contracts"
      },
      "setPausedFundingCycleProject(uint256,bool)": {
        "notice": "Set paused status to the current active funding cycle in the spesific project."
      },
      "tap(uint256,uint256,uint256)": {
        "notice": "Tap into funds that have been contributed to a project's funding cycles"
      },
      "unLockTreasury(uint256,uint256,uint256)": {
        "notice": "Unlock the locked balance in dao treasury"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 87,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 131,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13526,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "superAdmin",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 13529,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "tapFee",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 13532,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "contributeFee",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 13535,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "devTreasury",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 13538,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "minLockRate",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 13543,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "balanceOf",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13547,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "projects",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IProjects)16755"
      },
      {
        "astId": 13551,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "fundingCycles",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(IFundingCycles)16278"
      },
      {
        "astId": 13555,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "membershipPassBooth",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(IMembershipPassBooth)16616"
      },
      {
        "astId": 13559,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "daoGovernorBooster",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(IDAOGovernorBooster)16033"
      },
      {
        "astId": 13563,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "bluechipsBooster",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(IBluechipsBooster)15782"
      },
      {
        "astId": 13567,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "terminalDirectory",
        "offset": 0,
        "slot": "62",
        "type": "t_contract(ITerminalDirectory)17161"
      },
      {
        "astId": 13571,
        "contract": "contracts/Terminal.sol:Terminal",
        "label": "payoutStore",
        "offset": 0,
        "slot": "63",
        "type": "t_contract(IPayoutStore)16670"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBluechipsBooster)15782": {
        "encoding": "inplace",
        "label": "contract IBluechipsBooster",
        "numberOfBytes": "20"
      },
      "t_contract(IDAOGovernorBooster)16033": {
        "encoding": "inplace",
        "label": "contract IDAOGovernorBooster",
        "numberOfBytes": "20"
      },
      "t_contract(IFundingCycles)16278": {
        "encoding": "inplace",
        "label": "contract IFundingCycles",
        "numberOfBytes": "20"
      },
      "t_contract(IMembershipPassBooth)16616": {
        "encoding": "inplace",
        "label": "contract IMembershipPassBooth",
        "numberOfBytes": "20"
      },
      "t_contract(IPayoutStore)16670": {
        "encoding": "inplace",
        "label": "contract IPayoutStore",
        "numberOfBytes": "20"
      },
      "t_contract(IProjects)16755": {
        "encoding": "inplace",
        "label": "contract IProjects",
        "numberOfBytes": "20"
      },
      "t_contract(ITerminalDirectory)17161": {
        "encoding": "inplace",
        "label": "contract ITerminalDirectory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}