{
  "address": "0xf20Ab661ed1dE1DfF7e9B9A89aDD01Bdb6CFE6b1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bluechips",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_multipers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "_superAdmin",
          "type": "address"
        },
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadMultiper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BoosterNotRegisterd",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BoosterRegisterd",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ForbiddenUpdate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotNFTOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProofNotRegisterd",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemAfterExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RenewFirst",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SizeNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "multiper",
          "type": "uint16"
        }
      ],
      "name": "AddBluechip",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bluechips",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "multipers",
          "type": "uint16[]"
        }
      ],
      "name": "AddCustomBooster",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        }
      ],
      "name": "ChallengeCustomizedProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        }
      ],
      "name": "ChallengeProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proofExpiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "CreateCustomizedProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proofExpiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "CreateProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        }
      ],
      "name": "RedeemCustomizedProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        }
      ],
      "name": "RedeemProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "Remove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "RemoveCustomize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proofExpiry",
          "type": "uint256"
        }
      ],
      "name": "RenewCustomizedProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bluechip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proofExpiry",
          "type": "uint256"
        }
      ],
      "name": "RenewProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PROOF_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bluechip",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_multiper",
          "type": "uint16"
        }
      ],
      "name": "addBlueChip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "boosterWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bluechip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "challengeCustomProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bluechip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "challengeProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_bluechips",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_multipers",
          "type": "uint16[]"
        }
      ],
      "name": "createCustomBooster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bluechip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "createCustomProof",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bluechip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "createProof",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customBoosterWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customMultiplierOf",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "getBoosterWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "multiplierOf",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proofBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proofExpiryOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bluechip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "redeemCustomProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bluechip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeemProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bluechip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "renewCustomProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bluechip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renewProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "stakedOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "superAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokenIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7dab4d3babda5031fdaa67f248403af659cf6c5985f028d647cf859c4b2d828d",
  "receipt": {
    "to": null,
    "from": "0x33aaE4F4bA8019704137703Fe808F6B172D72D6B",
    "contractAddress": "0xf20Ab661ed1dE1DfF7e9B9A89aDD01Bdb6CFE6b1",
    "transactionIndex": 10,
    "gasUsed": "3129125",
    "logsBloom": "0x
    "blockHash": "0x4940c2214198cb9f7c9baab1cdee4b8b28d8d49d9b429b8bb2f8c43c759f3cc4",
    "transactionHash": "0x7dab4d3babda5031fdaa67f248403af659cf6c5985f028d647cf859c4b2d828d",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 10982945,
        "transactionHash": "0x7dab4d3babda5031fdaa67f248403af659cf6c5985f028d647cf859c4b2d828d",
        "address": "0xf20Ab661ed1dE1DfF7e9B9A89aDD01Bdb6CFE6b1",
        "topics": [
          "0xad31513de3c13ac6ea0b15cf17103355c732b2ff1018e354547f79f4e44e7346"
        ],
        "data": "0x000000000000000000000000277fc3471ab37f9d654f64876b020d960d93a7650000000000000000000000000000000000000000000000000000000000000096",
        "logIndex": 10,
        "blockHash": "0x4940c2214198cb9f7c9baab1cdee4b8b28d8d49d9b429b8bb2f8c43c759f3cc4"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 10982945,
        "transactionHash": "0x7dab4d3babda5031fdaa67f248403af659cf6c5985f028d647cf859c4b2d828d",
        "address": "0xf20Ab661ed1dE1DfF7e9B9A89aDD01Bdb6CFE6b1",
        "topics": [
          "0xad31513de3c13ac6ea0b15cf17103355c732b2ff1018e354547f79f4e44e7346"
        ],
        "data": "0x0000000000000000000000004aaba49d75576c8f158f7502fbab869948a6eb4d0000000000000000000000000000000000000000000000000000000000000096",
        "logIndex": 11,
        "blockHash": "0x4940c2214198cb9f7c9baab1cdee4b8b28d8d49d9b429b8bb2f8c43c759f3cc4"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 10982945,
        "transactionHash": "0x7dab4d3babda5031fdaa67f248403af659cf6c5985f028d647cf859c4b2d828d",
        "address": "0xf20Ab661ed1dE1DfF7e9B9A89aDD01Bdb6CFE6b1",
        "topics": [
          "0xad31513de3c13ac6ea0b15cf17103355c732b2ff1018e354547f79f4e44e7346"
        ],
        "data": "0x0000000000000000000000004ae21c50fed572d3220f77d202a838b593f631600000000000000000000000000000000000000000000000000000000000000087",
        "logIndex": 12,
        "blockHash": "0x4940c2214198cb9f7c9baab1cdee4b8b28d8d49d9b429b8bb2f8c43c759f3cc4"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 10982945,
        "transactionHash": "0x7dab4d3babda5031fdaa67f248403af659cf6c5985f028d647cf859c4b2d828d",
        "address": "0xf20Ab661ed1dE1DfF7e9B9A89aDD01Bdb6CFE6b1",
        "topics": [
          "0xad31513de3c13ac6ea0b15cf17103355c732b2ff1018e354547f79f4e44e7346"
        ],
        "data": "0x00000000000000000000000071f3bd12c0b964f53bd594d9477e0a2837e3b7860000000000000000000000000000000000000000000000000000000000000078",
        "logIndex": 13,
        "blockHash": "0x4940c2214198cb9f7c9baab1cdee4b8b28d8d49d9b429b8bb2f8c43c759f3cc4"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 10982945,
        "transactionHash": "0x7dab4d3babda5031fdaa67f248403af659cf6c5985f028d647cf859c4b2d828d",
        "address": "0xf20Ab661ed1dE1DfF7e9B9A89aDD01Bdb6CFE6b1",
        "topics": [
          "0xad31513de3c13ac6ea0b15cf17103355c732b2ff1018e354547f79f4e44e7346"
        ],
        "data": "0x000000000000000000000000c7b0933473fe1bee049608382ebaeba030a8a7d0000000000000000000000000000000000000000000000000000000000000006e",
        "logIndex": 14,
        "blockHash": "0x4940c2214198cb9f7c9baab1cdee4b8b28d8d49d9b429b8bb2f8c43c759f3cc4"
      }
    ],
    "blockNumber": 10982945,
    "cumulativeGasUsed": "6877721",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x277fc3471ab37F9D654f64876b020d960d93a765",
      "0x4aAbA49d75576c8F158F7502FBaB869948A6eB4D",
      "0x4AE21C50Fed572D3220f77D202a838b593f63160",
      "0x71F3BD12c0B964F53bD594D9477e0a2837E3b786",
      "0xC7B0933473fe1beE049608382EbaEBA030a8A7D0"
    ],
    [
      "150",
      "150",
      "135",
      "120",
      "110"
    ],
    "0xc45D314D16957f8C72aB4cA27A619bd0042A00c6",
    "0x22f3c559e8b31817f25Df62786924b593cC5776E"
  ],
  "numDeployments": 1,
  "solcInputHash": "4e9316abea9744a68b7555d93f5656d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bluechips\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_multipers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"_superAdmin\",\"type\":\"address\"},{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadMultiper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoosterNotRegisterd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoosterRegisterd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForbiddenUpdate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNFTOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofNotRegisterd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemAfterExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RenewFirst\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SizeNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"multiper\",\"type\":\"uint16\"}],\"name\":\"AddBluechip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bluechips\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"multipers\",\"type\":\"uint16[]\"}],\"name\":\"AddCustomBooster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"ChallengeCustomizedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"ChallengeProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"CreateCustomizedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"CreateProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"RedeemCustomizedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"RedeemProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"RemoveCustomize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofExpiry\",\"type\":\"uint256\"}],\"name\":\"RenewCustomizedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bluechip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofExpiry\",\"type\":\"uint256\"}],\"name\":\"RenewProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROOF_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bluechip\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_multiper\",\"type\":\"uint16\"}],\"name\":\"addBlueChip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boosterWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bluechip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"challengeCustomProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bluechip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"challengeProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_bluechips\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_multipers\",\"type\":\"uint16[]\"}],\"name\":\"createCustomBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bluechip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"createCustomProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bluechip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customBoosterWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customMultiplierOf\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getBoosterWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multiplierOf\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proofBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proofExpiryOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bluechip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"redeemCustomProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bluechip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bluechip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"renewCustomProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bluechip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renewProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBlueChip(address,uint16)\":{\"params\":{\"_bluechip\":\"bluechip address\",\"_multiper\":\"multiper of booster\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"challengeCustomProof(address,uint256,uint256)\":{\"params\":{\"_bluechip\":\"the cutomized nft address you want to challenge\",\"_projectId\":\"The ID of DAO for this cusotmized NFT you want to register\",\"_tokenId\":\"which token you want to challenge\"}},\"challengeProof(address,uint256)\":{\"params\":{\"_bluechip\":\"the bluechip nft address you want to challenge\",\"_tokenId\":\"which token you want to challenge\"}},\"createCustomBooster(uint256,address[],uint16[])\":{\"params\":{\"_bluechips\":\"The customized NFTs token addresses\",\"_multipers\":\"multipliers of each nft 300 => 3x\",\"_projectId\":\"The DAO ID\"}},\"createCustomProof(address,uint256,uint256)\":{\"params\":{\"_bluechip\":\"The customized NFT Token Addresses\",\"_projectId\":\"The ID of the DAO you want to register this proof\",\"_tokenId\":\"The ID of the NFT in token address\"}},\"createProof(address,uint256)\":{\"params\":{\"_bluechip\":\"The bluechip NFT Address(ERC721) you want to proof\",\"_tokenId\":\"which tokenID you want to proof\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBoosterWeight(uint256,address)\":{\"params\":{\"_from\":\"wallet address\",\"_projectId\":\"the project id of query\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"redeemCustomProof(address,uint256,uint256)\":{\"params\":{\"_bluechip\":\"the customized nft address to redeem\",\"_projectId\":\"The ID of the DAO that the cusotmized NFT belongs with\",\"_tokenId\":\"which token you want to redeem\"}},\"redeemProof(address,uint256)\":{\"params\":{\"_bluechip\":\"the bluechip nft address to redeem\",\"_tokenId\":\"which token you want to redeem\"}},\"renewCustomProof(address,uint256,uint256)\":{\"params\":{\"_bluechip\":\"The customized NFT token address to renew\",\"_projectId\":\"the project id of bluechip belongs\",\"_tokenId\":\"which token you want to renew\"}},\"renewProof(address,uint256)\":{\"params\":{\"_bluechip\":\"the bluechip nft address to renew\",\"_tokenId\":\"which token you want to renew\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBlueChip(address,uint16)\":{\"notice\":\"The governor can add a new universal bluechip as booster\"},\"challengeCustomProof(address,uint256,uint256)\":{\"notice\":\"Anyone can challenge a proof if the customized NFT no longer belong to the pre owner\"},\"challengeProof(address,uint256)\":{\"notice\":\"Anyone can challenge a proof if the bluechip no longer belong to the pre owner\"},\"constructor\":{\"notice\":\"Punk:   x1.5   (150) BAYC:   x1.5   (150) Azuki:  x1.35  (135) Doodle: x1.2   (120) CloneX: x1.1   (110) There has 2 types of Boost: BlueChips NFT and Customized NFT based on which DAO you set. For customized NFT support in each DAO, will be followed by the configure when the DAO created.\"},\"createCustomBooster(uint256,address[],uint16[])\":{\"notice\":\"DAO Creator able to set the customized NFT support to boost DAO points\"},\"createCustomProof(address,uint256,uint256)\":{\"notice\":\"People who have the customized nfts can create a proof which promises that they will hold the nfts for 30 days\"},\"createProof(address,uint256)\":{\"notice\":\"People who have the bluechip NFTs can create a proof that promises they will hold the NFTs for 30 days        \"},\"getBoosterWeight(uint256,address)\":{\"notice\":\"Return the weights of an address weights = universal weights * customized weights\"},\"redeemCustomProof(address,uint256,uint256)\":{\"notice\":\"The proof owner can redeem the proof\"},\"redeemProof(address,uint256)\":{\"notice\":\"The proof owner can redeem the proof\"},\"renewCustomProof(address,uint256,uint256)\":{\"notice\":\"The proof owner can renew the proof. Don't need to pay for renew\"},\"renewProof(address,uint256)\":{\"notice\":\"The proof owner can renew the proof. Don't need to pay for renew\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BluechipsBooster.sol\":\"BluechipsBooster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BluechipsBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport {IBluechipsBooster, IERC721} from \\\"./interfaces/IBluechipsBooster.sol\\\";\\nimport {AdminUtility} from \\\"./abstract/AdminUtility.sol\\\";\\nimport {TerminalUtility, ITerminalDirectory} from \\\"./abstract/TerminalUtility.sol\\\";\\n\\ncontract BluechipsBooster is IBluechipsBooster, ERC721, AdminUtility, TerminalUtility {\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Stored Constants  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    uint16 private constant MAX_MULTIPLIER_OF_BLUECHIPS = 150;\\n    uint16 private constant MAX_MULTIPLIER_OF_CUSTOMIZED = 300;\\n    uint256 private constant SECONDS_IN_DAY = 86400;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551    Public Stored Constants  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    uint256 public constant PROOF_ETH = 1e15; // TODO 1eth=1e18 stake 1 ETH to proof\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551  Public Stored Properties   \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    uint256 public override count;\\n\\n    mapping(bytes32 => uint256) public override tokenIdOf;\\n\\n    // Bytescode => Wallet Address\\n    mapping(bytes32 => address) public override proofBy;\\n\\n    // Multiplier for each Bluechips NFT\\n    // 123 => 1.23x Max multiplier: 150\\n    mapping(address => uint16) public override multiplierOf;\\n\\n    // Final Boost ratio for Bluechips NFT in each wallet address\\n    mapping(address => uint256) public override boosterWeights;\\n\\n    // Expired timestamp for each proof\\n    mapping(bytes32 => uint256) public override proofExpiryOf;\\n\\n    // The Bytescode of bluechips NFT => The amount of staked ETH\\n    mapping(bytes32 => uint256) public override stakedOf;\\n\\n    // daoId => Customized NFT Token Address => multiper\\n    // 123 => 1.23x Max multiplier: 300\\n    mapping(uint256 => mapping(address => uint16)) public override customMultiplierOf;\\n\\n    // daoId => Wallet Address => booster weights\\n    mapping(uint256 => mapping(address => uint256)) public override customBoosterWeights;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External VIEW  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n        @notice\\n        Return the weights of an address weights = universal weights * customized weights\\n\\n        @param _projectId the project id of query\\n        @param _from wallet address\\n     */\\n    function getBoosterWeight(uint256 _projectId, address _from)\\n        external\\n        view\\n        returns (uint256 _weight)\\n    {\\n        _weight =\\n            _getNoZero(boosterWeights[_from]) *\\n            _getNoZero(customBoosterWeights[_projectId][_from]);\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External Transaction  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n        @notice\\n        Punk:   x1.5   (150)\\n        BAYC:   x1.5   (150)\\n        Azuki:  x1.35  (135)\\n        Doodle: x1.2   (120)\\n        CloneX: x1.1   (110)\\n\\n        There has 2 types of Boost: BlueChips NFT and Customized NFT based on which DAO you set.\\n        For customized NFT support in each DAO, will be followed by the configure when the DAO created.\\n     */\\n    constructor(\\n        address[] memory _bluechips,\\n        uint16[] memory _multipers,\\n        address _superAdmin,\\n        ITerminalDirectory _terminalDirectory\\n    )\\n        ERC721(\\\"BlueChip Stake Proof\\\", \\\"STAKEPROOF\\\")\\n        AdminUtility(_superAdmin)\\n        TerminalUtility(_terminalDirectory)\\n    {\\n        if (_bluechips.length != _multipers.length) revert SizeNotMatch();\\n        for (uint256 i; i < _bluechips.length;) {\\n            if (_bluechips[i] == address(0)) revert ZeroAddress();\\n            if (_multipers[i] == 0 || _multipers[i] > MAX_MULTIPLIER_OF_BLUECHIPS)\\n                revert BadMultiper();\\n\\n            multiplierOf[_bluechips[i]] = _multipers[i];\\n            \\n            emit AddBluechip(_bluechips[i], _multipers[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice\\n        DAO Creator able to set the customized NFT support to boost DAO points\\n\\n        @param _projectId The DAO ID\\n        @param _bluechips The customized NFTs token addresses\\n        @param _multipers multipliers of each nft 300 => 3x\\n     */\\n    function createCustomBooster(\\n        uint256 _projectId,\\n        address[] memory _bluechips,\\n        uint16[] memory _multipers\\n    ) external override onlyTerminal(_projectId) {\\n        if (_bluechips.length != _multipers.length) revert SizeNotMatch();\\n        for (uint256 i; i < _bluechips.length;) {\\n            if (_bluechips[i] == address(0)) revert ZeroAddress();\\n            if (customMultiplierOf[_projectId][_bluechips[i]] > 0) revert BoosterRegisterd();\\n            if (_multipers[i] == 0 || _multipers[i] > MAX_MULTIPLIER_OF_CUSTOMIZED)\\n                revert BadMultiper();\\n            customMultiplierOf[_projectId][_bluechips[i]] = _multipers[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit AddCustomBooster(_projectId, _bluechips, _multipers);\\n    }\\n\\n    /**\\n        @notice\\n        People who have the bluechip NFTs can create a proof that promises they will hold the NFTs for 30 days        \\n\\n        @param _bluechip The bluechip NFT Address(ERC721) you want to proof\\n        @param _tokenId which tokenID you want to proof\\n     */\\n    function createProof(address _bluechip, uint256 _tokenId) external payable override {\\n        // Only the Bluechips NFT holder able to call this function.\\n        address _from = msg.sender;\\n\\n        if (multiplierOf[_bluechip] == 0) revert BoosterNotRegisterd();\\n\\n        // Create a ERC721 token for caller\\n        if (IERC721(_bluechip).ownerOf(_tokenId) != _from) revert NotNFTOwner();\\n        if (msg.value < PROOF_ETH) revert InsufficientBalance(); // Collateral ETH\\n\\n        // Based on specific Bluechips NFT Token Address, plus which tokenID encoded\\n        bytes32 _proof = keccak256(abi.encodePacked(_bluechip, _tokenId));\\n\\n        address _preOwner = proofBy[_proof];\\n        if (_preOwner == _from) revert RenewFirst();\\n\\n        if (_preOwner != address(0)) {\\n            _redeem(_bluechip, _tokenId, _proof, _from, _preOwner);\\n        }\\n\\n        proofBy[_proof] = _from;\\n        uint256 _weight = _getNoZero(boosterWeights[_from]) * multiplierOf[_bluechip];\\n        boosterWeights[_from] = _weight;\\n\\n        uint256 _proofExpiry = block.timestamp + 30 * SECONDS_IN_DAY;\\n        proofExpiryOf[_proof] = _proofExpiry;\\n        stakedOf[_proof] = msg.value;\\n\\n        count++;\\n\\n        // Mint the stake proof\\n        _safeMint(_from, count);\\n\\n        tokenIdOf[_proof] = count;\\n\\n        emit CreateProof(_from, _bluechip, _tokenId, _proof, _proofExpiry, _weight);\\n    }\\n\\n    /**\\n        @notice\\n        People who have the customized nfts can create a proof which promises that they will hold the nfts for 30 days\\n\\n        @param _bluechip The customized NFT Token Addresses\\n        @param _tokenId The ID of the NFT in token address\\n        @param _projectId The ID of the DAO you want to register this proof\\n     */\\n    function createCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external payable override {\\n        address _from = msg.sender;\\n\\n        if (customMultiplierOf[_projectId][_bluechip] == 0) revert BoosterNotRegisterd();\\n        if (IERC721(_bluechip).ownerOf(_tokenId) != _from) revert NotNFTOwner();\\n        if (msg.value < PROOF_ETH) revert InsufficientBalance();\\n\\n        bytes32 _proof = keccak256(abi.encodePacked(_projectId, _bluechip, _tokenId));\\n\\n        address _preOwner = proofBy[_proof];\\n        if (_preOwner == _from) revert RenewFirst();\\n\\n        if (_preOwner != address(0)) {\\n            _redeem(_bluechip, _tokenId, _proof, _from, _preOwner, _projectId);\\n        }\\n\\n        proofBy[_proof] = _from;\\n\\n        uint256 _weight = _getNoZero(customBoosterWeights[_projectId][_from]) *\\n            customMultiplierOf[_projectId][_bluechip];\\n\\n        customBoosterWeights[_projectId][_from] = _weight;\\n\\n        uint256 _proofExpiry = block.timestamp + 30 * SECONDS_IN_DAY;\\n        proofExpiryOf[_proof] = _proofExpiry;\\n        stakedOf[_proof] = msg.value;\\n\\n        emit CreateCustomizedProof(\\n            _projectId,\\n            _from,\\n            _bluechip,\\n            _tokenId,\\n            _proof,\\n            _proofExpiry,\\n            _weight\\n        );\\n    }\\n\\n    /**\\n        @notice\\n        Anyone can challenge a proof if the bluechip no longer belong to the pre owner\\n\\n        @param _bluechip the bluechip nft address you want to challenge\\n        @param _tokenId which token you want to challenge\\n     */\\n    function challengeProof(address _bluechip, uint256 _tokenId) external override {\\n        bytes32 _proof = keccak256(abi.encodePacked(_bluechip, _tokenId));\\n        address _creator = proofBy[_proof];\\n        if (_creator == address(0)) revert ProofNotRegisterd();\\n        if (IERC721(_bluechip).ownerOf(_tokenId) == _creator) revert ChallengeFailed();\\n\\n        _redeem(_bluechip, _tokenId, _proof, msg.sender, _creator);\\n\\n        emit ChallengeProof(msg.sender, _bluechip, _tokenId, _proof);\\n    }\\n\\n    /**\\n        @notice\\n        Anyone can challenge a proof if the customized NFT no longer belong to the pre owner\\n\\n        @param _bluechip the cutomized nft address you want to challenge\\n        @param _tokenId which token you want to challenge\\n        @param _projectId The ID of DAO for this cusotmized NFT you want to register\\n     */\\n    function challengeCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external override {\\n        bytes32 _proof = keccak256(abi.encodePacked(_projectId, _bluechip, _tokenId));\\n        address _creator = proofBy[_proof];\\n        if (_creator == address(0)) revert ProofNotRegisterd();\\n        if (IERC721(_bluechip).ownerOf(_tokenId) == _creator) revert ChallengeFailed();\\n\\n        _redeem(_bluechip, _tokenId, _proof, msg.sender, _creator, _projectId);\\n\\n        emit ChallengeCustomizedProof(_projectId, msg.sender, _bluechip, _tokenId, _proof);\\n    }\\n\\n    /**\\n        @notice\\n        The proof owner can renew the proof. Don't need to pay for renew\\n\\n        @param _bluechip the bluechip nft address to renew\\n        @param _tokenId which token you want to renew\\n     */\\n    function renewProof(address _bluechip, uint256 _tokenId) external override {\\n        address _from = msg.sender;\\n        bytes32 _proof = keccak256(abi.encodePacked(_bluechip, _tokenId));\\n        address _creator = proofBy[_proof];\\n        if (_from != _creator || IERC721(_bluechip).ownerOf(_tokenId) != msg.sender)\\n            revert UnAuthorized();\\n\\n        uint256 _proofExpiry = block.timestamp + 30 * SECONDS_IN_DAY;\\n        proofExpiryOf[_proof] = _proofExpiry;\\n\\n        emit RenewProof(_from, _bluechip, _tokenId, _proof, _proofExpiry);\\n    }\\n\\n    /**\\n        @notice\\n        The proof owner can renew the proof. Don't need to pay for renew\\n\\n        @param _bluechip The customized NFT token address to renew\\n        @param _tokenId which token you want to renew\\n        @param _projectId the project id of bluechip belongs\\n     */\\n    function renewCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external override {\\n        address _from = msg.sender;\\n        bytes32 _proof = keccak256(abi.encodePacked(_projectId, _bluechip, _tokenId));\\n        address _creator = proofBy[_proof];\\n        if (_from != _creator || IERC721(_bluechip).ownerOf(_tokenId) != msg.sender)\\n            revert UnAuthorized();\\n\\n        uint256 _proofExpiry = block.timestamp + 30 * SECONDS_IN_DAY;\\n        proofExpiryOf[_proof] = _proofExpiry;\\n\\n        emit RenewCustomizedProof(_projectId, _from, _bluechip, _tokenId, _proof, _proofExpiry);\\n    }\\n\\n    /**\\n        @notice\\n        The proof owner can redeem the proof\\n\\n        @param _bluechip the bluechip nft address to redeem\\n        @param _tokenId which token you want to redeem\\n     */\\n    function redeemProof(address _bluechip, uint256 _tokenId) external override {\\n        address _from = msg.sender;\\n        bytes32 _proof = keccak256(abi.encodePacked(_bluechip, _tokenId));\\n        address _creator = proofBy[_proof];\\n        if (_from != _creator || _from != IERC721(_bluechip).ownerOf(_tokenId))\\n            revert UnAuthorized();\\n        if (block.timestamp < proofExpiryOf[_proof]) revert RedeemAfterExpired();\\n\\n        _redeem(_bluechip, _tokenId, _proof, _from, _from);\\n\\n        emit RedeemProof(_from, _bluechip, _tokenId, _proof);\\n    }\\n\\n    /**\\n        @notice\\n        The proof owner can redeem the proof\\n\\n        @param _bluechip the customized nft address to redeem\\n        @param _tokenId which token you want to redeem\\n        @param _projectId The ID of the DAO that the cusotmized NFT belongs with\\n     */\\n    function redeemCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external override {\\n        address _from = msg.sender;\\n        bytes32 _proof = keccak256(abi.encodePacked(_projectId, _bluechip, _tokenId));\\n        address _creator = proofBy[_proof];\\n        if (_from != _creator || _from != IERC721(_bluechip).ownerOf(_tokenId))\\n            revert UnAuthorized();\\n        if (block.timestamp < proofExpiryOf[_proof]) revert RedeemAfterExpired();\\n\\n        _redeem(_bluechip, _tokenId, _proof, _from, _from, _projectId);\\n\\n        emit RedeemCustomizedProof(_projectId, _from, _bluechip, _tokenId, _proof);\\n    }\\n\\n    /**\\n        @notice\\n        The governor can add a new universal bluechip as booster\\n\\n        @param _bluechip bluechip address\\n        @param _multiper multiper of booster\\n     */\\n    function addBlueChip(address _bluechip, uint16 _multiper) external override onlyAdmin {\\n        if (_bluechip == address(0)) revert ZeroAddress();\\n        if (multiplierOf[_bluechip] != 0) revert ForbiddenUpdate();\\n\\n        multiplierOf[_bluechip] = _multiper;\\n\\n        emit AddBluechip(_bluechip, _multiper);\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Helper Functions  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n        @notice\\n        Redeem the proof of BlueChipsNFT\\n\\n        @param _bluechip bluechip address\\n        @param _proof the proof need to delete\\n        @param _beneficiary the address to eceive challenge award\\n        @param _from pre owner of the proof\\n     */\\n    function _redeem(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        bytes32 _proof,\\n        address _beneficiary,\\n        address _from\\n    ) private {\\n        Address.sendValue(payable(_beneficiary), stakedOf[_proof]);\\n        stakedOf[_proof] = 0;\\n        proofExpiryOf[_proof] = 0;\\n        boosterWeights[_from] = boosterWeights[_from] / multiplierOf[_bluechip];\\n\\n        uint256 _tokenIdOfProof = tokenIdOf[_proof];\\n        _burn(_tokenIdOfProof);\\n        delete tokenIdOf[_proof];\\n\\n        delete proofBy[_proof];\\n\\n        emit Remove(_from, _beneficiary, _proof, _bluechip, _tokenId, boosterWeights[_from]);\\n    }\\n\\n    /**\\n        @notice\\n        Redeem the proof for customized NFT\\n\\n        @param _bluechip bluechip address\\n        @param _proof the proof need to delete\\n        @param _beneficiary the address to eceive challenge award\\n        @param _from pre owner of the proof\\n        @param _projectId the project id of bluechip belongs\\n     */\\n    function _redeem(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        bytes32 _proof,\\n        address _beneficiary,\\n        address _from,\\n        uint256 _projectId\\n    ) private {\\n        Address.sendValue(payable(_beneficiary), stakedOf[_proof]);\\n        stakedOf[_proof] = 0;\\n        proofExpiryOf[_proof] = 0;\\n\\n        customBoosterWeights[_projectId][_from] =\\n            customBoosterWeights[_projectId][_from] /\\n            customMultiplierOf[_projectId][_bluechip];\\n\\n        delete proofBy[_proof];\\n\\n        emit RemoveCustomize(\\n            _from,\\n            _beneficiary,\\n            _projectId,\\n            _proof,\\n            _bluechip,\\n            _tokenId,\\n            customBoosterWeights[_projectId][_from]\\n        );\\n    }\\n\\n    /**\\n        @notice\\n        Disable the transfer behavior\\n\\n        @param _from Transfer from\\n        @param _to Transfer to\\n        @param _tokenId Transfer token id\\n     */\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal override {\\n        super._transfer(_from, _to, _tokenId);\\n        revert TransferDisabled();\\n    }\\n\\n    /**\\n        @notice\\n        Return the no zero value\\n\\n        @param _a Giving value\\n     */\\n    function _getNoZero(uint256 _a) private pure returns (uint256) {\\n        return _a == 0 ? 1 : _a;\\n    }\\n}\\n\",\"keccak256\":\"0x1bff13c9170e7a0f9a347754143f5c18588dabd445f4756ec54f40d9ba50c3e3\",\"license\":\"MIT\"},\"contracts/abstract/AdminUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nabstract contract AdminUtility {\\n    address public superAdmin;\\n\\n    error NotAdmin();\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != superAdmin) revert NotAdmin();\\n        _;\\n    }\\n\\n    constructor(address _superAdmin) {\\n        superAdmin = _superAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x0e0b9c81ed7d95048451c7b809ccba18db2d5dc5fc3490b4f862fad4497db697\",\"license\":\"MIT\"},\"contracts/abstract/TerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ITerminalUtility.sol\\\";\\n\\nabstract contract TerminalUtility is ITerminalUtility {\\n    modifier onlyTerminal(uint256 _projectId) {\\n        if (address(terminalDirectory.terminalOf(_projectId)) != msg.sender) revert UnAuthorized();\\n        _;\\n    }\\n\\n    ITerminalDirectory public immutable override terminalDirectory;\\n\\n    /** \\n      @param _terminalDirectory A directory of a project's current terminal to receive payments in.\\n    */\\n    constructor(ITerminalDirectory _terminalDirectory) {\\n        terminalDirectory = _terminalDirectory;\\n    }\\n}\\n\",\"keccak256\":\"0x1935ff1401b8482549ebb1877d49a6aafdef8fffb661a0f93a5d7820b3a1cbac\",\"license\":\"MIT\"},\"contracts/interfaces/IBluechipsBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBluechipsBooster {\\n    event CreateProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event CreateCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event ChallengeProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event ChallengeCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RenewProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event RenewCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event Remove(\\n        address indexed from,\\n        address beneficiary,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event RemoveCustomize(\\n        address indexed from,\\n        address beneficiary,\\n        uint256 projectId,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event AddBluechip(address bluechip, uint16 multiper);\\n\\n    event AddCustomBooster(uint256 indexed projectId, address[] bluechips, uint16[] multipers);\\n\\n    error SizeNotMatch();\\n    error BadMultiper();\\n    error ZeroAddress();\\n    error RenewFirst();\\n    error NotNFTOwner();\\n    error InsufficientBalance();\\n    error BoosterRegisterd();\\n    error BoosterNotRegisterd();\\n    error ProofNotRegisterd();\\n    error ChallengeFailed();\\n    error RedeemAfterExpired();\\n    error ForbiddenUpdate();\\n    error OnlyGovernor();\\n    error TransferDisabled();\\n\\n    function count() external view returns (uint256);\\n\\n    function tokenIdOf(bytes32 _proof) external view returns (uint256);\\n\\n    function proofBy(bytes32 _proof) external view returns (address);\\n\\n    function multiplierOf(address _bluechip) external view returns (uint16);\\n\\n    function boosterWeights(address _bluechip) external view returns (uint256);\\n\\n    function proofExpiryOf(bytes32 _proof) external view returns (uint256);\\n\\n    function stakedOf(bytes32 _proof) external view returns (uint256);\\n\\n    function customBoosterWeights(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function customMultiplierOf(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function createCustomBooster(\\n        uint256 _projectId,\\n        address[] memory _bluechips,\\n        uint16[] memory _multipers\\n    ) external;\\n\\n    function createProof(address _bluechip, uint256 _tokenId) external payable;\\n\\n    function createCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external payable;\\n\\n    function challengeProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function challengeCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function renewProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function renewCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function redeemProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function redeemCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function addBlueChip(address _bluechip, uint16 _multiper) external;\\n}\\n\",\"keccak256\":\"0xe56848adbfdf1124cc15295d2b418f348de15001668fbaa1ef9ca4edad014c8c\",\"license\":\"MIT\"},\"contracts/interfaces/IConfigStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IConfigStore {\\n    event SetBaseURI(string uri);\\n\\n    event SetBaseContractURI(string uri);\\n\\n    event SetSigner(address signer);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function baseContractURI() external view returns (string memory);\\n\\n    function signer() external view returns (address);\\n\\n    function setBaseURI(string memory _uri) external;\\n\\n    function setBaseContractURI(string memory _uri) external;\\n\\n    function setSigner(address _signer) external;\\n}\\n\",\"keccak256\":\"0x79eb0298de1ae6151bdd2314c379637d6f49d320a33c18479eaa8ceb58702f5b\",\"license\":\"MIT\"},\"contracts/interfaces/IDAOGovernorBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface IDAOGovernorBooster {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Queued,\\n        Failed,\\n        Expired,\\n        Executed\\n    }\\n\\n    struct Proposal {\\n        string uri;\\n        uint256 id;\\n        bytes32 hash;\\n        uint256 start;\\n        uint256 end;\\n        uint256 minVoters;\\n        uint256 minVotes;\\n        ProposalState state;\\n    }\\n\\n    struct ProposalParameter {\\n        string uri;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    struct Vote {\\n        uint256 totalVoters;\\n        uint256 totalVotes;\\n    }\\n\\n    struct PassStake {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint8 duration; // duartion in day\\n    }\\n\\n    struct StakeRecord {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint256 point;\\n        uint256 stakeAt;\\n        uint256 expiry;\\n    }\\n\\n    /************************* EVENTS *************************/\\n    event CreateGovernor(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        uint256[] multipers,\\n        address admin\\n    );\\n\\n    event ProposalCreated(uint256 indexed projectId, address indexed from, uint256 proposalId);\\n\\n    event ExecuteProposal(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 proposalId,\\n        uint8 proposalResult\\n    );\\n\\n    event StakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    event UnStakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* ERRORS *************************/\\n    error InsufficientBalance();\\n    error UnknowProposal();\\n    error BadPeriod();\\n    error InvalidSignature();\\n    error TransactionNotMatch();\\n    error TransactionReverted();\\n    error NotProjectOwner();\\n    error BadAmount();\\n    error NotExpired();\\n    error InvalidRecord();\\n\\n    function createGovernor(\\n        uint256 _projectId,\\n        uint256[] calldata _multipers,\\n        address _membershipPass,\\n        address _admin\\n    ) external;\\n\\n    function propose(\\n        uint256 _projectId,\\n        ProposalParameter calldata _properties,\\n        address _target,\\n        uint256 _value,\\n        string calldata _signature,\\n        bytes calldata _calldata\\n    ) external payable;\\n\\n    function execute(\\n        uint256 _projectId,\\n        uint256 _proposalId,\\n        uint8 _proposeResult,\\n        bytes memory _signatureBySigner,\\n        address _target,\\n        uint256 _value,\\n        string memory _signature,\\n        bytes memory _data\\n    ) external returns (bytes memory);\\n\\n    function stakePass(uint256 _projectId, PassStake[] memory _membershipPass)\\n        external\\n        returns (uint256);\\n\\n    function unStakePass(uint256 _projectId, uint256[] memory _recordIds)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x258499e39d0b1a64842d006d6289dcd437442024c964683049856c3385cf969b\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum FundingCycleState {\\n    WarmUp,\\n    Active,\\n    Expired\\n}\\n\\nstruct Metadata {\\n    // The unique handle name for the DAO\\n    bytes32 handle;\\n    // The NFT token address of Customized Boosters\\n    address[] customBoosters;\\n    // The multipliers of customized NFT \\n    uint16[] boosterMultipliers;\\n}\\n\\nstruct AuctionedPass {\\n    // tier id, indexed from 0\\n    uint256 id;\\n    // sale price in wei\\n    uint256 salePrice;\\n    // the amount of tickets open for sale in this round\\n    uint256 saleAmount;\\n    // the amount of tickets airdroped to community\\n    uint256 communityAmount;\\n    // who own the community vouchers can free mint the community ticket\\n    address communityVoucher;\\n    // the amount of tickets reserved to next round\\n    uint256 reservedAmount;\\n}\\n\\n// 1st funding cycle:\\n// gold ticket (erc1155) :  11 salePrice 1 reserveampiunt\\n\\n// silver ticket: 10 salePrice  2 reserveampiunt\\n\\nstruct FundingCycleProperties {\\n    uint256 id;\\n    uint256 projectId;\\n    uint256 previousId;\\n    uint256 start;\\n    uint256 target;\\n    uint256 lockRate;\\n    uint16 duration;\\n    bool isPaused;\\n    uint256 cycleLimit;\\n}\\n\\nstruct FundingCycleParameter {\\n    // rate to be locked in treasury 1000 -> 10% 9999 -> 99.99%\\n    uint16 lockRate;\\n    uint16 duration;\\n    uint256 cycleLimit;\\n    uint256 target;\\n}\\n\\ninterface IFundingCycles {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event FundingCycleExist(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 tapAmount\\n    );\\n\\n    event Unlock(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 unlockAmount,\\n        uint256 totalUnlockedAmount\\n    );\\n\\n    event Init(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 previous,\\n        uint256 start,\\n        uint256 duration,\\n        uint256 target,\\n        uint256 lockRate\\n    );\\n\\n    event InitAuctionedPass(\\n        uint256 indexed fundingCycleId,\\n        AuctionedPass autionPass\\n    );\\n\\n    event UpdateLocked(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 depositAmount,\\n        uint256 totalDepositedAmount\\n    );\\n\\n    error InsufficientBalance();\\n    error BadCycleLimit();\\n    error BadDuration();\\n    error BadLockRate();\\n\\n\\n    // === External View  === // \\n    function latestIdFundingProject(uint256 _projectId) external view returns (uint256);\\n\\n    function count() external view returns (uint256);\\n\\n    function MAX_CYCLE_LIMIT() external view returns (uint8);\\n\\n    function getFundingCycle(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (FundingCycleProperties memory);\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] memory _auctionedPass\\n    ) external returns (FundingCycleProperties memory);\\n\\n    // === External Transactions === //\\n    function currentOf(uint256 _projectId) external view returns (FundingCycleProperties memory);\\n\\n    function setPauseFundingCycle(uint256 _projectId, bool _paused) external returns (bool);\\n\\n    function updateLocked(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function tap(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function unlock(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function getTappableAmount(uint256 _fundingCycleId) external view returns (uint256);\\n\\n    function getFundingCycleState(uint256 _fundingCycleId) external view returns (FundingCycleState);\\n\\n    function getAutionedPass(uint256 _fundingCycleId, uint256 _tierId) external view returns(AuctionedPass memory);\\n}\\n\",\"keccak256\":\"0x6484d0141cbc7e714d990f3b2567de8b882fbbd165fca65bff29e58835d873ee\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"./IConfigStore.sol\\\";\\n\\ninterface IMembershipPass is IERC1155, IERC2981 {\\n    event MintPass(address indexed recepient, uint256 indexed tier, uint256 amount);\\n\\n    event BatchMintPass(address indexed recepient, uint256[] tiers, uint256[] amounts);\\n\\n    error TierNotSet();\\n    error TierUnknow();\\n    error BadCapacity();\\n    error BadFee();\\n    error InsufficientBalance();\\n\\n    function feeCollector() external view returns (address);\\n\\n    function configStore() external view returns (IConfigStore);\\n\\n    /**\\n     * @notice\\n     * Implement ERC2981, but actually the most marketplaces have their own royalty logic\\n     */\\n    function royaltyInfo(uint256 _tier, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount);\\n\\n    function mintPassForMember(\\n        address _recepient,\\n        uint256 _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function batchMintPassForMember(\\n        address _recepient,\\n        uint256[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function updateFeeCollector(address _feeCollector) external;\\n}\\n\",\"keccak256\":\"0xf654e0174cc10dd42df8022d58ee56e13001d985fae8d387761b2a33d93a72f2\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPassBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IMembershipPass} from \\\"./IMembershipPass.sol\\\";\\nimport {IRoyaltyDistributor} from \\\"./IRoyaltyDistributor.sol\\\";\\n\\nstruct PayInfoWithWeight {\\n    uint256 tier;\\n    uint256 amount;\\n    uint256 weight;\\n}\\nstruct WeightInfo {\\n    uint256 amount;\\n    uint256 sqrtWeight;\\n}\\n\\ninterface IMembershipPassBooth {\\n    error ProjectNotExist();\\n\\n    /************************* EVENTS *************************/\\n    event Issue(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        address royaltyDistributor,\\n        uint256[] tierFee,\\n        uint256[] tierCapacity,\\n        uint256[] multipers\\n    );\\n\\n    event BatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event AirdropBatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event DistributeRoyaltyFee(\\n        uint256 indexed projectId,\\n        uint256 merkleRootId,\\n        uint256 distributeAmount,\\n        uint256 distributeAt,\\n        string ipfsHash\\n    );\\n\\n    event ClaimRoyaltyFee(\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256[] merkleRootIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* VIEW FUNCTIONS *************************/\\n    function tierSizeOf(uint256 _projectId) external view returns (uint256);\\n\\n    function membershipPassOf(uint256 _projectId) external view returns (IMembershipPass);\\n\\n    function royaltyDistributorOf(uint256 _projectId) external view returns (IRoyaltyDistributor);\\n\\n    function totalBiddingAmountBy(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function totalSqrtWeightBy(uint256 _fundingCycleId, uint256 _tierId) external returns (uint256);\\n\\n    function depositedWeightBy(\\n        address _from,\\n        uint256 _fundingCycleId,\\n        uint256 _tierId\\n    ) external view returns (uint256, uint256);\\n\\n    function claimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedAmountOf(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function issue(\\n        uint256 _projectId,\\n        uint256[] calldata _tierFees,\\n        uint256[] calldata _tierCapacities,\\n        uint256[] calldata _multipers\\n    ) external returns (address);\\n\\n    function stake(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        PayInfoWithWeight[] memory _payInfo\\n    ) external;\\n\\n    function batchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function airdropBatchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _tierIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function getUserAllocation(\\n        address _user,\\n        uint256 _projectId,\\n        uint256 _fundingCycleId\\n    ) external view returns (uint256[] memory);\\n\\n    function getEstimatingUserAllocation(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256[] memory _biddingAmounts,\\n        uint256[] memory _weights\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x10b7b89b5f936b530876f2bf4bca290ed1d8d3185acbafde39677de07787513a\",\"license\":\"MIT\"},\"contracts/interfaces/IPayoutStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\nstruct PayoutMod {\\n    uint16 percent;\\n    address payable beneficiary;\\n}\\n\\n\\ninterface IPayoutStore {\\n\\n    error BadPercentage();\\n    error BadTotalPercentage();\\n    error BadAddress();\\n    error NoOp();\\n\\n    event SetPayoutMod(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        PayoutMod mod,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function payoutModsOf(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (PayoutMod[] memory);\\n\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        PayoutMod[] memory _mods\\n    ) external;\\n\\n}\",\"keccak256\":\"0x1a96678a4018df454e854662c50c26682fed9602d567d883f1a69b99c8c0bbeb\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    error EmptyHandle();\\n    error TakenedHandle();\\n    error UnAuthorized();\\n\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 handle,\\n        address caller\\n    );\\n\\n    event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n    event SetBaseURI(string baseURI);\\n\\n    function count() external view returns (uint256);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n    \\n    function setBaseURI(string memory _uri) external;\\n}\\n\",\"keccak256\":\"0x3e81d01ea05c8a60c23fde7c7b565803d1f1788e6c3268f7626d42de02fd887e\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRoyaltyDistributor {\\n    error UnAuthorized();\\n    error MerkleRootExist();\\n    error BadBalance();\\n    error AlreadyClaimed();\\n    error SizeNotMatch();\\n\\n    function claimRoyaltyFee(\\n        address _from,\\n        uint256[] calldata _merkleRootIds,\\n        bytes32[][] memory _merkleProofs,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function distributeRoyaltyFee(uint256 _distributeAmount, bytes32 _merkleRoot)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9e54d786817c13b074c78fe77c4c02e0a7e7cb04220e2e2fdfa38c80bd52ab4\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IFundingCycles.sol\\\";\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./IBluechipsBooster.sol\\\";\\nimport \\\"./IDAOGovernorBooster.sol\\\";\\nimport \\\"./IMembershipPassBooth.sol\\\";\\nimport \\\"./IPayoutStore.sol\\\";\\n\\nstruct ImmutablePassTier {\\n    uint256 tierFee;\\n    uint256 multiplier;\\n    uint256 tierCapacity;\\n}\\n\\ninterface ITerminal {\\n    event Pay(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256[] tiers,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Airdrop(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256[] tierIds,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Claim(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 refundAmount,\\n        uint256[] offeringAmounts\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 govFeeAmount,\\n        uint256 netTransferAmount\\n    );\\n\\n    event AddToBalance(uint256 indexed projectId, uint256 amount, address beneficiary);\\n\\n    event UnlockTreasury(uint256 indexed projectId, uint256 unlockAmount);\\n\\n    event SetTapFee(uint256 fee);\\n\\n    event SetContributeFee(uint256 fee);\\n\\n    event SetMinLockRate(uint256 minLockRate);\\n\\n    event DistributeToPayoutMod(uint256 indexed projectId, uint256 indexed fundingCycleId, PayoutMod mod, uint256 amount, address receiver);\\n\\n    error Voucher721(address _voucher);\\n    error NoCommunityTicketLeft();\\n    error FundingCycleNotExist();\\n    error FundingCyclePaused();\\n    error FundingCycleActived();\\n    error InsufficientBalance();\\n    error AlreadyClaimed();\\n    error ZeroAddress();\\n    error BadOperationPeriod();\\n    error OnlyGovernor();\\n    error UnAuthorized();\\n    error LastWeightMustBe1();\\n    error BadPayment();\\n    error BadAmount();\\n    error BadLockRate();\\n    error BadTapFee();\\n\\n    function superAdmin() external view returns (address);\\n\\n    function tapFee() external view returns (uint256);\\n\\n    function contributeFee() external view returns (uint256);\\n\\n    function devTreasury() external view returns (address);\\n\\n    function minLockRate() external view returns (uint256);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function fundingCycles() external view returns (IFundingCycles);\\n\\n    function membershipPassBooth() external view returns (IMembershipPassBooth);\\n\\n    function daoGovernorBooster() external view returns (IDAOGovernorBooster);\\n\\n    function bluechipsBooster() external view returns (IBluechipsBooster);\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n    function payoutStore() external view returns (IPayoutStore);\\n\\n    function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n    function addToBalance(uint256 _projectId) external payable;\\n\\n    function setTapFee(uint256 _fee) external;\\n\\n    function setContributeFee(uint256 _fee) external;\\n\\n    function setMinLockRate(uint256 _minLockRate) external;\\n\\n    function createDao(\\n        Metadata memory _metadata,\\n        ImmutablePassTier[] calldata _tiers,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] memory _payoutMods\\n    ) external;\\n\\n    function createNewFundingCycle(\\n        uint256 projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] calldata _payoutMod\\n    ) external;\\n\\n    function contribute(\\n        uint256 _projectId,\\n        uint256[] memory _tiers,\\n        uint256[] memory _amounts,\\n        string memory _memo\\n    ) external payable;\\n\\n    function communityContribute(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        string memory _memo\\n    ) external;\\n\\n    function claimPassOrRefund(uint256 _projectId, uint256 _fundingCycleId) external;\\n\\n    function tap(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unLockTreasury(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _unlockAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc567bfe1f856ef4975f3a466a6f091eff22e8d5a8c6473d6b0ab6b340bf0206d\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    error ZeroAddress();\\n    error UnAuthorized();\\n    error UnknowTerminal();\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x6cc378750f4f01d98e587014e0ae7815d75788ab4741e5020cc0dd12815e5583\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminalUtility {\\n    error UnAuthorized();\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n}\\n\",\"keccak256\":\"0x358295960cfdafb516f540d130421deb236feff2a998ff8062cd31b890a87cfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003a1838038062003a18833981016040819052620000349162000486565b604080518082018252601481527f426c756543686970205374616b652050726f6f6600000000000000000000000060208083019182528351808501909452600a84526929aa20a5a2a82927a7a360b11b908401528151849386939290916200009f9160009162000347565b508051620000b590600190602084019062000347565b5050600680546001600160a01b0319166001600160a01b0393909316929092179091555060601b6001600160601b03191660805282518451146200010c57604051630b661e2560e41b815260040160405180910390fd5b60005b84518110156200033c5760006001600160a01b03168582815181106200014557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415620001765760405163d92e233d60e01b815260040160405180910390fd5b8381815181106200019757634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1660001480620001e25750609661ffff16848281518110620001d457634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16115b156200020157604051637f68872960e11b815260040160405180910390fd5b8381815181106200022257634e487b7160e01b600052603260045260246000fd5b6020026020010151600a60008784815181106200024f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548161ffff021916908361ffff1602179055507fad31513de3c13ac6ea0b15cf17103355c732b2ff1018e354547f79f4e44e7346858281518110620002d357634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110620002fc57634e487b7160e01b600052603260045260246000fd5b60200260200101516040516200032b9291906001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a16001016200010f565b505050505062000643565b8280546200035590620005d7565b90600052602060002090601f016020900481019282620003795760008555620003c4565b82601f106200039457805160ff1916838001178555620003c4565b82800160010185558215620003c4579182015b82811115620003c4578251825591602001919060010190620003a7565b50620003d2929150620003d6565b5090565b5b80821115620003d25760008155600101620003d7565b8051620003fa816200062a565b919050565b600082601f83011262000410578081fd5b81516020620004296200042383620005b1565b6200057e565b80838252828201915082860187848660051b890101111562000449578586fd5b855b858110156200047957815161ffff8116811462000466578788fd5b845292840192908401906001016200044b565b5090979650505050505050565b600080600080608085870312156200049c578384fd5b84516001600160401b0380821115620004b3578586fd5b818701915087601f830112620004c7578586fd5b81516020620004da6200042383620005b1565b8083825282820191508286018c848660051b8901011115620004fa578a8bfd5b8a96505b848710156200052957805162000514816200062a565b835260019690960195918301918301620004fe565b50918a015191985090935050508082111562000543578485fd5b506200055287828801620003ff565b9350506200056360408601620003ed565b91506200057360608601620003ed565b905092959194509250565b604051601f8201601f191681016001600160401b0381118282101715620005a957620005a962000614565b604052919050565b60006001600160401b03821115620005cd57620005cd62000614565b5060051b60200190565b600181811c90821680620005ec57607f821691505b602082108114156200060e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200064057600080fd5b50565b60805160601c6133af62000669600039600081816104600152610a3401526133af6000f3fe60806040526004361061020f5760003560e01c806386a3e0f411610118578063bc541297116100a0578063de5ad6e71161006f578063de5ad6e7146106ad578063e906611c146106cd578063e985e9c5146106e8578063ee05b77e14610731578063f72eff7d1461075157600080fd5b8063bc541297146105ee578063c87b56dd14610624578063cd1fd62514610644578063cd5bfb631461068057600080fd5b8063980b1b82116100e7578063980b1b821461055b578063a22cb4651461057b578063a4a20afe1461059b578063acf0d872146105bb578063b88d4fde146105ce57600080fd5b806386a3e0f4146104c25780638e4a5248146104e25780638ebdaf481461052657806395d89b411461054657600080fd5b80633fccc4921161019b5780636352211e1161016a5780636352211e1461041b578063655a081f1461043b5780636abcf8e31461044e57806370a08231146104825780637ae98a5f146104a257600080fd5b80633fccc4921461038157806342842e0e146103ae5780635b9df828146103ce5780635e52fb84146103fb57600080fd5b8063095ea7b3116101e2578063095ea7b3146102c75780630e42eb69146102e957806323b872dd1461030957806329575f6a1461032957806334f917ee1461034957600080fd5b806301ffc9a71461021457806306661abd1461024957806306fdde031461026d578063081812fc1461028f575b600080fd5b34801561022057600080fd5b5061023461022f366004612e80565b61077e565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b5061025f60075481565b604051908152602001610240565b34801561027957600080fd5b506102826107d0565b6040516102409190613106565b34801561029b57600080fd5b506102af6102aa366004612e68565b610862565b6040516001600160a01b039091168152602001610240565b3480156102d357600080fd5b506102e76102e2366004612e09565b6108fc565b005b3480156102f557600080fd5b506102e7610304366004612edc565b610a12565b34801561031557600080fd5b506102e7610324366004612ca8565b610d3c565b34801561033557600080fd5b506006546102af906001600160a01b031681565b34801561035557600080fd5b5061025f610364366004612eb8565b600f60209081526000928352604080842090915290825290205481565b34801561038d57600080fd5b5061025f61039c366004612e68565b600c6020526000908152604090205481565b3480156103ba57600080fd5b506102e76103c9366004612ca8565b610d6d565b3480156103da57600080fd5b5061025f6103e9366004612c38565b600b6020526000908152604090205481565b34801561040757600080fd5b506102e7610416366004612e34565b610d88565b34801561042757600080fd5b506102af610436366004612e68565b610ef0565b6102e7610449366004612e34565b610f67565b34801561045a57600080fd5b506102af7f000000000000000000000000000000000000000000000000000000000000000081565b34801561048e57600080fd5b5061025f61049d366004612c38565b611236565b3480156104ae57600080fd5b506102e76104bd366004612dd5565b6112bd565b3480156104ce57600080fd5b506102e76104dd366004612e34565b6113b0565b3480156104ee57600080fd5b506105136104fd366004612c38565b600a6020526000908152604090205461ffff1681565b60405161ffff9091168152602001610240565b34801561053257600080fd5b5061025f610541366004612eb8565b611538565b34801561055257600080fd5b50610282611597565b34801561056757600080fd5b506102e7610576366004612e09565b6115a6565b34801561058757600080fd5b506102e7610596366004612da4565b61172a565b3480156105a757600080fd5b506102e76105b6366004612e09565b611739565b6102e76105c9366004612e09565b61189b565b3480156105da57600080fd5b506102e76105e9366004612ce8565b611b76565b3480156105fa57600080fd5b506102af610609366004612e68565b6009602052600090815260409020546001600160a01b031681565b34801561063057600080fd5b5061028261063f366004612e68565b611bae565b34801561065057600080fd5b5061051361065f366004612eb8565b600e60209081526000928352604080842090915290825290205461ffff1681565b34801561068c57600080fd5b5061025f61069b366004612e68565b60086020526000908152604090205481565b3480156106b957600080fd5b506102e76106c8366004612e34565b611c95565b3480156106d957600080fd5b5061025f66038d7ea4c6800081565b3480156106f457600080fd5b50610234610703366004612c70565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561073d57600080fd5b506102e761074c366004612e09565b611e36565b34801561075d57600080fd5b5061025f61076c366004612e68565b600d6020526000908152604090205481565b60006001600160e01b031982166380ac58cd60e01b14806107af57506001600160e01b03198216635b5e139f60e01b145b806107ca57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546107df9061329f565b80601f016020809104026020016040519081016040528092919081815260200182805461080b9061329f565b80156108585780601f1061082d57610100808354040283529160200191610858565b820191906000526020600020905b81548152906001019060200180831161083b57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108e05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061090782610ef0565b9050806001600160a01b0316836001600160a01b031614156109755760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108d7565b336001600160a01b038216148061099157506109918133610703565b610a035760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016108d7565b610a0d8383611fd2565b505050565b604051634fe0eced60e01b815260048101849052839033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634fe0eced9060240160206040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190612c54565b6001600160a01b031614610ad55760405163be24598360e01b815260040160405180910390fd5b8151835114610af757604051630b661e2560e41b815260040160405180910390fd5b60005b8351811015610cfb5760006001600160a01b0316848281518110610b2e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610b5e5760405163d92e233d60e01b815260040160405180910390fd5b6000858152600e6020526040812085518290879085908110610b9057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205461ffff161115610bd75760405163a25f5c6d60e01b815260040160405180910390fd5b828181518110610bf757634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1660001480610c41575061012c61ffff16838281518110610c3357634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16115b15610c5f57604051637f68872960e11b815260040160405180910390fd5b828181518110610c7f57634e487b7160e01b600052603260045260246000fd5b6020026020010151600e60008781526020019081526020016000206000868481518110610cbc57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805461ffff191661ffff92909216919091179055600101610afa565b50837f7ea43422e6bbb761540648ebd981f8a2757eb7980a005ac67c6205c0ac3893008484604051610d2e92919061308c565b60405180910390a250505050565b610d463382612040565b610d625760405162461bcd60e51b81526004016108d79061316b565b610a0d838383612137565b610a0d83838360405180602001604052806000815250611b76565b6000818484604051602001610d9f93929190613027565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b031680610dee57604051637a74035160e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018590526001600160a01b038083169190871690636352211e9060240160206040518083038186803b158015610e3357600080fd5b505afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190612c54565b6001600160a01b03161415610e9357604051632158df0560e21b815260040160405180910390fd5b610ea185858433858861215b565b60408051858152602081018490526001600160a01b03871691339186917f4d3190a0de40c3b65555c6da1a2b2f98daab10923ec72cd680946b377c935ed4910160405180910390a45050505050565b6000818152600260205260408120546001600160a01b0316806107ca5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108d7565b6000818152600e602090815260408083206001600160a01b0387168452909152902054339061ffff16610fad576040516348066f5160e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018490526001600160a01b038083169190861690636352211e9060240160206040518083038186803b158015610ff257600080fd5b505afa158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190612c54565b6001600160a01b03161461105157604051631022318760e21b815260040160405180910390fd5b66038d7ea4c6800034101561107957604051631e9acf1760e31b815260040160405180910390fd5b600082858560405160200161109093929190613027565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b039081169083168114156110e65760405163214f202560e11b815260040160405180910390fd5b6001600160a01b038116156111035761110386868486858961215b565b600082815260096020908152604080832080546001600160a01b0319166001600160a01b03888116918217909255888552600e8452828520918b16855290835281842054888552600f8452828520918552925282205461ffff909116906111699061226a565b611173919061323d565b6000868152600f602090815260408083206001600160a01b038916845290915281208290559091506111a962015180601e61323d565b6111b39042613211565b6000858152600c60209081526040808320849055600d82529182902034905581518a8152908101879052908101829052606081018490529091506001600160a01b03898116919087169088907fe5e3b9db014c86f243f659a7ec69a6f5c2e82f784fa0865c03496c96226eef3a9060800160405180910390a45050505050505050565b60006001600160a01b0382166112a15760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108d7565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146112e857604051637bfa4b9f60e01b815260040160405180910390fd5b6001600160a01b03821661130f5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604090205461ffff161561134a5760405163cccd236960e01b815260040160405180910390fd5b6001600160a01b0382166000818152600a6020908152604091829020805461ffff191661ffff86169081179091558251938452908301527fad31513de3c13ac6ea0b15cf17103355c732b2ff1018e354547f79f4e44e7346910160405180910390a15050565b60405133906000906113ca90849087908790602001613027565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b039081169083168114158061148f57506040516331a9108f60e11b81526004810186905233906001600160a01b03881690636352211e9060240160206040518083038186803b15801561144b57600080fd5b505afa15801561145f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114839190612c54565b6001600160a01b031614155b156114ad5760405163be24598360e01b815260040160405180910390fd5b60006114bd62015180601e61323d565b6114c79042613211565b6000848152600c602090815260409182902083905581518981529081018690529081018290529091506001600160a01b03808916919086169087907fbf1ce35bef2cd5a096653785db006adc4ddd3d11f29b7e3eee9c4f9c7466efe59060600160405180910390a450505050505050565b6000828152600f602090815260408083206001600160a01b03851684529091528120546115649061226a565b6001600160a01b0383166000908152600b60205260409020546115869061226a565b611590919061323d565b9392505050565b6060600180546107df9061329f565b60405133906000906115be9085908590602001612fd6565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b039081169083168114158061168357506040516331a9108f60e11b81526004810185905233906001600160a01b03871690636352211e9060240160206040518083038186803b15801561163f57600080fd5b505afa158015611653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116779190612c54565b6001600160a01b031614155b156116a15760405163be24598360e01b815260040160405180910390fd5b60006116b162015180601e61323d565b6116bb9042613211565b6000848152600c602090815260409182902083905581518881529081018690529081018290529091506001600160a01b0380881691908616907fadb4b838f34a4f3477a5f0f74c8c56324642cede080fbcf1bfc94b0459bbe860906060015b60405180910390a3505050505050565b611735338383612280565b5050565b6000828260405160200161174e929190612fd6565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b03168061179d57604051637a74035160e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018490526001600160a01b038083169190861690636352211e9060240160206040518083038186803b1580156117e257600080fd5b505afa1580156117f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181a9190612c54565b6001600160a01b0316141561184257604051632158df0560e21b815260040160405180910390fd5b61184f848484338561234f565b60408051848152602081018490526001600160a01b0386169133917fa22f862566c43102aa1a3cac98c9df6aeda93fc1ea59b26f9f03bbc4d1aa0873910160405180910390a350505050565b6001600160a01b0382166000908152600a6020526040902054339061ffff166118d7576040516348066f5160e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018390526001600160a01b038083169190851690636352211e9060240160206040518083038186803b15801561191c57600080fd5b505afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119549190612c54565b6001600160a01b03161461197b57604051631022318760e21b815260040160405180910390fd5b66038d7ea4c680003410156119a357604051631e9acf1760e31b815260040160405180910390fd5b600083836040516020016119b8929190612fd6565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b03908116908316811415611a0e5760405163214f202560e11b815260040160405180910390fd5b6001600160a01b03811615611a2a57611a2a858584868561234f565b600082815260096020908152604080832080546001600160a01b0319166001600160a01b038881169182179092559089168452600a835281842054908452600b90925282205461ffff90911690611a809061226a565b611a8a919061323d565b6001600160a01b0385166000908152600b60205260408120829055909150611ab662015180601e61323d565b611ac09042613211565b6000858152600c60209081526040808320849055600d90915281203490556007805492935090611aef836132da565b9190505550611b0085600754612472565b6007546000858152600860209081526040918290209290925580518881529182018690528101829052606081018390526001600160a01b0380891691908716907f27f28bdfac186adc776b99cfddf92501afb3e795d2c1d5376d220bde887422e49060800160405180910390a350505050505050565b611b803383612040565b611b9c5760405162461bcd60e51b81526004016108d79061316b565b611ba88484848461248c565b50505050565b6000818152600260205260409020546060906001600160a01b0316611c2d5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108d7565b6000611c4460408051602081019091526000815290565b90506000815111611c645760405180602001604052806000815250611590565b80611c6e846124bf565b604051602001611c7f929190612ff8565b6040516020818303038152906040529392505050565b6040513390600090611caf90849087908790602001613027565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b0390811690831681141580611d7c57506040516331a9108f60e11b8152600481018690526001600160a01b03871690636352211e9060240160206040518083038186803b158015611d2e57600080fd5b505afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190612c54565b6001600160a01b0316836001600160a01b031614155b15611d9a5760405163be24598360e01b815260040160405180910390fd5b6000828152600c6020526040902054421015611dc957604051630b699b5960e31b815260040160405180910390fd5b611dd786868486878961215b565b856001600160a01b0316836001600160a01b0316857f867ae3625c9ec83b4bfbd96ea1cdbba46e59427c14025cc303169f4586ad86768886604051611e26929190918252602082015260400190565b60405180910390a4505050505050565b6040513390600090611e4e9085908590602001612fd6565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b0390811690831681141580611f1b57506040516331a9108f60e11b8152600481018590526001600160a01b03861690636352211e9060240160206040518083038186803b158015611ecd57600080fd5b505afa158015611ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f059190612c54565b6001600160a01b0316836001600160a01b031614155b15611f395760405163be24598360e01b815260040160405180910390fd5b6000828152600c6020526040902054421015611f6857604051630b699b5960e31b815260040160405180910390fd5b611f75858584868761234f565b846001600160a01b0316836001600160a01b03167ff82393acf0d1da47d0747845a0fc86d8f66a89ae3382af9a92a5373e8e89d5ae8685604051611fc3929190918252602082015260400190565b60405180910390a35050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061200782610ef0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166120b95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108d7565b60006120c483610ef0565b9050806001600160a01b0316846001600160a01b031614806120ff5750836001600160a01b03166120f484610862565b6001600160a01b0316145b8061212f57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b6121428383836125d9565b60405163a24e573d60e01b815260040160405180910390fd5b6000848152600d6020526040902054612175908490612775565b6000848152600d60209081526040808320839055600c8252808320839055838352600e82528083206001600160a01b03808b16855290835281842054858552600f845282852091871685529252909120546121d49161ffff1690613229565b6000828152600f602090815260408083206001600160a01b038781168086528285528386209687558a86526009855283862080546001600160a01b031916905594859052908352935481518886168152928301869052908201889052606082018990526080820152918816917f33b98b166c8a8bf479d4bc095e21089327f61b6f9ab7864c5f0ce80f5ffe7d009060a00161171a565b6000811561227857816107ca565b600192915050565b816001600160a01b0316836001600160a01b031614156122e25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108d7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000838152600d6020526040902054612369908390612775565b6000838152600d60209081526040808320839055600c82528083208390556001600160a01b038089168452600a8352818420549085168452600b909252909120546123b89161ffff1690613229565b6001600160a01b0382166000908152600b60209081526040808320939093558582526008905220546123e98161288e565b60008481526008602090815260408083208390556009825280832080546001600160a01b03191690556001600160a01b03858116808552600b84529382902054825188831681529384018990529183018990526060830191909152881691907f972c4dedeeb09b1ecff4067f58a715ac29c9e805a5ff6200edd109aa0abacdb59060800161171a565b611735828260405180602001604052806000815250612929565b612497848484612137565b6124a38484848461295c565b611ba85760405162461bcd60e51b81526004016108d790613119565b6060816124e35750506040805180820190915260018152600360fc1b602082015290565b8160005b811561250d57806124f7816132da565b91506125069050600a83613229565b91506124e7565b60008167ffffffffffffffff81111561253657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612560576020820181803683370190505b5090505b841561212f5761257560018361325c565b9150612582600a866132f5565b61258d906030613211565b60f81b8183815181106125b057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506125d2600a86613229565b9450612564565b826001600160a01b03166125ec82610ef0565b6001600160a01b0316146126505760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108d7565b6001600160a01b0382166126b25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108d7565b6126bd600082611fd2565b6001600160a01b03831660009081526003602052604081208054600192906126e690849061325c565b90915550506001600160a01b0382166000908152600360205260408120805460019290612714908490613211565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b804710156127c55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108d7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612812576040519150601f19603f3d011682016040523d82523d6000602084013e612817565b606091505b5050905080610a0d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108d7565b600061289982610ef0565b90506128a6600083611fd2565b6001600160a01b03811660009081526003602052604081208054600192906128cf90849061325c565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6129338383612a69565b612940600084848461295c565b610a0d5760405162461bcd60e51b81526004016108d790613119565b60006001600160a01b0384163b15612a5e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906129a090339089908890889060040161304f565b602060405180830381600087803b1580156129ba57600080fd5b505af19250505080156129ea575060408051601f3d908101601f191682019092526129e791810190612e9c565b60015b612a44573d808015612a18576040519150601f19603f3d011682016040523d82523d6000602084013e612a1d565b606091505b508051612a3c5760405162461bcd60e51b81526004016108d790613119565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061212f565b506001949350505050565b6001600160a01b038216612abf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108d7565b6000818152600260205260409020546001600160a01b031615612b245760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108d7565b6001600160a01b0382166000908152600360205260408120805460019290612b4d908490613211565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600082601f830112612bbb578081fd5b81356020612bd0612bcb836131ed565b6131bc565b80838252828201915082860187848660051b8901011115612bef578586fd5b855b85811015612c1457612c0282612c21565b84529284019290840190600101612bf1565b5090979650505050505050565b803561ffff81168114612c3357600080fd5b919050565b600060208284031215612c49578081fd5b81356115908161334b565b600060208284031215612c65578081fd5b81516115908161334b565b60008060408385031215612c82578081fd5b8235612c8d8161334b565b91506020830135612c9d8161334b565b809150509250929050565b600080600060608486031215612cbc578081fd5b8335612cc78161334b565b92506020840135612cd78161334b565b929592945050506040919091013590565b60008060008060808587031215612cfd578081fd5b8435612d088161334b565b9350602085810135612d198161334b565b935060408601359250606086013567ffffffffffffffff80821115612d3c578384fd5b818801915088601f830112612d4f578384fd5b813581811115612d6157612d61613335565b612d73601f8201601f191685016131bc565b91508082528984828501011115612d88578485fd5b8084840185840137810190920192909252939692955090935050565b60008060408385031215612db6578182fd5b8235612dc18161334b565b915060208301358015158114612c9d578182fd5b60008060408385031215612de7578182fd5b8235612df28161334b565b9150612e0060208401612c21565b90509250929050565b60008060408385031215612e1b578182fd5b8235612e268161334b565b946020939093013593505050565b600080600060608486031215612e48578081fd5b8335612e538161334b565b95602085013595506040909401359392505050565b600060208284031215612e79578081fd5b5035919050565b600060208284031215612e91578081fd5b813561159081613363565b600060208284031215612ead578081fd5b815161159081613363565b60008060408385031215612eca578182fd5b823591506020830135612c9d8161334b565b600080600060608486031215612ef0578081fd5b8335925060208085013567ffffffffffffffff80821115612f0f578384fd5b818701915087601f830112612f22578384fd5b8135612f30612bcb826131ed565b8082825285820191508585018b878560051b8801011115612f4f578788fd5b8795505b83861015612f7a578035612f668161334b565b835260019590950194918601918601612f53565b50965050506040870135925080831115612f92578384fd5b5050612fa086828701612bab565b9150509250925092565b60008151808452612fc2816020860160208601613273565b601f01601f19169290920160200192915050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6000835161300a818460208801613273565b83519083019061301e818360208801613273565b01949350505050565b92835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061308290830184612faa565b9695505050505050565b604080825283519082018190526000906020906060840190828701845b828110156130ce5781516001600160a01b0316845292840192908401906001016130a9565b50505083810382850152845180825285830191830190845b81811015612c1457835161ffff16835292840192918401916001016130e6565b6020815260006115906020830184612faa565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156131e5576131e5613335565b604052919050565b600067ffffffffffffffff82111561320757613207613335565b5060051b60200190565b6000821982111561322457613224613309565b500190565b6000826132385761323861331f565b500490565b600081600019048311821515161561325757613257613309565b500290565b60008282101561326e5761326e613309565b500390565b60005b8381101561328e578181015183820152602001613276565b83811115611ba85750506000910152565b600181811c908216806132b357607f821691505b602082108114156132d457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132ee576132ee613309565b5060010190565b6000826133045761330461331f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461336057600080fd5b50565b6001600160e01b03198116811461336057600080fdfea2646970667358221220b62f2ad7efc6e9bb1594fa79ae450f6ee26320ae2d615cd63aedb4684caf5f1264736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061020f5760003560e01c806386a3e0f411610118578063bc541297116100a0578063de5ad6e71161006f578063de5ad6e7146106ad578063e906611c146106cd578063e985e9c5146106e8578063ee05b77e14610731578063f72eff7d1461075157600080fd5b8063bc541297146105ee578063c87b56dd14610624578063cd1fd62514610644578063cd5bfb631461068057600080fd5b8063980b1b82116100e7578063980b1b821461055b578063a22cb4651461057b578063a4a20afe1461059b578063acf0d872146105bb578063b88d4fde146105ce57600080fd5b806386a3e0f4146104c25780638e4a5248146104e25780638ebdaf481461052657806395d89b411461054657600080fd5b80633fccc4921161019b5780636352211e1161016a5780636352211e1461041b578063655a081f1461043b5780636abcf8e31461044e57806370a08231146104825780637ae98a5f146104a257600080fd5b80633fccc4921461038157806342842e0e146103ae5780635b9df828146103ce5780635e52fb84146103fb57600080fd5b8063095ea7b3116101e2578063095ea7b3146102c75780630e42eb69146102e957806323b872dd1461030957806329575f6a1461032957806334f917ee1461034957600080fd5b806301ffc9a71461021457806306661abd1461024957806306fdde031461026d578063081812fc1461028f575b600080fd5b34801561022057600080fd5b5061023461022f366004612e80565b61077e565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b5061025f60075481565b604051908152602001610240565b34801561027957600080fd5b506102826107d0565b6040516102409190613106565b34801561029b57600080fd5b506102af6102aa366004612e68565b610862565b6040516001600160a01b039091168152602001610240565b3480156102d357600080fd5b506102e76102e2366004612e09565b6108fc565b005b3480156102f557600080fd5b506102e7610304366004612edc565b610a12565b34801561031557600080fd5b506102e7610324366004612ca8565b610d3c565b34801561033557600080fd5b506006546102af906001600160a01b031681565b34801561035557600080fd5b5061025f610364366004612eb8565b600f60209081526000928352604080842090915290825290205481565b34801561038d57600080fd5b5061025f61039c366004612e68565b600c6020526000908152604090205481565b3480156103ba57600080fd5b506102e76103c9366004612ca8565b610d6d565b3480156103da57600080fd5b5061025f6103e9366004612c38565b600b6020526000908152604090205481565b34801561040757600080fd5b506102e7610416366004612e34565b610d88565b34801561042757600080fd5b506102af610436366004612e68565b610ef0565b6102e7610449366004612e34565b610f67565b34801561045a57600080fd5b506102af7f000000000000000000000000000000000000000000000000000000000000000081565b34801561048e57600080fd5b5061025f61049d366004612c38565b611236565b3480156104ae57600080fd5b506102e76104bd366004612dd5565b6112bd565b3480156104ce57600080fd5b506102e76104dd366004612e34565b6113b0565b3480156104ee57600080fd5b506105136104fd366004612c38565b600a6020526000908152604090205461ffff1681565b60405161ffff9091168152602001610240565b34801561053257600080fd5b5061025f610541366004612eb8565b611538565b34801561055257600080fd5b50610282611597565b34801561056757600080fd5b506102e7610576366004612e09565b6115a6565b34801561058757600080fd5b506102e7610596366004612da4565b61172a565b3480156105a757600080fd5b506102e76105b6366004612e09565b611739565b6102e76105c9366004612e09565b61189b565b3480156105da57600080fd5b506102e76105e9366004612ce8565b611b76565b3480156105fa57600080fd5b506102af610609366004612e68565b6009602052600090815260409020546001600160a01b031681565b34801561063057600080fd5b5061028261063f366004612e68565b611bae565b34801561065057600080fd5b5061051361065f366004612eb8565b600e60209081526000928352604080842090915290825290205461ffff1681565b34801561068c57600080fd5b5061025f61069b366004612e68565b60086020526000908152604090205481565b3480156106b957600080fd5b506102e76106c8366004612e34565b611c95565b3480156106d957600080fd5b5061025f66038d7ea4c6800081565b3480156106f457600080fd5b50610234610703366004612c70565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561073d57600080fd5b506102e761074c366004612e09565b611e36565b34801561075d57600080fd5b5061025f61076c366004612e68565b600d6020526000908152604090205481565b60006001600160e01b031982166380ac58cd60e01b14806107af57506001600160e01b03198216635b5e139f60e01b145b806107ca57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546107df9061329f565b80601f016020809104026020016040519081016040528092919081815260200182805461080b9061329f565b80156108585780601f1061082d57610100808354040283529160200191610858565b820191906000526020600020905b81548152906001019060200180831161083b57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108e05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061090782610ef0565b9050806001600160a01b0316836001600160a01b031614156109755760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108d7565b336001600160a01b038216148061099157506109918133610703565b610a035760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016108d7565b610a0d8383611fd2565b505050565b604051634fe0eced60e01b815260048101849052839033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634fe0eced9060240160206040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190612c54565b6001600160a01b031614610ad55760405163be24598360e01b815260040160405180910390fd5b8151835114610af757604051630b661e2560e41b815260040160405180910390fd5b60005b8351811015610cfb5760006001600160a01b0316848281518110610b2e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610b5e5760405163d92e233d60e01b815260040160405180910390fd5b6000858152600e6020526040812085518290879085908110610b9057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205461ffff161115610bd75760405163a25f5c6d60e01b815260040160405180910390fd5b828181518110610bf757634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1660001480610c41575061012c61ffff16838281518110610c3357634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16115b15610c5f57604051637f68872960e11b815260040160405180910390fd5b828181518110610c7f57634e487b7160e01b600052603260045260246000fd5b6020026020010151600e60008781526020019081526020016000206000868481518110610cbc57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805461ffff191661ffff92909216919091179055600101610afa565b50837f7ea43422e6bbb761540648ebd981f8a2757eb7980a005ac67c6205c0ac3893008484604051610d2e92919061308c565b60405180910390a250505050565b610d463382612040565b610d625760405162461bcd60e51b81526004016108d79061316b565b610a0d838383612137565b610a0d83838360405180602001604052806000815250611b76565b6000818484604051602001610d9f93929190613027565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b031680610dee57604051637a74035160e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018590526001600160a01b038083169190871690636352211e9060240160206040518083038186803b158015610e3357600080fd5b505afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190612c54565b6001600160a01b03161415610e9357604051632158df0560e21b815260040160405180910390fd5b610ea185858433858861215b565b60408051858152602081018490526001600160a01b03871691339186917f4d3190a0de40c3b65555c6da1a2b2f98daab10923ec72cd680946b377c935ed4910160405180910390a45050505050565b6000818152600260205260408120546001600160a01b0316806107ca5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108d7565b6000818152600e602090815260408083206001600160a01b0387168452909152902054339061ffff16610fad576040516348066f5160e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018490526001600160a01b038083169190861690636352211e9060240160206040518083038186803b158015610ff257600080fd5b505afa158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190612c54565b6001600160a01b03161461105157604051631022318760e21b815260040160405180910390fd5b66038d7ea4c6800034101561107957604051631e9acf1760e31b815260040160405180910390fd5b600082858560405160200161109093929190613027565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b039081169083168114156110e65760405163214f202560e11b815260040160405180910390fd5b6001600160a01b038116156111035761110386868486858961215b565b600082815260096020908152604080832080546001600160a01b0319166001600160a01b03888116918217909255888552600e8452828520918b16855290835281842054888552600f8452828520918552925282205461ffff909116906111699061226a565b611173919061323d565b6000868152600f602090815260408083206001600160a01b038916845290915281208290559091506111a962015180601e61323d565b6111b39042613211565b6000858152600c60209081526040808320849055600d82529182902034905581518a8152908101879052908101829052606081018490529091506001600160a01b03898116919087169088907fe5e3b9db014c86f243f659a7ec69a6f5c2e82f784fa0865c03496c96226eef3a9060800160405180910390a45050505050505050565b60006001600160a01b0382166112a15760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108d7565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146112e857604051637bfa4b9f60e01b815260040160405180910390fd5b6001600160a01b03821661130f5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604090205461ffff161561134a5760405163cccd236960e01b815260040160405180910390fd5b6001600160a01b0382166000818152600a6020908152604091829020805461ffff191661ffff86169081179091558251938452908301527fad31513de3c13ac6ea0b15cf17103355c732b2ff1018e354547f79f4e44e7346910160405180910390a15050565b60405133906000906113ca90849087908790602001613027565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b039081169083168114158061148f57506040516331a9108f60e11b81526004810186905233906001600160a01b03881690636352211e9060240160206040518083038186803b15801561144b57600080fd5b505afa15801561145f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114839190612c54565b6001600160a01b031614155b156114ad5760405163be24598360e01b815260040160405180910390fd5b60006114bd62015180601e61323d565b6114c79042613211565b6000848152600c602090815260409182902083905581518981529081018690529081018290529091506001600160a01b03808916919086169087907fbf1ce35bef2cd5a096653785db006adc4ddd3d11f29b7e3eee9c4f9c7466efe59060600160405180910390a450505050505050565b6000828152600f602090815260408083206001600160a01b03851684529091528120546115649061226a565b6001600160a01b0383166000908152600b60205260409020546115869061226a565b611590919061323d565b9392505050565b6060600180546107df9061329f565b60405133906000906115be9085908590602001612fd6565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b039081169083168114158061168357506040516331a9108f60e11b81526004810185905233906001600160a01b03871690636352211e9060240160206040518083038186803b15801561163f57600080fd5b505afa158015611653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116779190612c54565b6001600160a01b031614155b156116a15760405163be24598360e01b815260040160405180910390fd5b60006116b162015180601e61323d565b6116bb9042613211565b6000848152600c602090815260409182902083905581518881529081018690529081018290529091506001600160a01b0380881691908616907fadb4b838f34a4f3477a5f0f74c8c56324642cede080fbcf1bfc94b0459bbe860906060015b60405180910390a3505050505050565b611735338383612280565b5050565b6000828260405160200161174e929190612fd6565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b03168061179d57604051637a74035160e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018490526001600160a01b038083169190861690636352211e9060240160206040518083038186803b1580156117e257600080fd5b505afa1580156117f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181a9190612c54565b6001600160a01b0316141561184257604051632158df0560e21b815260040160405180910390fd5b61184f848484338561234f565b60408051848152602081018490526001600160a01b0386169133917fa22f862566c43102aa1a3cac98c9df6aeda93fc1ea59b26f9f03bbc4d1aa0873910160405180910390a350505050565b6001600160a01b0382166000908152600a6020526040902054339061ffff166118d7576040516348066f5160e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018390526001600160a01b038083169190851690636352211e9060240160206040518083038186803b15801561191c57600080fd5b505afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119549190612c54565b6001600160a01b03161461197b57604051631022318760e21b815260040160405180910390fd5b66038d7ea4c680003410156119a357604051631e9acf1760e31b815260040160405180910390fd5b600083836040516020016119b8929190612fd6565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b03908116908316811415611a0e5760405163214f202560e11b815260040160405180910390fd5b6001600160a01b03811615611a2a57611a2a858584868561234f565b600082815260096020908152604080832080546001600160a01b0319166001600160a01b038881169182179092559089168452600a835281842054908452600b90925282205461ffff90911690611a809061226a565b611a8a919061323d565b6001600160a01b0385166000908152600b60205260408120829055909150611ab662015180601e61323d565b611ac09042613211565b6000858152600c60209081526040808320849055600d90915281203490556007805492935090611aef836132da565b9190505550611b0085600754612472565b6007546000858152600860209081526040918290209290925580518881529182018690528101829052606081018390526001600160a01b0380891691908716907f27f28bdfac186adc776b99cfddf92501afb3e795d2c1d5376d220bde887422e49060800160405180910390a350505050505050565b611b803383612040565b611b9c5760405162461bcd60e51b81526004016108d79061316b565b611ba88484848461248c565b50505050565b6000818152600260205260409020546060906001600160a01b0316611c2d5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108d7565b6000611c4460408051602081019091526000815290565b90506000815111611c645760405180602001604052806000815250611590565b80611c6e846124bf565b604051602001611c7f929190612ff8565b6040516020818303038152906040529392505050565b6040513390600090611caf90849087908790602001613027565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b0390811690831681141580611d7c57506040516331a9108f60e11b8152600481018690526001600160a01b03871690636352211e9060240160206040518083038186803b158015611d2e57600080fd5b505afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190612c54565b6001600160a01b0316836001600160a01b031614155b15611d9a5760405163be24598360e01b815260040160405180910390fd5b6000828152600c6020526040902054421015611dc957604051630b699b5960e31b815260040160405180910390fd5b611dd786868486878961215b565b856001600160a01b0316836001600160a01b0316857f867ae3625c9ec83b4bfbd96ea1cdbba46e59427c14025cc303169f4586ad86768886604051611e26929190918252602082015260400190565b60405180910390a4505050505050565b6040513390600090611e4e9085908590602001612fd6565b60408051601f198184030181529181528151602092830120600081815260099093529120549091506001600160a01b0390811690831681141580611f1b57506040516331a9108f60e11b8152600481018590526001600160a01b03861690636352211e9060240160206040518083038186803b158015611ecd57600080fd5b505afa158015611ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f059190612c54565b6001600160a01b0316836001600160a01b031614155b15611f395760405163be24598360e01b815260040160405180910390fd5b6000828152600c6020526040902054421015611f6857604051630b699b5960e31b815260040160405180910390fd5b611f75858584868761234f565b846001600160a01b0316836001600160a01b03167ff82393acf0d1da47d0747845a0fc86d8f66a89ae3382af9a92a5373e8e89d5ae8685604051611fc3929190918252602082015260400190565b60405180910390a35050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061200782610ef0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166120b95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108d7565b60006120c483610ef0565b9050806001600160a01b0316846001600160a01b031614806120ff5750836001600160a01b03166120f484610862565b6001600160a01b0316145b8061212f57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b6121428383836125d9565b60405163a24e573d60e01b815260040160405180910390fd5b6000848152600d6020526040902054612175908490612775565b6000848152600d60209081526040808320839055600c8252808320839055838352600e82528083206001600160a01b03808b16855290835281842054858552600f845282852091871685529252909120546121d49161ffff1690613229565b6000828152600f602090815260408083206001600160a01b038781168086528285528386209687558a86526009855283862080546001600160a01b031916905594859052908352935481518886168152928301869052908201889052606082018990526080820152918816917f33b98b166c8a8bf479d4bc095e21089327f61b6f9ab7864c5f0ce80f5ffe7d009060a00161171a565b6000811561227857816107ca565b600192915050565b816001600160a01b0316836001600160a01b031614156122e25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108d7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000838152600d6020526040902054612369908390612775565b6000838152600d60209081526040808320839055600c82528083208390556001600160a01b038089168452600a8352818420549085168452600b909252909120546123b89161ffff1690613229565b6001600160a01b0382166000908152600b60209081526040808320939093558582526008905220546123e98161288e565b60008481526008602090815260408083208390556009825280832080546001600160a01b03191690556001600160a01b03858116808552600b84529382902054825188831681529384018990529183018990526060830191909152881691907f972c4dedeeb09b1ecff4067f58a715ac29c9e805a5ff6200edd109aa0abacdb59060800161171a565b611735828260405180602001604052806000815250612929565b612497848484612137565b6124a38484848461295c565b611ba85760405162461bcd60e51b81526004016108d790613119565b6060816124e35750506040805180820190915260018152600360fc1b602082015290565b8160005b811561250d57806124f7816132da565b91506125069050600a83613229565b91506124e7565b60008167ffffffffffffffff81111561253657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612560576020820181803683370190505b5090505b841561212f5761257560018361325c565b9150612582600a866132f5565b61258d906030613211565b60f81b8183815181106125b057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506125d2600a86613229565b9450612564565b826001600160a01b03166125ec82610ef0565b6001600160a01b0316146126505760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108d7565b6001600160a01b0382166126b25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108d7565b6126bd600082611fd2565b6001600160a01b03831660009081526003602052604081208054600192906126e690849061325c565b90915550506001600160a01b0382166000908152600360205260408120805460019290612714908490613211565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b804710156127c55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108d7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612812576040519150601f19603f3d011682016040523d82523d6000602084013e612817565b606091505b5050905080610a0d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108d7565b600061289982610ef0565b90506128a6600083611fd2565b6001600160a01b03811660009081526003602052604081208054600192906128cf90849061325c565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6129338383612a69565b612940600084848461295c565b610a0d5760405162461bcd60e51b81526004016108d790613119565b60006001600160a01b0384163b15612a5e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906129a090339089908890889060040161304f565b602060405180830381600087803b1580156129ba57600080fd5b505af19250505080156129ea575060408051601f3d908101601f191682019092526129e791810190612e9c565b60015b612a44573d808015612a18576040519150601f19603f3d011682016040523d82523d6000602084013e612a1d565b606091505b508051612a3c5760405162461bcd60e51b81526004016108d790613119565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061212f565b506001949350505050565b6001600160a01b038216612abf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108d7565b6000818152600260205260409020546001600160a01b031615612b245760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108d7565b6001600160a01b0382166000908152600360205260408120805460019290612b4d908490613211565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600082601f830112612bbb578081fd5b81356020612bd0612bcb836131ed565b6131bc565b80838252828201915082860187848660051b8901011115612bef578586fd5b855b85811015612c1457612c0282612c21565b84529284019290840190600101612bf1565b5090979650505050505050565b803561ffff81168114612c3357600080fd5b919050565b600060208284031215612c49578081fd5b81356115908161334b565b600060208284031215612c65578081fd5b81516115908161334b565b60008060408385031215612c82578081fd5b8235612c8d8161334b565b91506020830135612c9d8161334b565b809150509250929050565b600080600060608486031215612cbc578081fd5b8335612cc78161334b565b92506020840135612cd78161334b565b929592945050506040919091013590565b60008060008060808587031215612cfd578081fd5b8435612d088161334b565b9350602085810135612d198161334b565b935060408601359250606086013567ffffffffffffffff80821115612d3c578384fd5b818801915088601f830112612d4f578384fd5b813581811115612d6157612d61613335565b612d73601f8201601f191685016131bc565b91508082528984828501011115612d88578485fd5b8084840185840137810190920192909252939692955090935050565b60008060408385031215612db6578182fd5b8235612dc18161334b565b915060208301358015158114612c9d578182fd5b60008060408385031215612de7578182fd5b8235612df28161334b565b9150612e0060208401612c21565b90509250929050565b60008060408385031215612e1b578182fd5b8235612e268161334b565b946020939093013593505050565b600080600060608486031215612e48578081fd5b8335612e538161334b565b95602085013595506040909401359392505050565b600060208284031215612e79578081fd5b5035919050565b600060208284031215612e91578081fd5b813561159081613363565b600060208284031215612ead578081fd5b815161159081613363565b60008060408385031215612eca578182fd5b823591506020830135612c9d8161334b565b600080600060608486031215612ef0578081fd5b8335925060208085013567ffffffffffffffff80821115612f0f578384fd5b818701915087601f830112612f22578384fd5b8135612f30612bcb826131ed565b8082825285820191508585018b878560051b8801011115612f4f578788fd5b8795505b83861015612f7a578035612f668161334b565b835260019590950194918601918601612f53565b50965050506040870135925080831115612f92578384fd5b5050612fa086828701612bab565b9150509250925092565b60008151808452612fc2816020860160208601613273565b601f01601f19169290920160200192915050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6000835161300a818460208801613273565b83519083019061301e818360208801613273565b01949350505050565b92835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061308290830184612faa565b9695505050505050565b604080825283519082018190526000906020906060840190828701845b828110156130ce5781516001600160a01b0316845292840192908401906001016130a9565b50505083810382850152845180825285830191830190845b81811015612c1457835161ffff16835292840192918401916001016130e6565b6020815260006115906020830184612faa565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156131e5576131e5613335565b604052919050565b600067ffffffffffffffff82111561320757613207613335565b5060051b60200190565b6000821982111561322457613224613309565b500190565b6000826132385761323861331f565b500490565b600081600019048311821515161561325757613257613309565b500290565b60008282101561326e5761326e613309565b500390565b60005b8381101561328e578181015183820152602001613276565b83811115611ba85750506000910152565b600181811c908216806132b357607f821691505b602082108114156132d457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132ee576132ee613309565b5060010190565b6000826133045761330461331f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461336057600080fd5b50565b6001600160e01b03198116811461336057600080fdfea2646970667358221220b62f2ad7efc6e9bb1594fa79ae450f6ee26320ae2d615cd63aedb4684caf5f1264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBlueChip(address,uint16)": {
        "params": {
          "_bluechip": "bluechip address",
          "_multiper": "multiper of booster"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "challengeCustomProof(address,uint256,uint256)": {
        "params": {
          "_bluechip": "the cutomized nft address you want to challenge",
          "_projectId": "The ID of DAO for this cusotmized NFT you want to register",
          "_tokenId": "which token you want to challenge"
        }
      },
      "challengeProof(address,uint256)": {
        "params": {
          "_bluechip": "the bluechip nft address you want to challenge",
          "_tokenId": "which token you want to challenge"
        }
      },
      "createCustomBooster(uint256,address[],uint16[])": {
        "params": {
          "_bluechips": "The customized NFTs token addresses",
          "_multipers": "multipliers of each nft 300 => 3x",
          "_projectId": "The DAO ID"
        }
      },
      "createCustomProof(address,uint256,uint256)": {
        "params": {
          "_bluechip": "The customized NFT Token Addresses",
          "_projectId": "The ID of the DAO you want to register this proof",
          "_tokenId": "The ID of the NFT in token address"
        }
      },
      "createProof(address,uint256)": {
        "params": {
          "_bluechip": "The bluechip NFT Address(ERC721) you want to proof",
          "_tokenId": "which tokenID you want to proof"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getBoosterWeight(uint256,address)": {
        "params": {
          "_from": "wallet address",
          "_projectId": "the project id of query"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "redeemCustomProof(address,uint256,uint256)": {
        "params": {
          "_bluechip": "the customized nft address to redeem",
          "_projectId": "The ID of the DAO that the cusotmized NFT belongs with",
          "_tokenId": "which token you want to redeem"
        }
      },
      "redeemProof(address,uint256)": {
        "params": {
          "_bluechip": "the bluechip nft address to redeem",
          "_tokenId": "which token you want to redeem"
        }
      },
      "renewCustomProof(address,uint256,uint256)": {
        "params": {
          "_bluechip": "The customized NFT token address to renew",
          "_projectId": "the project id of bluechip belongs",
          "_tokenId": "which token you want to renew"
        }
      },
      "renewProof(address,uint256)": {
        "params": {
          "_bluechip": "the bluechip nft address to renew",
          "_tokenId": "which token you want to renew"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBlueChip(address,uint16)": {
        "notice": "The governor can add a new universal bluechip as booster"
      },
      "challengeCustomProof(address,uint256,uint256)": {
        "notice": "Anyone can challenge a proof if the customized NFT no longer belong to the pre owner"
      },
      "challengeProof(address,uint256)": {
        "notice": "Anyone can challenge a proof if the bluechip no longer belong to the pre owner"
      },
      "constructor": {
        "notice": "Punk:   x1.5   (150) BAYC:   x1.5   (150) Azuki:  x1.35  (135) Doodle: x1.2   (120) CloneX: x1.1   (110) There has 2 types of Boost: BlueChips NFT and Customized NFT based on which DAO you set. For customized NFT support in each DAO, will be followed by the configure when the DAO created."
      },
      "createCustomBooster(uint256,address[],uint16[])": {
        "notice": "DAO Creator able to set the customized NFT support to boost DAO points"
      },
      "createCustomProof(address,uint256,uint256)": {
        "notice": "People who have the customized nfts can create a proof which promises that they will hold the nfts for 30 days"
      },
      "createProof(address,uint256)": {
        "notice": "People who have the bluechip NFTs can create a proof that promises they will hold the NFTs for 30 days        "
      },
      "getBoosterWeight(uint256,address)": {
        "notice": "Return the weights of an address weights = universal weights * customized weights"
      },
      "redeemCustomProof(address,uint256,uint256)": {
        "notice": "The proof owner can redeem the proof"
      },
      "redeemProof(address,uint256)": {
        "notice": "The proof owner can redeem the proof"
      },
      "renewCustomProof(address,uint256,uint256)": {
        "notice": "The proof owner can renew the proof. Don't need to pay for renew"
      },
      "renewProof(address,uint256)": {
        "notice": "The proof owner can renew the proof. Don't need to pay for renew"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2551,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2553,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2557,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2561,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2565,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2571,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 15390,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "superAdmin",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8147,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "count",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8152,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "tokenIdOf",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 8157,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "proofBy",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 8162,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "multiplierOf",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 8167,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "boosterWeights",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8172,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "proofExpiryOf",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 8177,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "stakedOf",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 8184,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "customMultiplierOf",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint16))"
      },
      {
        "astId": 8191,
        "contract": "contracts/BluechipsBooster.sol:BluechipsBooster",
        "label": "customBoosterWeights",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint16))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint16)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}