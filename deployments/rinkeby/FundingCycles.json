{
  "address": "0x98D133D9f9Ea4D60Cb1f1AD782E7093B377dC368",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadCycleLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadLockRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnAuthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reconfigured",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Configure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reconfigured",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "FundingCycleExist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previous",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockRate",
          "type": "uint256"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "communityAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "communityVoucher",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reservedAmount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AuctionedPass",
          "name": "autionPass",
          "type": "tuple"
        }
      ],
      "name": "InitAuctionedPass",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tapAmount",
          "type": "uint256"
        }
      ],
      "name": "Tap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalUnlockedAmount",
          "type": "uint256"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDepositedAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdateLocked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_CYCLE_LIMIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "lockRate",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycleParameter",
          "name": "_params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "communityAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "communityVoucher",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reservedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionedPass[]",
          "name": "_auctionedPass",
          "type": "tuple[]"
        }
      ],
      "name": "configure",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "previousId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockRate",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycleProperties",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "previousId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockRate",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycleProperties",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundingCycleProperties",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "previousId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockRate",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "duration",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "cycleLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tierId",
          "type": "uint256"
        }
      ],
      "name": "getAutionedPass",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "communityAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "communityVoucher",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reservedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionedPass",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "getFundingCycle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "previousId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockRate",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "cycleLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundingCycleProperties",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "getFundingCycleState",
      "outputs": [
        {
          "internalType": "enum FundingCycleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "getTappableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalTappable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "latestIdFundingProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPauseFundingCycle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "tap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateLocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80dd83af50a3c93084acfdbb52bb99a1d0ec8bc4b839dfbc7a000c742743da04",
  "receipt": {
    "to": null,
    "from": "0x33aaE4F4bA8019704137703Fe808F6B172D72D6B",
    "contractAddress": "0x98D133D9f9Ea4D60Cb1f1AD782E7093B377dC368",
    "transactionIndex": 12,
    "gasUsed": "1439547",
    "logsBloom": "0x
    "blockHash": "0xf9ef4f410c846534151c140181dcb7f945ca969e65b9654c97279bf2568cf79f",
    "transactionHash": "0x80dd83af50a3c93084acfdbb52bb99a1d0ec8bc4b839dfbc7a000c742743da04",
    "logs": [],
    "blockNumber": 10982943,
    "cumulativeGasUsed": "7651291",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x22f3c559e8b31817f25Df62786924b593cC5776E"
  ],
  "numDeployments": 1,
  "solcInputHash": "4e9316abea9744a68b7555d93f5656d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadCycleLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadLockRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reconfigured\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Configure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reconfigured\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"FundingCycleExist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockRate\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"communityVoucher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservedAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AuctionedPass\",\"name\":\"autionPass\",\"type\":\"tuple\"}],\"name\":\"InitAuctionedPass\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tapAmount\",\"type\":\"uint256\"}],\"name\":\"Tap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUnlockedAmount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDepositedAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateLocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CYCLE_LIMIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"lockRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycleParameter\",\"name\":\"_params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"communityVoucher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionedPass[]\",\"name\":\"_auctionedPass\",\"type\":\"tuple[]\"}],\"name\":\"configure\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycleProperties\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycleProperties\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundingCycleProperties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"}],\"name\":\"getAutionedPass\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"communityVoucher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionedPass\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"getFundingCycle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct FundingCycleProperties\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"getFundingCycleState\",\"outputs\":[{\"internalType\":\"enum FundingCycleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"getTappableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalTappable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"latestIdFundingProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPauseFundingCycle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"configure(uint256,(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[])\":{\"params\":{\"_auctionedPass\":\"auction pass information\",\"_params\":\"The parameters for Funding Cycle\",\"_projectId\":\"Dao Id\"}},\"currentOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of project\"}},\"getFundingCycle(uint256)\":{\"params\":{\"_fundingCycleId\":\"The ID of the funding cycle to get\"}},\"getFundingCycleState(uint256)\":{\"params\":{\"_fundingCycleId\":\"The ID of funding cycle to get state\"}},\"getTappableAmount(uint256)\":{\"params\":{\"_fundingCycleId\":\"The ID of funding cycle to get max tappable amount\"}},\"setPauseFundingCycle(uint256,bool)\":{\"params\":{\"_paused\":\"Paused or not\",\"_projectId\":\"The project ID to update\"}},\"tap(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of tap\",\"_fundingCycleId\":\"The ID of funding cycle to tap funds\",\"_projectId\":\"The project ID of funding cycle belongs to\"}},\"unlock(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of unlock\",\"_fundingCycleId\":\"The ID of funding cycle to unlock funds\",\"_projectId\":\"The project ID of funding cycle belongs to\"}},\"updateLocked(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of tap\",\"_fundingCycleId\":\"The ID of funding cycle to update records\",\"_projectId\":\"The project ID of funding cycle belongs to\"}}},\"stateVariables\":{\"count\":{\"details\":\"Funding cycles have IDs > 0.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configure(uint256,(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[])\":{\"notice\":\"configure funding cycle return a new funding cycle by call init if there is no funding cycle exist in the project return existing funding cycle if the funding cycle still active in the project return new funding cycle if there is no active funding cycle\"},\"count()\":{\"notice\":\"The total number of funding cycles created, which is used for issuing funding cycle IDs.\"},\"currentOf(uint256)\":{\"notice\":\"Current active funding cycle of this dao project\"},\"getFundingCycle(uint256)\":{\"notice\":\" Get the funding cycle with the given ID\"},\"getFundingCycleState(uint256)\":{\"notice\":\"Return the state of giving funding cycle\"},\"getTappableAmount(uint256)\":{\"notice\":\"Get the tappable amount of giving funding cycle\"},\"setPauseFundingCycle(uint256,bool)\":{\"notice\":\"Update the contribute status of giving project\"},\"tap(uint256,uint256,uint256)\":{\"notice\":\"Tap the funds from funding cycle\"},\"unlock(uint256,uint256,uint256)\":{\"notice\":\"Unlock the funds in project's treasury, only can unlock by funding cycle\"},\"updateLocked(uint256,uint256,uint256)\":{\"notice\":\"Update the total deposited funds of funding cycle, include overflowed funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundingCycles.sol\":\"FundingCycles\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/FundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {TerminalUtility, ITerminalDirectory} from \\\"./abstract/TerminalUtility.sol\\\";\\nimport {IProjects} from \\\"./interfaces/IProjects.sol\\\";\\nimport {\\n    AuctionedPass,\\n    IFundingCycles,\\n    FundingCycleState,\\n    FundingCycleParameter,\\n    FundingCycleProperties\\n} from \\\"./interfaces/IFundingCycles.sol\\\";\\n\\ncontract FundingCycles is IFundingCycles, TerminalUtility {\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Stored Constants  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    // The number of seconds in a day.\\n    uint256 private constant SECONDS_IN_DAY = 3600; // TODO 1 hour\\n\\n    // The max percentage of funds lock in treasury 100%\\n    uint256 private constant MAX_LOCK_RATE = 1e4;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Stored Properties \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    // Stores the amount that has been tapped within each funding cycle.\\n    // TODO: Accept with ETH only, should we add ERC20 tokens?\\n    mapping(uint256 => uint256) private _tappedOf;\\n\\n    // Stores the amount that has been contributed of each funding cycle.\\n    // TODO: Accept with ETH only, should we add ERC20 tokens?\\n    mapping(uint256 => uint256) private _depositedOf;\\n\\n    // Stores the amount that has been unlocked of each funding cycle.\\n    // TODO: Accept with ETH only, should we add ERC20 tokens?\\n    mapping(uint256 => uint256) private _unLockedOf;\\n    \\n    // mapping fundingCycleId with auctionPass\\n    mapping(bytes32 => AuctionedPass) private _fundingCycleIdAuctionedPass;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551    Public Stored Constants  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    uint8 public constant override MAX_CYCLE_LIMIT = 32;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551  Public Stored Properties   \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /// @notice The total number of funding cycles created, which is used for issuing funding cycle IDs.\\n    /// @dev Funding cycles have IDs > 0.\\n    uint256 public override count;\\n\\n    // mapping id with funding cycle properties\\n    mapping(uint256 => FundingCycleProperties) public fundingCycleProperties;\\n\\n    // mapping projectId with latest funding cycle properties id\\n    mapping(uint256 => uint256) public override latestIdFundingProject;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External VIEW  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n      \\n    /**\\n        @notice \\n        Get the funding cycle with the given ID\\n\\n        @param _fundingCycleId The ID of the funding cycle to get\\n     */\\n    function getFundingCycle(uint256 _fundingCycleId)\\n        public\\n        view\\n        override\\n        returns (FundingCycleProperties memory)\\n    {\\n        return fundingCycleProperties[_fundingCycleId];\\n    }\\n\\n    /**\\n        @notice\\n        Current active funding cycle of this dao project\\n\\n        @param _projectId The ID of project\\n     */\\n    function currentOf(uint256 _projectId)\\n        external\\n        view\\n        override\\n        returns (FundingCycleProperties memory)\\n    {\\n        uint256 latestId = latestIdFundingProject[_projectId];\\n        return getFundingCycle(latestId);\\n    }\\n\\n    /**\\n        @notice\\n        Get the tappable amount of giving funding cycle\\n\\n        @param _fundingCycleId The ID of funding cycle to get max tappable amount\\n     */\\n    function getTappableAmount(uint256 _fundingCycleId)\\n        public\\n        override\\n        view\\n        returns (uint256 _totalTappable)\\n    {\\n        FundingCycleProperties memory _fundingCycle = fundingCycleProperties[_fundingCycleId];\\n\\n        uint256 _eligibleDeposited = _getEligibleDepositedAmount(_fundingCycleId);\\n        uint256 _baseTappable = (_eligibleDeposited * (1e4 - _fundingCycle.lockRate)) / 1e4;\\n\\n        _totalTappable = _baseTappable + _unLockedOf[_fundingCycleId] - _tappedOf[_fundingCycleId];\\n    }\\n\\n    /**\\n        @notice\\n        Return the state of giving funding cycle\\n\\n        @param _fundingCycleId The ID of funding cycle to get state\\n     */\\n    function getFundingCycleState(uint256 _fundingCycleId) public override view returns(FundingCycleState) {\\n        FundingCycleProperties memory _fundingCycle = fundingCycleProperties[_fundingCycleId];\\n\\n        if (block.timestamp < _fundingCycle.start) return FundingCycleState.WarmUp;\\n        if (block.timestamp >= _fundingCycle.start + (_fundingCycle.duration * SECONDS_IN_DAY)) return FundingCycleState.Expired;\\n\\n        return FundingCycleState.Active;\\n    }\\n    \\n    function getAutionedPass(uint256 _fundingCycleId, uint256 _tierId) external override view returns(AuctionedPass memory) {\\n        bytes32 _autionKey = keccak256(abi.encodePacked(_fundingCycleId, \\\"-\\\", _tierId));\\n        \\n        return _fundingCycleIdAuctionedPass[_autionKey];\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External Transaction  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    constructor(ITerminalDirectory _terminalDirectory) TerminalUtility(_terminalDirectory) {}\\n\\n    /**\\n        @notice\\n        configure funding cycle\\n        return a new funding cycle by call init if there is no funding cycle exist in the project\\n        return existing funding cycle if the funding cycle still active in the project\\n        return new funding cycle if there is no active funding cycle\\n\\n        @param _projectId Dao Id\\n        @param _params The parameters for Funding Cycle\\n        @param _auctionedPass auction pass information\\n     */\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass\\n    ) external override onlyTerminal(_projectId) returns (FundingCycleProperties memory) {\\n        if (_params.duration >= type(uint16).max) revert BadDuration();\\n        \\n        if (_params.lockRate > MAX_LOCK_RATE) revert BadLockRate();\\n\\n        // Currency must be less than the limit.\\n        if (_params.cycleLimit > MAX_CYCLE_LIMIT) revert BadCycleLimit();\\n\\n        uint256 configTime = block.timestamp;\\n\\n        if (latestIdFundingProject[_projectId] == 0) {\\n            //create a new one and return it because no fundingcycle active\\n            uint256 fundingCycleId = _init(_projectId, 0, _params);\\n            for (uint256 i; i < _auctionedPass.length;) {\\n                bytes32 _autionKey = keccak256(abi.encodePacked(fundingCycleId, \\\"-\\\", _auctionedPass[i].id));\\n                _fundingCycleIdAuctionedPass[_autionKey] = _auctionedPass[i];\\n                emit InitAuctionedPass(fundingCycleId, _auctionedPass[i]);\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n\\n            emit Configure(fundingCycleId, _projectId, configTime, msg.sender);\\n\\n            return getFundingCycle(fundingCycleId);\\n        } else {\\n            //check if the latestIdFunding project still running\\n            uint256 latestId = latestIdFundingProject[_projectId];\\n            FundingCycleProperties memory latestFundingCycleProperties = fundingCycleProperties[\\n                latestId\\n            ];\\n            if (\\n                block.timestamp >= latestFundingCycleProperties.start &&\\n                block.timestamp <=\\n                latestFundingCycleProperties.start +\\n                    (latestFundingCycleProperties.duration * SECONDS_IN_DAY)\\n            ) {\\n                emit FundingCycleExist(latestId, _projectId, configTime, msg.sender);\\n\\n                return latestFundingCycleProperties;\\n            }\\n\\n            uint256 fundingCycleId = _init(_projectId, latestId,_params);\\n            \\n            for (uint256 i; i < _auctionedPass.length;) {\\n                bytes32 _preAutionKey = keccak256(abi.encodePacked(fundingCycleId, \\\"-\\\", _auctionedPass[i].id));\\n                if ((_auctionedPass[i].saleAmount + _auctionedPass[i].communityAmount + _auctionedPass[i].reservedAmount) > _fundingCycleIdAuctionedPass[_preAutionKey].reservedAmount) {\\n                    revert InsufficientBalance();\\n                }\\n\\n                _fundingCycleIdAuctionedPass[keccak256(abi.encodePacked(fundingCycleId, \\\"-\\\", _auctionedPass[i].id))] = _auctionedPass[i];\\n                emit InitAuctionedPass(fundingCycleId, _auctionedPass[i]);\\n                \\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            emit Configure(fundingCycleId, _projectId, configTime, msg.sender);\\n            return getFundingCycle(fundingCycleId);\\n        }\\n    }\\n\\n    /**\\n        @notice\\n        Update the contribute status of giving project\\n\\n        @param _projectId The project ID to update\\n        @param _paused Paused or not\\n     */\\n    function setPauseFundingCycle(uint256 _projectId, bool _paused)\\n        external\\n        override\\n        onlyTerminal(_projectId)\\n        returns (bool)\\n    {\\n        uint256 latestId = latestIdFundingProject[_projectId];\\n        FundingCycleProperties storage latestFundingCycleProperties = fundingCycleProperties[\\n            latestId\\n        ];\\n        latestFundingCycleProperties.isPaused = _paused;\\n        return true;\\n    }\\n\\n    /**\\n        @notice\\n        Update the total deposited funds of funding cycle, include overflowed funds\\n\\n        @param _projectId The project ID of funding cycle belongs to\\n        @param _fundingCycleId The ID of funding cycle to update records\\n        @param _amount The amount of tap\\n     */\\n    function updateLocked(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external override onlyTerminal(_projectId) {\\n        _depositedOf[_fundingCycleId] += _amount;\\n\\n        emit UpdateLocked(_projectId, _fundingCycleId, _amount, _depositedOf[_fundingCycleId]);\\n    }\\n\\n    /**\\n        @notice\\n        Tap the funds from funding cycle\\n\\n        @param _projectId The project ID of funding cycle belongs to\\n        @param _fundingCycleId The ID of funding cycle to tap funds\\n        @param _amount The amount of tap\\n     */\\n    function tap(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external override onlyTerminal(_projectId) {\\n        uint256 _total = getTappableAmount(_fundingCycleId);\\n        if (_amount > _total) revert InsufficientBalance();\\n\\n        _tappedOf[_fundingCycleId] += _amount;\\n\\n        emit Tap(_projectId, _fundingCycleId, _amount);\\n    }\\n\\n    /**\\n        @notice\\n        Unlock the funds in project's treasury, only can unlock by funding cycle\\n\\n        @param _projectId The project ID of funding cycle belongs to\\n        @param _fundingCycleId The ID of funding cycle to unlock funds\\n        @param _amount The amount of unlock\\n     */\\n    function unlock(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external override onlyTerminal(_projectId) {\\n        uint256 _total = _getUnLockableAmount(_fundingCycleId);\\n        if (_amount > _total) revert InsufficientBalance();\\n\\n        _unLockedOf[_fundingCycleId] += _amount;\\n\\n        emit Unlock(_projectId, _fundingCycleId, _amount, _unLockedOf[_fundingCycleId]);\\n    }\\n\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Helper Functions  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n        @notice\\n        Initializes a funding cycle with the appropriate properties\\n\\n        @param _projectId The ID of the DAO\\n        @param _previousId previous funding cycle id before this funding cycle\\n        @param _params The parameters for Funding Cycle\\n     */\\n    function _init(\\n        uint256 _projectId,\\n        uint256 _previousId,\\n        FundingCycleParameter calldata _params\\n    ) private returns (uint256 newFundingCycleId) {\\n        count += 1;\\n        FundingCycleProperties memory newFundingCycle = FundingCycleProperties({\\n            id: count,\\n            projectId: _projectId,\\n            // @TODO delay start time for 5 mins\\n            start: block.timestamp + 300,\\n            duration: _params.duration,\\n            cycleLimit: _params.cycleLimit,\\n            isPaused: false,\\n            previousId: _previousId,\\n            target: _params.target,\\n            lockRate: _params.lockRate\\n        });\\n        latestIdFundingProject[_projectId] = newFundingCycle.id;\\n        fundingCycleProperties[count] = newFundingCycle;\\n\\n        emit Init(\\n            count,\\n            _projectId,\\n            _previousId,\\n            newFundingCycle.start,\\n            _params.duration,\\n            _params.target,\\n            _params.lockRate\\n        );\\n        return count;\\n    }\\n\\n    /**\\n        @notice\\n        Get the unlockable amount of giving funding cycle\\n\\n        @param _fundingCycleId The ID of funding cycle to get unlockable amount\\n     */\\n    function _getUnLockableAmount(uint256 _fundingCycleId)\\n        private\\n        view\\n        returns (uint256 _totalUnLockable)\\n    {\\n        FundingCycleProperties memory _fundingCycle = fundingCycleProperties[_fundingCycleId];\\n\\n        uint256 _eligibleDeposited = _getEligibleDepositedAmount(_fundingCycleId);\\n        uint256 _lockedAmount = (_eligibleDeposited * _fundingCycle.lockRate) / 1e4;\\n\\n        _totalUnLockable = _lockedAmount - _unLockedOf[_fundingCycleId];\\n    }\\n\\n    /**\\n        @notice\\n        Get the eligible amount of giving funding cycle, return the smaller value of target rising amount and actually deposit amount\\n\\n        @param _fundingCycleId The ID of funding cycle to get eligible amount\\n     */\\n    function _getEligibleDepositedAmount(uint256 _fundingCycleId)\\n        private\\n        view\\n        returns (uint256 _eligibleAmount)\\n    {\\n        FundingCycleProperties memory _fundingCycle = fundingCycleProperties[_fundingCycleId];\\n        uint256 _deposited = _depositedOf[_fundingCycleId];\\n\\n        _eligibleAmount = _deposited >= _fundingCycle.target ? _fundingCycle.target : _deposited;\\n    }\\n}\\n\",\"keccak256\":\"0xfe9ea25acf97c6e30fdf0a98616912e59ea30147750b64540045df698ee2cf54\",\"license\":\"MIT\"},\"contracts/abstract/TerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ITerminalUtility.sol\\\";\\n\\nabstract contract TerminalUtility is ITerminalUtility {\\n    modifier onlyTerminal(uint256 _projectId) {\\n        if (address(terminalDirectory.terminalOf(_projectId)) != msg.sender) revert UnAuthorized();\\n        _;\\n    }\\n\\n    ITerminalDirectory public immutable override terminalDirectory;\\n\\n    /** \\n      @param _terminalDirectory A directory of a project's current terminal to receive payments in.\\n    */\\n    constructor(ITerminalDirectory _terminalDirectory) {\\n        terminalDirectory = _terminalDirectory;\\n    }\\n}\\n\",\"keccak256\":\"0x1935ff1401b8482549ebb1877d49a6aafdef8fffb661a0f93a5d7820b3a1cbac\",\"license\":\"MIT\"},\"contracts/interfaces/IBluechipsBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBluechipsBooster {\\n    event CreateProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event CreateCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event ChallengeProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event ChallengeCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RenewProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event RenewCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event Remove(\\n        address indexed from,\\n        address beneficiary,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event RemoveCustomize(\\n        address indexed from,\\n        address beneficiary,\\n        uint256 projectId,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event AddBluechip(address bluechip, uint16 multiper);\\n\\n    event AddCustomBooster(uint256 indexed projectId, address[] bluechips, uint16[] multipers);\\n\\n    error SizeNotMatch();\\n    error BadMultiper();\\n    error ZeroAddress();\\n    error RenewFirst();\\n    error NotNFTOwner();\\n    error InsufficientBalance();\\n    error BoosterRegisterd();\\n    error BoosterNotRegisterd();\\n    error ProofNotRegisterd();\\n    error ChallengeFailed();\\n    error RedeemAfterExpired();\\n    error ForbiddenUpdate();\\n    error OnlyGovernor();\\n    error TransferDisabled();\\n\\n    function count() external view returns (uint256);\\n\\n    function tokenIdOf(bytes32 _proof) external view returns (uint256);\\n\\n    function proofBy(bytes32 _proof) external view returns (address);\\n\\n    function multiplierOf(address _bluechip) external view returns (uint16);\\n\\n    function boosterWeights(address _bluechip) external view returns (uint256);\\n\\n    function proofExpiryOf(bytes32 _proof) external view returns (uint256);\\n\\n    function stakedOf(bytes32 _proof) external view returns (uint256);\\n\\n    function customBoosterWeights(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function customMultiplierOf(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function createCustomBooster(\\n        uint256 _projectId,\\n        address[] memory _bluechips,\\n        uint16[] memory _multipers\\n    ) external;\\n\\n    function createProof(address _bluechip, uint256 _tokenId) external payable;\\n\\n    function createCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external payable;\\n\\n    function challengeProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function challengeCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function renewProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function renewCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function redeemProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function redeemCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function addBlueChip(address _bluechip, uint16 _multiper) external;\\n}\\n\",\"keccak256\":\"0xe56848adbfdf1124cc15295d2b418f348de15001668fbaa1ef9ca4edad014c8c\",\"license\":\"MIT\"},\"contracts/interfaces/IConfigStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IConfigStore {\\n    event SetBaseURI(string uri);\\n\\n    event SetBaseContractURI(string uri);\\n\\n    event SetSigner(address signer);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function baseContractURI() external view returns (string memory);\\n\\n    function signer() external view returns (address);\\n\\n    function setBaseURI(string memory _uri) external;\\n\\n    function setBaseContractURI(string memory _uri) external;\\n\\n    function setSigner(address _signer) external;\\n}\\n\",\"keccak256\":\"0x79eb0298de1ae6151bdd2314c379637d6f49d320a33c18479eaa8ceb58702f5b\",\"license\":\"MIT\"},\"contracts/interfaces/IDAOGovernorBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface IDAOGovernorBooster {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Queued,\\n        Failed,\\n        Expired,\\n        Executed\\n    }\\n\\n    struct Proposal {\\n        string uri;\\n        uint256 id;\\n        bytes32 hash;\\n        uint256 start;\\n        uint256 end;\\n        uint256 minVoters;\\n        uint256 minVotes;\\n        ProposalState state;\\n    }\\n\\n    struct ProposalParameter {\\n        string uri;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    struct Vote {\\n        uint256 totalVoters;\\n        uint256 totalVotes;\\n    }\\n\\n    struct PassStake {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint8 duration; // duartion in day\\n    }\\n\\n    struct StakeRecord {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint256 point;\\n        uint256 stakeAt;\\n        uint256 expiry;\\n    }\\n\\n    /************************* EVENTS *************************/\\n    event CreateGovernor(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        uint256[] multipers,\\n        address admin\\n    );\\n\\n    event ProposalCreated(uint256 indexed projectId, address indexed from, uint256 proposalId);\\n\\n    event ExecuteProposal(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 proposalId,\\n        uint8 proposalResult\\n    );\\n\\n    event StakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    event UnStakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* ERRORS *************************/\\n    error InsufficientBalance();\\n    error UnknowProposal();\\n    error BadPeriod();\\n    error InvalidSignature();\\n    error TransactionNotMatch();\\n    error TransactionReverted();\\n    error NotProjectOwner();\\n    error BadAmount();\\n    error NotExpired();\\n    error InvalidRecord();\\n\\n    function createGovernor(\\n        uint256 _projectId,\\n        uint256[] calldata _multipers,\\n        address _membershipPass,\\n        address _admin\\n    ) external;\\n\\n    function propose(\\n        uint256 _projectId,\\n        ProposalParameter calldata _properties,\\n        address _target,\\n        uint256 _value,\\n        string calldata _signature,\\n        bytes calldata _calldata\\n    ) external payable;\\n\\n    function execute(\\n        uint256 _projectId,\\n        uint256 _proposalId,\\n        uint8 _proposeResult,\\n        bytes memory _signatureBySigner,\\n        address _target,\\n        uint256 _value,\\n        string memory _signature,\\n        bytes memory _data\\n    ) external returns (bytes memory);\\n\\n    function stakePass(uint256 _projectId, PassStake[] memory _membershipPass)\\n        external\\n        returns (uint256);\\n\\n    function unStakePass(uint256 _projectId, uint256[] memory _recordIds)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x258499e39d0b1a64842d006d6289dcd437442024c964683049856c3385cf969b\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum FundingCycleState {\\n    WarmUp,\\n    Active,\\n    Expired\\n}\\n\\nstruct Metadata {\\n    // The unique handle name for the DAO\\n    bytes32 handle;\\n    // The NFT token address of Customized Boosters\\n    address[] customBoosters;\\n    // The multipliers of customized NFT \\n    uint16[] boosterMultipliers;\\n}\\n\\nstruct AuctionedPass {\\n    // tier id, indexed from 0\\n    uint256 id;\\n    // sale price in wei\\n    uint256 salePrice;\\n    // the amount of tickets open for sale in this round\\n    uint256 saleAmount;\\n    // the amount of tickets airdroped to community\\n    uint256 communityAmount;\\n    // who own the community vouchers can free mint the community ticket\\n    address communityVoucher;\\n    // the amount of tickets reserved to next round\\n    uint256 reservedAmount;\\n}\\n\\n// 1st funding cycle:\\n// gold ticket (erc1155) :  11 salePrice 1 reserveampiunt\\n\\n// silver ticket: 10 salePrice  2 reserveampiunt\\n\\nstruct FundingCycleProperties {\\n    uint256 id;\\n    uint256 projectId;\\n    uint256 previousId;\\n    uint256 start;\\n    uint256 target;\\n    uint256 lockRate;\\n    uint16 duration;\\n    bool isPaused;\\n    uint256 cycleLimit;\\n}\\n\\nstruct FundingCycleParameter {\\n    // rate to be locked in treasury 1000 -> 10% 9999 -> 99.99%\\n    uint16 lockRate;\\n    uint16 duration;\\n    uint256 cycleLimit;\\n    uint256 target;\\n}\\n\\ninterface IFundingCycles {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event FundingCycleExist(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 tapAmount\\n    );\\n\\n    event Unlock(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 unlockAmount,\\n        uint256 totalUnlockedAmount\\n    );\\n\\n    event Init(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 previous,\\n        uint256 start,\\n        uint256 duration,\\n        uint256 target,\\n        uint256 lockRate\\n    );\\n\\n    event InitAuctionedPass(\\n        uint256 indexed fundingCycleId,\\n        AuctionedPass autionPass\\n    );\\n\\n    event UpdateLocked(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 depositAmount,\\n        uint256 totalDepositedAmount\\n    );\\n\\n    error InsufficientBalance();\\n    error BadCycleLimit();\\n    error BadDuration();\\n    error BadLockRate();\\n\\n\\n    // === External View  === // \\n    function latestIdFundingProject(uint256 _projectId) external view returns (uint256);\\n\\n    function count() external view returns (uint256);\\n\\n    function MAX_CYCLE_LIMIT() external view returns (uint8);\\n\\n    function getFundingCycle(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (FundingCycleProperties memory);\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] memory _auctionedPass\\n    ) external returns (FundingCycleProperties memory);\\n\\n    // === External Transactions === //\\n    function currentOf(uint256 _projectId) external view returns (FundingCycleProperties memory);\\n\\n    function setPauseFundingCycle(uint256 _projectId, bool _paused) external returns (bool);\\n\\n    function updateLocked(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function tap(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function unlock(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function getTappableAmount(uint256 _fundingCycleId) external view returns (uint256);\\n\\n    function getFundingCycleState(uint256 _fundingCycleId) external view returns (FundingCycleState);\\n\\n    function getAutionedPass(uint256 _fundingCycleId, uint256 _tierId) external view returns(AuctionedPass memory);\\n}\\n\",\"keccak256\":\"0x6484d0141cbc7e714d990f3b2567de8b882fbbd165fca65bff29e58835d873ee\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"./IConfigStore.sol\\\";\\n\\ninterface IMembershipPass is IERC1155, IERC2981 {\\n    event MintPass(address indexed recepient, uint256 indexed tier, uint256 amount);\\n\\n    event BatchMintPass(address indexed recepient, uint256[] tiers, uint256[] amounts);\\n\\n    error TierNotSet();\\n    error TierUnknow();\\n    error BadCapacity();\\n    error BadFee();\\n    error InsufficientBalance();\\n\\n    function feeCollector() external view returns (address);\\n\\n    function configStore() external view returns (IConfigStore);\\n\\n    /**\\n     * @notice\\n     * Implement ERC2981, but actually the most marketplaces have their own royalty logic\\n     */\\n    function royaltyInfo(uint256 _tier, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount);\\n\\n    function mintPassForMember(\\n        address _recepient,\\n        uint256 _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function batchMintPassForMember(\\n        address _recepient,\\n        uint256[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function updateFeeCollector(address _feeCollector) external;\\n}\\n\",\"keccak256\":\"0xf654e0174cc10dd42df8022d58ee56e13001d985fae8d387761b2a33d93a72f2\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPassBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IMembershipPass} from \\\"./IMembershipPass.sol\\\";\\nimport {IRoyaltyDistributor} from \\\"./IRoyaltyDistributor.sol\\\";\\n\\nstruct PayInfoWithWeight {\\n    uint256 tier;\\n    uint256 amount;\\n    uint256 weight;\\n}\\nstruct WeightInfo {\\n    uint256 amount;\\n    uint256 sqrtWeight;\\n}\\n\\ninterface IMembershipPassBooth {\\n    error ProjectNotExist();\\n\\n    /************************* EVENTS *************************/\\n    event Issue(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        address royaltyDistributor,\\n        uint256[] tierFee,\\n        uint256[] tierCapacity,\\n        uint256[] multipers\\n    );\\n\\n    event BatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event AirdropBatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event DistributeRoyaltyFee(\\n        uint256 indexed projectId,\\n        uint256 merkleRootId,\\n        uint256 distributeAmount,\\n        uint256 distributeAt,\\n        string ipfsHash\\n    );\\n\\n    event ClaimRoyaltyFee(\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256[] merkleRootIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* VIEW FUNCTIONS *************************/\\n    function tierSizeOf(uint256 _projectId) external view returns (uint256);\\n\\n    function membershipPassOf(uint256 _projectId) external view returns (IMembershipPass);\\n\\n    function royaltyDistributorOf(uint256 _projectId) external view returns (IRoyaltyDistributor);\\n\\n    function totalBiddingAmountBy(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function totalSqrtWeightBy(uint256 _fundingCycleId, uint256 _tierId) external returns (uint256);\\n\\n    function depositedWeightBy(\\n        address _from,\\n        uint256 _fundingCycleId,\\n        uint256 _tierId\\n    ) external view returns (uint256, uint256);\\n\\n    function claimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedAmountOf(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function issue(\\n        uint256 _projectId,\\n        uint256[] calldata _tierFees,\\n        uint256[] calldata _tierCapacities,\\n        uint256[] calldata _multipers\\n    ) external returns (address);\\n\\n    function stake(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        PayInfoWithWeight[] memory _payInfo\\n    ) external;\\n\\n    function batchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function airdropBatchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _tierIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function getUserAllocation(\\n        address _user,\\n        uint256 _projectId,\\n        uint256 _fundingCycleId\\n    ) external view returns (uint256[] memory);\\n\\n    function getEstimatingUserAllocation(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256[] memory _biddingAmounts,\\n        uint256[] memory _weights\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x10b7b89b5f936b530876f2bf4bca290ed1d8d3185acbafde39677de07787513a\",\"license\":\"MIT\"},\"contracts/interfaces/IPayoutStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\nstruct PayoutMod {\\n    uint16 percent;\\n    address payable beneficiary;\\n}\\n\\n\\ninterface IPayoutStore {\\n\\n    error BadPercentage();\\n    error BadTotalPercentage();\\n    error BadAddress();\\n    error NoOp();\\n\\n    event SetPayoutMod(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        PayoutMod mod,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function payoutModsOf(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (PayoutMod[] memory);\\n\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        PayoutMod[] memory _mods\\n    ) external;\\n\\n}\",\"keccak256\":\"0x1a96678a4018df454e854662c50c26682fed9602d567d883f1a69b99c8c0bbeb\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    error EmptyHandle();\\n    error TakenedHandle();\\n    error UnAuthorized();\\n\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 handle,\\n        address caller\\n    );\\n\\n    event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n    event SetBaseURI(string baseURI);\\n\\n    function count() external view returns (uint256);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n    \\n    function setBaseURI(string memory _uri) external;\\n}\\n\",\"keccak256\":\"0x3e81d01ea05c8a60c23fde7c7b565803d1f1788e6c3268f7626d42de02fd887e\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRoyaltyDistributor {\\n    error UnAuthorized();\\n    error MerkleRootExist();\\n    error BadBalance();\\n    error AlreadyClaimed();\\n    error SizeNotMatch();\\n\\n    function claimRoyaltyFee(\\n        address _from,\\n        uint256[] calldata _merkleRootIds,\\n        bytes32[][] memory _merkleProofs,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function distributeRoyaltyFee(uint256 _distributeAmount, bytes32 _merkleRoot)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9e54d786817c13b074c78fe77c4c02e0a7e7cb04220e2e2fdfa38c80bd52ab4\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IFundingCycles.sol\\\";\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./IBluechipsBooster.sol\\\";\\nimport \\\"./IDAOGovernorBooster.sol\\\";\\nimport \\\"./IMembershipPassBooth.sol\\\";\\nimport \\\"./IPayoutStore.sol\\\";\\n\\nstruct ImmutablePassTier {\\n    uint256 tierFee;\\n    uint256 multiplier;\\n    uint256 tierCapacity;\\n}\\n\\ninterface ITerminal {\\n    event Pay(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256[] tiers,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Airdrop(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256[] tierIds,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Claim(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 refundAmount,\\n        uint256[] offeringAmounts\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 govFeeAmount,\\n        uint256 netTransferAmount\\n    );\\n\\n    event AddToBalance(uint256 indexed projectId, uint256 amount, address beneficiary);\\n\\n    event UnlockTreasury(uint256 indexed projectId, uint256 unlockAmount);\\n\\n    event SetTapFee(uint256 fee);\\n\\n    event SetContributeFee(uint256 fee);\\n\\n    event SetMinLockRate(uint256 minLockRate);\\n\\n    event DistributeToPayoutMod(uint256 indexed projectId, uint256 indexed fundingCycleId, PayoutMod mod, uint256 amount, address receiver);\\n\\n    error Voucher721(address _voucher);\\n    error NoCommunityTicketLeft();\\n    error FundingCycleNotExist();\\n    error FundingCyclePaused();\\n    error FundingCycleActived();\\n    error InsufficientBalance();\\n    error AlreadyClaimed();\\n    error ZeroAddress();\\n    error BadOperationPeriod();\\n    error OnlyGovernor();\\n    error UnAuthorized();\\n    error LastWeightMustBe1();\\n    error BadPayment();\\n    error BadAmount();\\n    error BadLockRate();\\n    error BadTapFee();\\n\\n    function superAdmin() external view returns (address);\\n\\n    function tapFee() external view returns (uint256);\\n\\n    function contributeFee() external view returns (uint256);\\n\\n    function devTreasury() external view returns (address);\\n\\n    function minLockRate() external view returns (uint256);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function fundingCycles() external view returns (IFundingCycles);\\n\\n    function membershipPassBooth() external view returns (IMembershipPassBooth);\\n\\n    function daoGovernorBooster() external view returns (IDAOGovernorBooster);\\n\\n    function bluechipsBooster() external view returns (IBluechipsBooster);\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n    function payoutStore() external view returns (IPayoutStore);\\n\\n    function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n    function addToBalance(uint256 _projectId) external payable;\\n\\n    function setTapFee(uint256 _fee) external;\\n\\n    function setContributeFee(uint256 _fee) external;\\n\\n    function setMinLockRate(uint256 _minLockRate) external;\\n\\n    function createDao(\\n        Metadata memory _metadata,\\n        ImmutablePassTier[] calldata _tiers,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] memory _payoutMods\\n    ) external;\\n\\n    function createNewFundingCycle(\\n        uint256 projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] calldata _payoutMod\\n    ) external;\\n\\n    function contribute(\\n        uint256 _projectId,\\n        uint256[] memory _tiers,\\n        uint256[] memory _amounts,\\n        string memory _memo\\n    ) external payable;\\n\\n    function communityContribute(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        string memory _memo\\n    ) external;\\n\\n    function claimPassOrRefund(uint256 _projectId, uint256 _fundingCycleId) external;\\n\\n    function tap(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unLockTreasury(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _unlockAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc567bfe1f856ef4975f3a466a6f091eff22e8d5a8c6473d6b0ab6b340bf0206d\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    error ZeroAddress();\\n    error UnAuthorized();\\n    error UnknowTerminal();\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x6cc378750f4f01d98e587014e0ae7815d75788ab4741e5020cc0dd12815e5583\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminalUtility {\\n    error UnAuthorized();\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n}\\n\",\"keccak256\":\"0x358295960cfdafb516f540d130421deb236feff2a998ff8062cd31b890a87cfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "configure(uint256,(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[])": {
        "params": {
          "_auctionedPass": "auction pass information",
          "_params": "The parameters for Funding Cycle",
          "_projectId": "Dao Id"
        }
      },
      "currentOf(uint256)": {
        "params": {
          "_projectId": "The ID of project"
        }
      },
      "getFundingCycle(uint256)": {
        "params": {
          "_fundingCycleId": "The ID of the funding cycle to get"
        }
      },
      "getFundingCycleState(uint256)": {
        "params": {
          "_fundingCycleId": "The ID of funding cycle to get state"
        }
      },
      "getTappableAmount(uint256)": {
        "params": {
          "_fundingCycleId": "The ID of funding cycle to get max tappable amount"
        }
      },
      "setPauseFundingCycle(uint256,bool)": {
        "params": {
          "_paused": "Paused or not",
          "_projectId": "The project ID to update"
        }
      },
      "tap(uint256,uint256,uint256)": {
        "params": {
          "_amount": "The amount of tap",
          "_fundingCycleId": "The ID of funding cycle to tap funds",
          "_projectId": "The project ID of funding cycle belongs to"
        }
      },
      "unlock(uint256,uint256,uint256)": {
        "params": {
          "_amount": "The amount of unlock",
          "_fundingCycleId": "The ID of funding cycle to unlock funds",
          "_projectId": "The project ID of funding cycle belongs to"
        }
      },
      "updateLocked(uint256,uint256,uint256)": {
        "params": {
          "_amount": "The amount of tap",
          "_fundingCycleId": "The ID of funding cycle to update records",
          "_projectId": "The project ID of funding cycle belongs to"
        }
      }
    },
    "stateVariables": {
      "count": {
        "details": "Funding cycles have IDs > 0."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configure(uint256,(uint16,uint16,uint256,uint256),(uint256,uint256,uint256,uint256,address,uint256)[])": {
        "notice": "configure funding cycle return a new funding cycle by call init if there is no funding cycle exist in the project return existing funding cycle if the funding cycle still active in the project return new funding cycle if there is no active funding cycle"
      },
      "count()": {
        "notice": "The total number of funding cycles created, which is used for issuing funding cycle IDs."
      },
      "currentOf(uint256)": {
        "notice": "Current active funding cycle of this dao project"
      },
      "getFundingCycle(uint256)": {
        "notice": " Get the funding cycle with the given ID"
      },
      "getFundingCycleState(uint256)": {
        "notice": "Return the state of giving funding cycle"
      },
      "getTappableAmount(uint256)": {
        "notice": "Get the tappable amount of giving funding cycle"
      },
      "setPauseFundingCycle(uint256,bool)": {
        "notice": "Update the contribute status of giving project"
      },
      "tap(uint256,uint256,uint256)": {
        "notice": "Tap the funds from funding cycle"
      },
      "unlock(uint256,uint256,uint256)": {
        "notice": "Unlock the funds in project's treasury, only can unlock by funding cycle"
      },
      "updateLocked(uint256,uint256,uint256)": {
        "notice": "Update the total deposited funds of funding cycle, include overflowed funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10634,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "_tappedOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10638,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "_depositedOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10642,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "_unLockedOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10647,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "_fundingCycleIdAuctionedPass",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(AuctionedPass)16061_storage)"
      },
      {
        "astId": 10655,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "count",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10660,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "fundingCycleProperties",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(FundingCycleProperties)16080_storage)"
      },
      {
        "astId": 10665,
        "contract": "contracts/FundingCycles.sol:FundingCycles",
        "label": "latestIdFundingProject",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(AuctionedPass)16061_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AuctionedPass)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionedPass)16061_storage"
      },
      "t_mapping(t_uint256,t_struct(FundingCycleProperties)16080_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FundingCycleProperties)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingCycleProperties)16080_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AuctionedPass)16061_storage": {
        "encoding": "inplace",
        "label": "struct AuctionedPass",
        "members": [
          {
            "astId": 16050,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16052,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "salePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16054,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "saleAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16056,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "communityAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16058,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "communityVoucher",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 16060,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "reservedAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(FundingCycleProperties)16080_storage": {
        "encoding": "inplace",
        "label": "struct FundingCycleProperties",
        "members": [
          {
            "astId": 16063,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16065,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16067,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "previousId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16069,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "start",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16071,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "target",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16073,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "lockRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16075,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "duration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint16"
          },
          {
            "astId": 16077,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "isPaused",
            "offset": 2,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 16079,
            "contract": "contracts/FundingCycles.sol:FundingCycles",
            "label": "cycleLimit",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}