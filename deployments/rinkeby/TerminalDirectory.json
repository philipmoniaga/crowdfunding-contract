{
  "address": "0x22f3c559e8b31817f25Df62786924b593cC5776E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IProjects",
          "name": "_projects",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "UnAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknowTerminal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract ITerminal",
          "name": "terminal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetTerminal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract ITerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "setTerminal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terminalOf",
      "outputs": [
        {
          "internalType": "contract ITerminal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ccb7da2049ed82dc0c12b6fc1998a1263772cc16d67832dbe1d8301b7efdb83",
  "receipt": {
    "to": null,
    "from": "0x33aaE4F4bA8019704137703Fe808F6B172D72D6B",
    "contractAddress": "0x22f3c559e8b31817f25Df62786924b593cC5776E",
    "transactionIndex": 1,
    "gasUsed": "257783",
    "logsBloom": "0x
    "blockHash": "0xb4ccbdda8e3fca5737d7ec3c6c5f2a56658f66630bede37ea86875b7c9a04b2a",
    "transactionHash": "0x2ccb7da2049ed82dc0c12b6fc1998a1263772cc16d67832dbe1d8301b7efdb83",
    "logs": [],
    "blockNumber": 10982940,
    "cumulativeGasUsed": "278787",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x145499F59c7C919266C7B2268c323eE7dB3B0079"
  ],
  "numDeployments": 1,
  "solcInputHash": "4e9316abea9744a68b7555d93f5656d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"_projects\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknowTerminal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract ITerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetTerminal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract ITerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"setTerminal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terminalOf\",\"outputs\":[{\"internalType\":\"contract ITerminal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_projects\":\"A Projects contract which mints ERC-721's that represent project ownership and transfers.\"}},\"setTerminal(uint256,address)\":{\"params\":{\"_projectId\":\"The ID of the project to set a new terminal for.\",\"_terminal\":\"The new terminal to set.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setTerminal(uint256,address)\":{\"notice\":\"Update the terminal\"}},\"notice\":\"Allows project owners to deploy proxy contracts that can pay them when receiving funds directly.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TerminalDirectory.sol\":\"TerminalDirectory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {ITerminal} from \\\"./interfaces/ITerminal.sol\\\";\\nimport {IProjects} from \\\"./interfaces/IProjects.sol\\\";\\nimport {ITerminalDirectory} from \\\"./interfaces/ITerminalDirectory.sol\\\";\\n\\n/**\\n  @notice\\n  Allows project owners to deploy proxy contracts that can pay them when receiving funds directly.\\n*/\\ncontract TerminalDirectory is ITerminalDirectory {\\n    // --- public immutable stored properties --- //\\n\\n    // The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n    IProjects public immutable override projects;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551    Public Stored Constants  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    // The terminal of each project\\n    mapping(uint256 => ITerminal) public override terminalOf;\\n\\n    /**\\n      @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers.\\n    */\\n    constructor(IProjects _projects) {\\n        projects = _projects;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External Transaction  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    /** \\n      @notice\\n      Update the terminal\\n\\n      @param _projectId The ID of the project to set a new terminal for.\\n      @param _terminal The new terminal to set.\\n    */\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external override {\\n        // Get a reference to the current terminal being used.\\n        ITerminal _currentTerminal = terminalOf[_projectId];\\n\\n        // Either:\\n        // - case 1: the current terminal hasn't been set yet and the msg sender is either the projects contract or the terminal being set.\\n        // - case 2: the current terminal must not yet be set, or the current terminal is setting a new terminal.\\n        require(\\n            // case 1.\\n            (_currentTerminal == ITerminal(address(0)) &&\\n                (msg.sender == address(projects) || msg.sender == address(_terminal))) ||\\n                // case 2.\\n                msg.sender == address(_currentTerminal),\\n            \\\"TerminalDirectory::setTerminal: UNAUTHORIZED\\\"\\n        );\\n\\n        // The project must exist.\\n        if (!projects.exists(_projectId)) revert UnknowTerminal();\\n\\n        // Can't set the zero address.\\n        if (_terminal == ITerminal(address(0))) revert ZeroAddress();\\n\\n        // If the terminal is already set, nothing to do.\\n        if (_currentTerminal == _terminal) return;\\n\\n        // Set the new terminal.\\n        terminalOf[_projectId] = _terminal;\\n\\n        emit SetTerminal(_projectId, _terminal, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x6c8db20430c862b8f77e96d198ed986be3ad33a62943f7f54397e2572477ddc7\",\"license\":\"MIT\"},\"contracts/interfaces/IBluechipsBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBluechipsBooster {\\n    event CreateProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event CreateCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event ChallengeProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event ChallengeCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RenewProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event RenewCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event Remove(\\n        address indexed from,\\n        address beneficiary,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event RemoveCustomize(\\n        address indexed from,\\n        address beneficiary,\\n        uint256 projectId,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event AddBluechip(address bluechip, uint16 multiper);\\n\\n    event AddCustomBooster(uint256 indexed projectId, address[] bluechips, uint16[] multipers);\\n\\n    error SizeNotMatch();\\n    error BadMultiper();\\n    error ZeroAddress();\\n    error RenewFirst();\\n    error NotNFTOwner();\\n    error InsufficientBalance();\\n    error BoosterRegisterd();\\n    error BoosterNotRegisterd();\\n    error ProofNotRegisterd();\\n    error ChallengeFailed();\\n    error RedeemAfterExpired();\\n    error ForbiddenUpdate();\\n    error OnlyGovernor();\\n    error TransferDisabled();\\n\\n    function count() external view returns (uint256);\\n\\n    function tokenIdOf(bytes32 _proof) external view returns (uint256);\\n\\n    function proofBy(bytes32 _proof) external view returns (address);\\n\\n    function multiplierOf(address _bluechip) external view returns (uint16);\\n\\n    function boosterWeights(address _bluechip) external view returns (uint256);\\n\\n    function proofExpiryOf(bytes32 _proof) external view returns (uint256);\\n\\n    function stakedOf(bytes32 _proof) external view returns (uint256);\\n\\n    function customBoosterWeights(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function customMultiplierOf(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function createCustomBooster(\\n        uint256 _projectId,\\n        address[] memory _bluechips,\\n        uint16[] memory _multipers\\n    ) external;\\n\\n    function createProof(address _bluechip, uint256 _tokenId) external payable;\\n\\n    function createCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external payable;\\n\\n    function challengeProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function challengeCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function renewProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function renewCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function redeemProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function redeemCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function addBlueChip(address _bluechip, uint16 _multiper) external;\\n}\\n\",\"keccak256\":\"0xe56848adbfdf1124cc15295d2b418f348de15001668fbaa1ef9ca4edad014c8c\",\"license\":\"MIT\"},\"contracts/interfaces/IConfigStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IConfigStore {\\n    event SetBaseURI(string uri);\\n\\n    event SetBaseContractURI(string uri);\\n\\n    event SetSigner(address signer);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function baseContractURI() external view returns (string memory);\\n\\n    function signer() external view returns (address);\\n\\n    function setBaseURI(string memory _uri) external;\\n\\n    function setBaseContractURI(string memory _uri) external;\\n\\n    function setSigner(address _signer) external;\\n}\\n\",\"keccak256\":\"0x79eb0298de1ae6151bdd2314c379637d6f49d320a33c18479eaa8ceb58702f5b\",\"license\":\"MIT\"},\"contracts/interfaces/IDAOGovernorBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface IDAOGovernorBooster {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Queued,\\n        Failed,\\n        Expired,\\n        Executed\\n    }\\n\\n    struct Proposal {\\n        string uri;\\n        uint256 id;\\n        bytes32 hash;\\n        uint256 start;\\n        uint256 end;\\n        uint256 minVoters;\\n        uint256 minVotes;\\n        ProposalState state;\\n    }\\n\\n    struct ProposalParameter {\\n        string uri;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    struct Vote {\\n        uint256 totalVoters;\\n        uint256 totalVotes;\\n    }\\n\\n    struct PassStake {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint8 duration; // duartion in day\\n    }\\n\\n    struct StakeRecord {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint256 point;\\n        uint256 stakeAt;\\n        uint256 expiry;\\n    }\\n\\n    /************************* EVENTS *************************/\\n    event CreateGovernor(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        uint256[] multipers,\\n        address admin\\n    );\\n\\n    event ProposalCreated(uint256 indexed projectId, address indexed from, uint256 proposalId);\\n\\n    event ExecuteProposal(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 proposalId,\\n        uint8 proposalResult\\n    );\\n\\n    event StakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    event UnStakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* ERRORS *************************/\\n    error InsufficientBalance();\\n    error UnknowProposal();\\n    error BadPeriod();\\n    error InvalidSignature();\\n    error TransactionNotMatch();\\n    error TransactionReverted();\\n    error NotProjectOwner();\\n    error BadAmount();\\n    error NotExpired();\\n    error InvalidRecord();\\n\\n    function createGovernor(\\n        uint256 _projectId,\\n        uint256[] calldata _multipers,\\n        address _membershipPass,\\n        address _admin\\n    ) external;\\n\\n    function propose(\\n        uint256 _projectId,\\n        ProposalParameter calldata _properties,\\n        address _target,\\n        uint256 _value,\\n        string calldata _signature,\\n        bytes calldata _calldata\\n    ) external payable;\\n\\n    function execute(\\n        uint256 _projectId,\\n        uint256 _proposalId,\\n        uint8 _proposeResult,\\n        bytes memory _signatureBySigner,\\n        address _target,\\n        uint256 _value,\\n        string memory _signature,\\n        bytes memory _data\\n    ) external returns (bytes memory);\\n\\n    function stakePass(uint256 _projectId, PassStake[] memory _membershipPass)\\n        external\\n        returns (uint256);\\n\\n    function unStakePass(uint256 _projectId, uint256[] memory _recordIds)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x258499e39d0b1a64842d006d6289dcd437442024c964683049856c3385cf969b\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum FundingCycleState {\\n    WarmUp,\\n    Active,\\n    Expired\\n}\\n\\nstruct Metadata {\\n    // The unique handle name for the DAO\\n    bytes32 handle;\\n    // The NFT token address of Customized Boosters\\n    address[] customBoosters;\\n    // The multipliers of customized NFT \\n    uint16[] boosterMultipliers;\\n}\\n\\nstruct AuctionedPass {\\n    // tier id, indexed from 0\\n    uint256 id;\\n    // sale price in wei\\n    uint256 salePrice;\\n    // the amount of tickets open for sale in this round\\n    uint256 saleAmount;\\n    // the amount of tickets airdroped to community\\n    uint256 communityAmount;\\n    // who own the community vouchers can free mint the community ticket\\n    address communityVoucher;\\n    // the amount of tickets reserved to next round\\n    uint256 reservedAmount;\\n}\\n\\n// 1st funding cycle:\\n// gold ticket (erc1155) :  11 salePrice 1 reserveampiunt\\n\\n// silver ticket: 10 salePrice  2 reserveampiunt\\n\\nstruct FundingCycleProperties {\\n    uint256 id;\\n    uint256 projectId;\\n    uint256 previousId;\\n    uint256 start;\\n    uint256 target;\\n    uint256 lockRate;\\n    uint16 duration;\\n    bool isPaused;\\n    uint256 cycleLimit;\\n}\\n\\nstruct FundingCycleParameter {\\n    // rate to be locked in treasury 1000 -> 10% 9999 -> 99.99%\\n    uint16 lockRate;\\n    uint16 duration;\\n    uint256 cycleLimit;\\n    uint256 target;\\n}\\n\\ninterface IFundingCycles {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event FundingCycleExist(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 tapAmount\\n    );\\n\\n    event Unlock(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 unlockAmount,\\n        uint256 totalUnlockedAmount\\n    );\\n\\n    event Init(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 previous,\\n        uint256 start,\\n        uint256 duration,\\n        uint256 target,\\n        uint256 lockRate\\n    );\\n\\n    event InitAuctionedPass(\\n        uint256 indexed fundingCycleId,\\n        AuctionedPass autionPass\\n    );\\n\\n    event UpdateLocked(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 depositAmount,\\n        uint256 totalDepositedAmount\\n    );\\n\\n    error InsufficientBalance();\\n    error BadCycleLimit();\\n    error BadDuration();\\n    error BadLockRate();\\n\\n\\n    // === External View  === // \\n    function latestIdFundingProject(uint256 _projectId) external view returns (uint256);\\n\\n    function count() external view returns (uint256);\\n\\n    function MAX_CYCLE_LIMIT() external view returns (uint8);\\n\\n    function getFundingCycle(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (FundingCycleProperties memory);\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] memory _auctionedPass\\n    ) external returns (FundingCycleProperties memory);\\n\\n    // === External Transactions === //\\n    function currentOf(uint256 _projectId) external view returns (FundingCycleProperties memory);\\n\\n    function setPauseFundingCycle(uint256 _projectId, bool _paused) external returns (bool);\\n\\n    function updateLocked(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function tap(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function unlock(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function getTappableAmount(uint256 _fundingCycleId) external view returns (uint256);\\n\\n    function getFundingCycleState(uint256 _fundingCycleId) external view returns (FundingCycleState);\\n\\n    function getAutionedPass(uint256 _fundingCycleId, uint256 _tierId) external view returns(AuctionedPass memory);\\n}\\n\",\"keccak256\":\"0x6484d0141cbc7e714d990f3b2567de8b882fbbd165fca65bff29e58835d873ee\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"./IConfigStore.sol\\\";\\n\\ninterface IMembershipPass is IERC1155, IERC2981 {\\n    event MintPass(address indexed recepient, uint256 indexed tier, uint256 amount);\\n\\n    event BatchMintPass(address indexed recepient, uint256[] tiers, uint256[] amounts);\\n\\n    error TierNotSet();\\n    error TierUnknow();\\n    error BadCapacity();\\n    error BadFee();\\n    error InsufficientBalance();\\n\\n    function feeCollector() external view returns (address);\\n\\n    function configStore() external view returns (IConfigStore);\\n\\n    /**\\n     * @notice\\n     * Implement ERC2981, but actually the most marketplaces have their own royalty logic\\n     */\\n    function royaltyInfo(uint256 _tier, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount);\\n\\n    function mintPassForMember(\\n        address _recepient,\\n        uint256 _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function batchMintPassForMember(\\n        address _recepient,\\n        uint256[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function updateFeeCollector(address _feeCollector) external;\\n}\\n\",\"keccak256\":\"0xf654e0174cc10dd42df8022d58ee56e13001d985fae8d387761b2a33d93a72f2\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPassBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IMembershipPass} from \\\"./IMembershipPass.sol\\\";\\nimport {IRoyaltyDistributor} from \\\"./IRoyaltyDistributor.sol\\\";\\n\\nstruct PayInfoWithWeight {\\n    uint256 tier;\\n    uint256 amount;\\n    uint256 weight;\\n}\\nstruct WeightInfo {\\n    uint256 amount;\\n    uint256 sqrtWeight;\\n}\\n\\ninterface IMembershipPassBooth {\\n    error ProjectNotExist();\\n\\n    /************************* EVENTS *************************/\\n    event Issue(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        address royaltyDistributor,\\n        uint256[] tierFee,\\n        uint256[] tierCapacity,\\n        uint256[] multipers\\n    );\\n\\n    event BatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event AirdropBatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event DistributeRoyaltyFee(\\n        uint256 indexed projectId,\\n        uint256 merkleRootId,\\n        uint256 distributeAmount,\\n        uint256 distributeAt,\\n        string ipfsHash\\n    );\\n\\n    event ClaimRoyaltyFee(\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256[] merkleRootIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* VIEW FUNCTIONS *************************/\\n    function tierSizeOf(uint256 _projectId) external view returns (uint256);\\n\\n    function membershipPassOf(uint256 _projectId) external view returns (IMembershipPass);\\n\\n    function royaltyDistributorOf(uint256 _projectId) external view returns (IRoyaltyDistributor);\\n\\n    function totalBiddingAmountBy(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function totalSqrtWeightBy(uint256 _fundingCycleId, uint256 _tierId) external returns (uint256);\\n\\n    function depositedWeightBy(\\n        address _from,\\n        uint256 _fundingCycleId,\\n        uint256 _tierId\\n    ) external view returns (uint256, uint256);\\n\\n    function claimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedAmountOf(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function issue(\\n        uint256 _projectId,\\n        uint256[] calldata _tierFees,\\n        uint256[] calldata _tierCapacities,\\n        uint256[] calldata _multipers\\n    ) external returns (address);\\n\\n    function stake(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        PayInfoWithWeight[] memory _payInfo\\n    ) external;\\n\\n    function batchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function airdropBatchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _tierIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function getUserAllocation(\\n        address _user,\\n        uint256 _projectId,\\n        uint256 _fundingCycleId\\n    ) external view returns (uint256[] memory);\\n\\n    function getEstimatingUserAllocation(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256[] memory _biddingAmounts,\\n        uint256[] memory _weights\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x10b7b89b5f936b530876f2bf4bca290ed1d8d3185acbafde39677de07787513a\",\"license\":\"MIT\"},\"contracts/interfaces/IPayoutStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\nstruct PayoutMod {\\n    uint16 percent;\\n    address payable beneficiary;\\n}\\n\\n\\ninterface IPayoutStore {\\n\\n    error BadPercentage();\\n    error BadTotalPercentage();\\n    error BadAddress();\\n    error NoOp();\\n\\n    event SetPayoutMod(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        PayoutMod mod,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function payoutModsOf(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (PayoutMod[] memory);\\n\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        PayoutMod[] memory _mods\\n    ) external;\\n\\n}\",\"keccak256\":\"0x1a96678a4018df454e854662c50c26682fed9602d567d883f1a69b99c8c0bbeb\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    error EmptyHandle();\\n    error TakenedHandle();\\n    error UnAuthorized();\\n\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 handle,\\n        address caller\\n    );\\n\\n    event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n    event SetBaseURI(string baseURI);\\n\\n    function count() external view returns (uint256);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n    \\n    function setBaseURI(string memory _uri) external;\\n}\\n\",\"keccak256\":\"0x3e81d01ea05c8a60c23fde7c7b565803d1f1788e6c3268f7626d42de02fd887e\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRoyaltyDistributor {\\n    error UnAuthorized();\\n    error MerkleRootExist();\\n    error BadBalance();\\n    error AlreadyClaimed();\\n    error SizeNotMatch();\\n\\n    function claimRoyaltyFee(\\n        address _from,\\n        uint256[] calldata _merkleRootIds,\\n        bytes32[][] memory _merkleProofs,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function distributeRoyaltyFee(uint256 _distributeAmount, bytes32 _merkleRoot)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9e54d786817c13b074c78fe77c4c02e0a7e7cb04220e2e2fdfa38c80bd52ab4\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IFundingCycles.sol\\\";\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./IBluechipsBooster.sol\\\";\\nimport \\\"./IDAOGovernorBooster.sol\\\";\\nimport \\\"./IMembershipPassBooth.sol\\\";\\nimport \\\"./IPayoutStore.sol\\\";\\n\\nstruct ImmutablePassTier {\\n    uint256 tierFee;\\n    uint256 multiplier;\\n    uint256 tierCapacity;\\n}\\n\\ninterface ITerminal {\\n    event Pay(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256[] tiers,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Airdrop(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256[] tierIds,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Claim(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 refundAmount,\\n        uint256[] offeringAmounts\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 govFeeAmount,\\n        uint256 netTransferAmount\\n    );\\n\\n    event AddToBalance(uint256 indexed projectId, uint256 amount, address beneficiary);\\n\\n    event UnlockTreasury(uint256 indexed projectId, uint256 unlockAmount);\\n\\n    event SetTapFee(uint256 fee);\\n\\n    event SetContributeFee(uint256 fee);\\n\\n    event SetMinLockRate(uint256 minLockRate);\\n\\n    event DistributeToPayoutMod(uint256 indexed projectId, uint256 indexed fundingCycleId, PayoutMod mod, uint256 amount, address receiver);\\n\\n    error Voucher721(address _voucher);\\n    error NoCommunityTicketLeft();\\n    error FundingCycleNotExist();\\n    error FundingCyclePaused();\\n    error FundingCycleActived();\\n    error InsufficientBalance();\\n    error AlreadyClaimed();\\n    error ZeroAddress();\\n    error BadOperationPeriod();\\n    error OnlyGovernor();\\n    error UnAuthorized();\\n    error LastWeightMustBe1();\\n    error BadPayment();\\n    error BadAmount();\\n    error BadLockRate();\\n    error BadTapFee();\\n\\n    function superAdmin() external view returns (address);\\n\\n    function tapFee() external view returns (uint256);\\n\\n    function contributeFee() external view returns (uint256);\\n\\n    function devTreasury() external view returns (address);\\n\\n    function minLockRate() external view returns (uint256);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function fundingCycles() external view returns (IFundingCycles);\\n\\n    function membershipPassBooth() external view returns (IMembershipPassBooth);\\n\\n    function daoGovernorBooster() external view returns (IDAOGovernorBooster);\\n\\n    function bluechipsBooster() external view returns (IBluechipsBooster);\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n    function payoutStore() external view returns (IPayoutStore);\\n\\n    function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n    function addToBalance(uint256 _projectId) external payable;\\n\\n    function setTapFee(uint256 _fee) external;\\n\\n    function setContributeFee(uint256 _fee) external;\\n\\n    function setMinLockRate(uint256 _minLockRate) external;\\n\\n    function createDao(\\n        Metadata memory _metadata,\\n        ImmutablePassTier[] calldata _tiers,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] memory _payoutMods\\n    ) external;\\n\\n    function createNewFundingCycle(\\n        uint256 projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] calldata _payoutMod\\n    ) external;\\n\\n    function contribute(\\n        uint256 _projectId,\\n        uint256[] memory _tiers,\\n        uint256[] memory _amounts,\\n        string memory _memo\\n    ) external payable;\\n\\n    function communityContribute(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        string memory _memo\\n    ) external;\\n\\n    function claimPassOrRefund(uint256 _projectId, uint256 _fundingCycleId) external;\\n\\n    function tap(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unLockTreasury(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _unlockAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc567bfe1f856ef4975f3a466a6f091eff22e8d5a8c6473d6b0ab6b340bf0206d\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    error ZeroAddress();\\n    error UnAuthorized();\\n    error UnknowTerminal();\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x6cc378750f4f01d98e587014e0ae7815d75788ab4741e5020cc0dd12815e5583\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161044838038061044883398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c6103ac61009c6000396000818160900152818160f301526101b501526103ac6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634fe0eced146100465780638b79543c1461008b5780639fc9ea47146100b2575b600080fd5b61006f610054366004610324565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61006f7f000000000000000000000000000000000000000000000000000000000000000081565b6100c56100c036600461033c565b6100c7565b005b6000828152602081905260409020546001600160a01b0316801580156101275750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806101275750336001600160a01b038316145b8061013a5750336001600160a01b038216145b61019f5760405162461bcd60e51b815260206004820152602c60248201527f5465726d696e616c4469726563746f72793a3a7365745465726d696e616c3a2060448201526b15539055551213d49256915160a21b606482015260840160405180910390fd5b604051634f558e7960e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634f558e799060240160206040518083038186803b1580156101ff57600080fd5b505afa158015610213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023791906102fd565b6102545760405163fd07c52b60e01b815260040160405180910390fd5b6001600160a01b03821661027b5760405163d92e233d60e01b815260040160405180910390fd5b816001600160a01b0316816001600160a01b0316141561029a57505050565b6000838152602081815260409182902080546001600160a01b0319166001600160a01b038616908117909155915133815285917f6780b115550b4a9f66ac0fa6f3eed2769911165bc5d87ad966769dbbbfae1dbe910160405180910390a3505050565b60006020828403121561030e578081fd5b8151801515811461031d578182fd5b9392505050565b600060208284031215610335578081fd5b5035919050565b6000806040838503121561034e578081fd5b8235915060208301356001600160a01b038116811461036b578182fd5b80915050925092905056fea26469706673582212203eb7ebd99dfdd96a918f2b9d219edabf3b06b580477060e3e7eee2c12802308164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634fe0eced146100465780638b79543c1461008b5780639fc9ea47146100b2575b600080fd5b61006f610054366004610324565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61006f7f000000000000000000000000000000000000000000000000000000000000000081565b6100c56100c036600461033c565b6100c7565b005b6000828152602081905260409020546001600160a01b0316801580156101275750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806101275750336001600160a01b038316145b8061013a5750336001600160a01b038216145b61019f5760405162461bcd60e51b815260206004820152602c60248201527f5465726d696e616c4469726563746f72793a3a7365745465726d696e616c3a2060448201526b15539055551213d49256915160a21b606482015260840160405180910390fd5b604051634f558e7960e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634f558e799060240160206040518083038186803b1580156101ff57600080fd5b505afa158015610213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023791906102fd565b6102545760405163fd07c52b60e01b815260040160405180910390fd5b6001600160a01b03821661027b5760405163d92e233d60e01b815260040160405180910390fd5b816001600160a01b0316816001600160a01b0316141561029a57505050565b6000838152602081815260409182902080546001600160a01b0319166001600160a01b038616908117909155915133815285917f6780b115550b4a9f66ac0fa6f3eed2769911165bc5d87ad966769dbbbfae1dbe910160405180910390a3505050565b60006020828403121561030e578081fd5b8151801515811461031d578182fd5b9392505050565b600060208284031215610335578081fd5b5035919050565b6000806040838503121561034e578081fd5b8235915060208301356001600160a01b038116811461036b578182fd5b80915050925092905056fea26469706673582212203eb7ebd99dfdd96a918f2b9d219edabf3b06b580477060e3e7eee2c12802308164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_projects": "A Projects contract which mints ERC-721's that represent project ownership and transfers."
        }
      },
      "setTerminal(uint256,address)": {
        "params": {
          "_projectId": "The ID of the project to set a new terminal for.",
          "_terminal": "The new terminal to set."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setTerminal(uint256,address)": {
        "notice": "Update the terminal"
      }
    },
    "notice": "Allows project owners to deploy proxy contracts that can pay them when receiving funds directly.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15278,
        "contract": "contracts/TerminalDirectory.sol:TerminalDirectory",
        "label": "terminalOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(ITerminal)17119)"
      }
    ],
    "types": {
      "t_contract(ITerminal)17119": {
        "encoding": "inplace",
        "label": "contract ITerminal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(ITerminal)17119)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract ITerminal)",
        "numberOfBytes": "32",
        "value": "t_contract(ITerminal)17119"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}