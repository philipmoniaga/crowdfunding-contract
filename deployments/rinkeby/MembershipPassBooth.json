{
  "address": "0xB07bdBdCdC9fCb85b568A6179fB6dB235692602C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        },
        {
          "internalType": "contract IConfigStore",
          "name": "_configStore",
          "type": "address"
        },
        {
          "internalType": "contract IFundingCycles",
          "name": "_fundingCycles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProjectNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnAuthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tiers",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "AirdropBatchMintTicket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tiers",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "BatchMintTicket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "merkleRootIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimRoyaltyFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "merkleRootId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributeAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "name": "DistributeRoyaltyFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "membershipPass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "royaltyDistributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tierFee",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tierCapacity",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "multipers",
          "type": "uint256[]"
        }
      ],
      "name": "Issue",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tierIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "airdropBatchMintTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "airdropClaimedAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "airdropClaimedOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchMintTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_merkleRootIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "_merkleProofs",
          "type": "bytes32[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimRoyaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimedOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configStore",
      "outputs": [
        {
          "internalType": "contract IConfigStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositedWeightBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sqrtWeight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distributeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "distributeRoyaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingCycles",
      "outputs": [
        {
          "internalType": "contract IFundingCycles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_biddingAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "getEstimatingUserAllocation",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_allocations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        }
      ],
      "name": "getUserAllocation",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_allocations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tierFees",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tierCapacities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_multipers",
          "type": "uint256[]"
        }
      ],
      "name": "issue",
      "outputs": [
        {
          "internalType": "address",
          "name": "_membershipPass",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "membershipPassOf",
      "outputs": [
        {
          "internalType": "contract IMembershipPass",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "royaltyDistributorOf",
      "outputs": [
        {
          "internalType": "contract IRoyaltyDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            }
          ],
          "internalType": "struct PayInfoWithWeight[]",
          "name": "_payInfos",
          "type": "tuple[]"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierSizeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalBiddingAmountBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSqrtWeightBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xab62559ce9cf9a3dc93b09397373afae81a09bc95f0f5c14b07081022f42f8e4",
  "receipt": {
    "to": null,
    "from": "0x33aaE4F4bA8019704137703Fe808F6B172D72D6B",
    "contractAddress": "0xB07bdBdCdC9fCb85b568A6179fB6dB235692602C",
    "transactionIndex": 9,
    "gasUsed": "5235808",
    "logsBloom": "0x
    "blockHash": "0xc8555f1057483c86613f95496c1706fa75a4b1f39392115d5af16c6c9db0c435",
    "transactionHash": "0xab62559ce9cf9a3dc93b09397373afae81a09bc95f0f5c14b07081022f42f8e4",
    "logs": [],
    "blockNumber": 10982944,
    "cumulativeGasUsed": "6654663",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x22f3c559e8b31817f25Df62786924b593cC5776E",
    "0x680231Dc3f66D2B357d0d34b33384cE22f80e417",
    "0x98D133D9f9Ea4D60Cb1f1AD782E7093B377dC368"
  ],
  "numDeployments": 1,
  "solcInputHash": "4e9316abea9744a68b7555d93f5656d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"},{\"internalType\":\"contract IConfigStore\",\"name\":\"_configStore\",\"type\":\"address\"},{\"internalType\":\"contract IFundingCycles\",\"name\":\"_fundingCycles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProjectNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tiers\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AirdropBatchMintTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tiers\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BatchMintTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"merkleRootIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ClaimRoyaltyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleRootId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributeAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"DistributeRoyaltyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"membershipPass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tierFee\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tierCapacity\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"multipers\",\"type\":\"uint256[]\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropBatchMintTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdropClaimedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdropClaimedOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMintTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_merkleRootIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_merkleProofs\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configStore\",\"outputs\":[{\"internalType\":\"contract IConfigStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositedWeightBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sqrtWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distributeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"distributeRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycles\",\"outputs\":[{\"internalType\":\"contract IFundingCycles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_biddingAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"getEstimatingUserAllocation\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"}],\"name\":\"getUserAllocation\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierFees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierCapacities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_multipers\",\"type\":\"uint256[]\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_membershipPass\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membershipPassOf\",\"outputs\":[{\"internalType\":\"contract IMembershipPass\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyDistributorOf\",\"outputs\":[{\"internalType\":\"contract IRoyaltyDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct PayInfoWithWeight[]\",\"name\":\"_payInfos\",\"type\":\"tuple[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierSizeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalBiddingAmountBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSqrtWeightBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airdropBatchMintTicket(uint256,uint256,address,uint256[],uint256[])\":{\"params\":{\"_amounts\":\"The payment information for this transaction\",\"_from\":\"The wallet address of owner\",\"_fundingCycleId\":\"The ID of the funding cycle period\",\"_projectId\":\"The ID of the DAO\",\"_tierIds\":\"The special token ids\"}},\"batchMintTicket(uint256,uint256,address,uint256[])\":{\"params\":{\"_amounts\":\"The payment information for this transaction\",\"_from\":\"The wallet address of owner\",\"_fundingCycleId\":\"The ID of the funding cycle period\",\"_projectId\":\"The ID of the DAO\"}},\"claimRoyaltyFee(uint256,uint256[],bytes32[][],uint256[])\":{\"params\":{\"_amounts\":\"Claim amounts\",\"_merkleProofs\":\"Merkle tree proofs\",\"_merkleRootIds\":\"Merkle tree root ids\",\"_projectId\":\"The project ID \"}},\"distributeRoyaltyFee(uint256,uint256,bytes32,string,bytes)\":{\"params\":{\"_distributeAmount\":\"The distribute amount of this cycle\",\"_ipfsHash\":\"The ipfs hash of merkle tree\",\"_merkleRoot\":\"Merkle tree root, record distribution amount of each member\",\"_projectId\":\"The project ID\",\"_signature\":\"The signature signed by signer\"}},\"getEstimatingUserAllocation(uint256,uint256,uint256[],uint256[])\":{\"params\":{\"_fundingCycleId\":\"the funding cycle id\",\"_projectId\":\"the project id of contribute dao\",\"_weights\":\"ticket weights by tier\"}},\"getUserAllocation(address,uint256,uint256)\":{\"params\":{\"_fundingCycleId\":\"The funding cycle id\",\"_projectId\":\"The ID of the DAO being contribute to\",\"_user\":\"The address of the calling user\"}},\"issue(uint256,uint256[],uint256[],uint256[])\":{\"params\":{\"_projectId\":\"The project ID\",\"_tierCapacities\":\"Total supply for each token\",\"_tierFees\":\"Royalty fees\"}},\"stake(uint256,uint256,address,(uint256,uint256,uint256)[])\":{\"params\":{\"_from\":\"The wallet address of the contributo\",\"_fundingCycleId\":\"The funding cycle ID\",\"_payInfos\":\"The payment information for this transaction\",\"_projectId\":\"The project ID\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airdropBatchMintTicket(uint256,uint256,address,uint256[],uint256[])\":{\"notice\":\"Batch mint special nfts for the address who have community token\"},\"batchMintTicket(uint256,uint256,address,uint256[])\":{\"notice\":\"Batch mint tickets\"},\"claimRoyaltyFee(uint256,uint256[],bytes32[][],uint256[])\":{\"notice\":\"Claim according to votes share\"},\"distributeRoyaltyFee(uint256,uint256,bytes32,string,bytes)\":{\"notice\":\"Start a new distribution\"},\"getEstimatingUserAllocation(uint256,uint256,uint256[],uint256[])\":{\"notice\":\"Get estimated allocations by funding cycle allocation 100000 means 0.1(10%), 1 meanss 0.000001(0.0001%), 1000000 means 1(100%)\"},\"getUserAllocation(address,uint256,uint256)\":{\"notice\":\"Get allocations by funding cycle allocation 100000 means 0.1(10%), 1 meanss 0.000001(0.0001%), 1000000 means 1(100%)\"},\"issue(uint256,uint256[],uint256[],uint256[])\":{\"notice\":\"Initialize the membershiopass for dao\"},\"stake(uint256,uint256,address,(uint256,uint256,uint256)[])\":{\"notice\":\"For the contribution that user need to deposit the fund to the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MembershipPassBooth.sol\":\"MembershipPassBooth\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/MembershipPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\nimport {IMembershipPass, IConfigStore} from \\\"./interfaces/IMembershipPass.sol\\\";\\n\\ncontract MembershipPass is IMembershipPass, ERC1155, Ownable {\\n    using Strings for uint256;\\n    using SafeMath for uint256;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Stored Constants  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    uint256 private immutable _projectId;\\n\\n    // the maximum royalty fee 10%\\n    uint256 private constant MAX_ROYALTY_FEE = 1000;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551  Public Stored Properties   \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    // Tier capacity is zero-indexed\\n    mapping(uint256 => uint256) public tierCapacity;\\n\\n    // Supplied amount by tier\\n    mapping(uint256 => uint256) public supplyByTier;\\n\\n    // Royalty fee\\n    mapping(uint256 => uint256) public tierFee;\\n\\n    // Fee collector to receive royalty fees\\n    address public override feeCollector;\\n\\n    // Config store utils to store the global basic uris\\n    IConfigStore public override configStore;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External VIEW  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    /**\\n        @notice\\n        Implement ERC2981, but actually the most marketplaces have their own royalty logic. Only LooksRare\\n\\n        @param _tier The token ID of current saled item\\n        @param _salePrice The Sale price of current saled item\\n     */\\n    function royaltyInfo(uint256 _tier, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (feeCollector, _salePrice.mul(tierFee[_tier]).div(10000));\\n    }\\n\\n    function uri(uint256 _tokenId) public view override returns (string memory) {\\n        string memory _baseURI = configStore.baseURI();\\n\\n        return\\n            bytes(_baseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(_baseURI, _projectId.toString(), \\\"/\\\", _tokenId.toString())\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n        @notice\\n        Return the contract-level metadata for opensea\\n        https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        string memory _baseContractURI = configStore.baseContractURI();\\n\\n        return\\n            bytes(_baseContractURI).length > 0\\n                ? string(abi.encodePacked(_baseContractURI, _projectId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n        @notice\\n        Get remaining amount of giving toke id\\n\\n        @dev\\n        RemainingAmount = capacity - supply    TODO: \\u9084\\u9700\\u8981\\u628a\\u793e\\u5340 airdrop \\u7968\\u7b97\\u9032\\u53bb\\n\\n        @param _tier The token id\\n     */\\n    function getRemainingAmount(uint256 _tier) public view returns (uint256 _remainingAmount) {\\n        _remainingAmount = tierCapacity[_tier] - supplyByTier[_tier];\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External Transaction  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    constructor(\\n        uint256 _daoId,\\n        address _feeCollector,\\n        uint256[] memory _tierFees,\\n        uint256[] memory _tierCapacities,\\n        IConfigStore _configStore\\n    ) ERC1155(\\\"\\\") {\\n        if (_tierFees.length == 0) revert TierNotSet();\\n        if (_configStore == IConfigStore(address(0))) revert TierUnknow();\\n        uint256 _tier;\\n        for (uint256 i; i < _tierFees.length;) {\\n            if (_tierCapacities[i] == 0) revert BadCapacity();\\n            if (_tierFees[i] > MAX_ROYALTY_FEE) revert BadFee();\\n            tierFee[_tier] = _tierFees[i];\\n            tierCapacity[_tier] = _tierCapacities[i];\\n            unchecked {\\n                _tier ++;\\n                i++;\\n            }\\n        }\\n\\n        _projectId = _daoId;\\n        configStore = _configStore;\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n        @notice\\n        Mint token to giving address\\n\\n        @param _recepient The recepient to be mint tokens\\n        @param _tier The token id\\n        @param _amount The amount to be mint\\n     */\\n    function mintPassForMember(\\n        address _recepient,\\n        uint256 _tier,\\n        uint256 _amount\\n    ) external override onlyOwner {\\n        if (tierCapacity[_tier] == 0) revert TierUnknow();\\n        if (_amount > getRemainingAmount(_tier)) revert InsufficientBalance();\\n\\n        supplyByTier[_tier] = supplyByTier[_tier].add(_amount);\\n        _mint(_recepient, _tier, _amount, \\\"\\\");\\n\\n        emit MintPass(_recepient, _tier, _amount);\\n    }\\n\\n    /**\\n        @notice\\n        Batch mint tokens to giving address\\n\\n        @param _recepient The recepient to be mint tokens\\n        @param _tiers The token ids\\n        @param _amounts The amounts to be mint\\n     */\\n    function batchMintPassForMember(\\n        address _recepient,\\n        uint256[] memory _tiers,\\n        uint256[] memory _amounts\\n    ) external override onlyOwner {\\n        for (uint256 i; i < _tiers.length;) {\\n            uint256 _tier = _tiers[i];\\n            if (tierCapacity[_tier] == 0) revert TierUnknow();\\n            if (_amounts[i] > getRemainingAmount(_tier)) revert InsufficientBalance();\\n\\n            supplyByTier[_tier] += _amounts[i];\\n    \\n            unchecked {\\n                i++;\\n            }\\n        }\\n        _mintBatch(_recepient, _tiers, _amounts, \\\"\\\");\\n\\n        emit BatchMintPass(_recepient, _tiers, _amounts);\\n    }\\n\\n    /**\\n        @notice\\n        The owner can update the fee collector address\\n\\n        @dev\\n        Only owner have access to operate\\n\\n        @param _feeCollector The new fee collector\\n     */\\n    function updateFeeCollector(address _feeCollector) external override onlyOwner {\\n        feeCollector = _feeCollector;\\n    }\\n}\\n\",\"keccak256\":\"0xb624708ba1523c3d38602b3f20b56b42ac71b8aafb62982b507605e65f9e916a\",\"license\":\"MIT\"},\"contracts/MembershipPassBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {IFundingCycles} from \\\"./interfaces/IFundingCycles.sol\\\";\\nimport {MembershipPass, IMembershipPass, IConfigStore} from \\\"./MembershipPass.sol\\\";\\nimport {RoyaltyDistributor, IRoyaltyDistributor} from \\\"./RoyaltyDistributor.sol\\\";\\nimport {TerminalUtility, ITerminalDirectory} from \\\"./abstract/TerminalUtility.sol\\\";\\nimport {IMembershipPassBooth, PayInfoWithWeight, WeightInfo} from \\\"./interfaces/IMembershipPassBooth.sol\\\";\\n\\ncontract MembershipPassBooth is IMembershipPassBooth, TerminalUtility, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551  Public Stored Properties   \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    mapping(uint256 => uint256) public override tierSizeOf;\\n\\n    mapping(uint256 => IMembershipPass) public override membershipPassOf;\\n\\n    mapping(uint256 => IRoyaltyDistributor) public override royaltyDistributorOf;\\n\\n    mapping(uint256 => mapping(uint256 => uint256)) public override totalBiddingAmountBy;\\n\\n    // total sqrt weight of each tiers by funding cycle\\n    // funding cycle id => (tier id => total sqrt weight)\\n    mapping(uint256 => mapping(uint256 => uint256)) public override totalSqrtWeightBy;\\n\\n    // the weight details of each funding cycles by address\\n    // address => (funding cycyle id => (tier id => weight detail))\\n    mapping(address => mapping(uint256 => mapping(uint256 => WeightInfo)))\\n        public\\n        override depositedWeightBy;\\n\\n    //  the claimed flag by funding cycle\\n    // address => (funding cycyle id =>  claimed)\\n    mapping(address => mapping(uint256 => bool)) public override claimedOf;\\n\\n    //  the airdrop claimed flag by funding cycle\\n    // address => (funding cycyle id =>  claimed)\\n    mapping(address => mapping(uint256 => bool)) public override airdropClaimedOf;\\n\\n    // funding cycyle id =>  tier id => claimed amount\\n    mapping(uint256 => mapping(uint256 => uint256)) public override airdropClaimedAmountOf;\\n\\n    // Config store utils to store the global signer\\n    IConfigStore public configStore;\\n\\n    IFundingCycles public fundingCycles;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External VIEW  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    /**\\n        @notice\\n        Get allocations by funding cycle\\n        allocation 100000 means 0.1(10%), 1 meanss 0.000001(0.0001%), 1000000 means 1(100%)\\n\\n        @param _user The address of the calling user\\n        @param _projectId The ID of the DAO being contribute to\\n        @param _fundingCycleId The funding cycle id\\n     */\\n    function getUserAllocation(\\n        address _user,\\n        uint256 _projectId,\\n        uint256 _fundingCycleId\\n    ) external view override returns (uint256[] memory _allocations) {\\n        _allocations = new uint256[](tierSizeOf[_projectId]);\\n        for (uint256 i; i < tierSizeOf[_projectId];) {\\n            uint256 _saleAmount = fundingCycles.getAutionedPass(_fundingCycleId, i).saleAmount;\\n            if (_saleAmount == 0) {\\n                _allocations[i] = 0;\\n                continue;\\n            }\\n            if (totalBiddingAmountBy[_fundingCycleId][i] > _saleAmount) {\\n                _allocations[i] = totalSqrtWeightBy[_fundingCycleId][i] == 0\\n                    ? 0\\n                    : depositedWeightBy[_user][_fundingCycleId][i]\\n                        .sqrtWeight\\n                        .mul(1e12)\\n                        .div(totalSqrtWeightBy[_fundingCycleId][i])\\n                        .div(1e6);\\n            } else {\\n                _allocations[i] = depositedWeightBy[_user][_fundingCycleId][i]\\n                    .amount\\n                    .mul(1e12)\\n                    .div(_saleAmount)\\n                    .div(1e6);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice\\n        Get estimated allocations by funding cycle\\n        allocation 100000 means 0.1(10%), 1 meanss 0.000001(0.0001%), 1000000 means 1(100%)\\n\\n        @param _projectId the project id of contribute dao\\n        @param _fundingCycleId the funding cycle id\\n        @param _weights ticket weights by tier\\n     */\\n    function getEstimatingUserAllocation(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256[] memory _biddingAmounts,\\n        uint256[] memory _weights\\n    ) external view override returns (uint256[] memory _allocations) {\\n        _allocations = new uint256[](tierSizeOf[_projectId]);\\n        for (uint256 i; i < tierSizeOf[_projectId];) {\\n            uint256 _saleAmount = fundingCycles.getAutionedPass(_fundingCycleId, i).saleAmount;\\n            if (_saleAmount == 0) {\\n                _allocations[i] = 0;\\n                continue;\\n            }\\n            if ((totalBiddingAmountBy[_fundingCycleId][i] + _biddingAmounts[i]) > _saleAmount) {\\n                uint256 _sqrtedWeight = _sqrt(_weights[i]);\\n                _allocations[i] = _sqrtedWeight\\n                    .mul(1e12)\\n                    .div(totalSqrtWeightBy[_fundingCycleId][i] + _sqrtedWeight)\\n                    .div(1e6);\\n            } else {\\n                _allocations[i] = _biddingAmounts[i].mul(1e12).div(_saleAmount).div(1e6);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External Transactions \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    constructor(\\n        ITerminalDirectory _terminalDirectory,\\n        IConfigStore _configStore,\\n        IFundingCycles _fundingCycles\\n    ) TerminalUtility(_terminalDirectory) {\\n        configStore = _configStore;\\n        fundingCycles = _fundingCycles;\\n    }\\n\\n    /**\\n        @notice\\n        Initialize the membershiopass for dao\\n\\n        @param _projectId The project ID\\n        @param _tierFees Royalty fees\\n        @param _tierCapacities Total supply for each token\\n     */\\n    function issue(\\n        uint256 _projectId,\\n        uint256[] calldata _tierFees,\\n        uint256[] calldata _tierCapacities,\\n        uint256[] calldata _multipers\\n    ) external override onlyTerminal(_projectId) returns (address _membershipPass) {\\n        IRoyaltyDistributor royalty = new RoyaltyDistributor();\\n        MembershipPass membershipPass = new MembershipPass(\\n            _projectId,\\n            address(royalty),\\n            _tierFees,\\n            _tierCapacities,\\n            configStore\\n        );\\n        royaltyDistributorOf[_projectId] = royalty;\\n        membershipPassOf[_projectId] = membershipPass;\\n        tierSizeOf[_projectId] = _tierCapacities.length;\\n        _membershipPass = address(membershipPass);\\n\\n        emit Issue(\\n            _projectId,\\n            _membershipPass,\\n            address(royalty),\\n            _tierFees,\\n            _tierCapacities,\\n            _multipers\\n        );\\n    }\\n\\n    /**\\n        @notice\\n        For the contribution that user need to deposit the fund to the pool\\n    \\n        @param _projectId The project ID\\n        @param _fundingCycleId The funding cycle ID\\n        @param _from The wallet address of the contributo\\n        @param _payInfos The payment information for this transaction\\n     */\\n    function stake(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        PayInfoWithWeight[] memory _payInfos\\n    ) external override onlyTerminal(_projectId) {\\n        for (uint256 i; i < _payInfos.length;) {\\n            PayInfoWithWeight memory _payInfo = _payInfos[i];\\n            uint256 _baseWeight = _payInfo.amount.mul(_payInfo.weight);\\n            uint256 _sqrtedWeight = _sqrt(_baseWeight);\\n            totalSqrtWeightBy[_fundingCycleId][_payInfo.tier] += _sqrtedWeight;\\n            totalBiddingAmountBy[_fundingCycleId][_payInfo.tier] += _payInfo.amount;\\n            WeightInfo memory _weightByTier = depositedWeightBy[_from][_fundingCycleId][\\n                _payInfo.tier\\n            ];\\n            depositedWeightBy[_from][_fundingCycleId][_payInfo.tier] = WeightInfo({\\n                amount: _weightByTier.amount + _payInfo.amount,\\n                sqrtWeight: _weightByTier.sqrtWeight + _sqrtedWeight\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice\\n        Batch mint tickets\\n\\n        @param _projectId The ID of the DAO\\n        @param _fundingCycleId The ID of the funding cycle period\\n        @param _from The wallet address of owner\\n        @param _amounts The payment information for this transaction\\n     */\\n    function batchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _amounts\\n    ) external override onlyTerminal(_projectId) {\\n        claimedOf[_from][_fundingCycleId] = true;\\n        uint256[] memory _tiers = new uint256[](_amounts.length);\\n        for (uint256 i; i < _amounts.length;) {\\n            _tiers[i] = i;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        membershipPassOf[_projectId].batchMintPassForMember(_from, _tiers, _amounts);\\n\\n        emit BatchMintTicket(_from, _projectId, _tiers, _amounts);\\n    }\\n\\n    /**\\n        @notice\\n        Batch mint special nfts for the address who have community token\\n\\n        @param _projectId The ID of the DAO\\n        @param _fundingCycleId The ID of the funding cycle period\\n        @param _from The wallet address of owner\\n        @param _tierIds The special token ids\\n        @param _amounts The payment information for this transaction\\n     */\\n    function airdropBatchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _tierIds,\\n        uint256[] memory _amounts\\n    ) external override onlyTerminal(_projectId) {\\n        airdropClaimedOf[_from][_fundingCycleId] = true;\\n        for (uint256 i; i < _tierIds.length;) {\\n            airdropClaimedAmountOf[_fundingCycleId][_tierIds[i]] += _amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        membershipPassOf[_projectId].batchMintPassForMember(_from, _tierIds, _amounts);\\n\\n        emit AirdropBatchMintTicket(_from, _projectId, _tierIds, _amounts);\\n    }\\n\\n    /**\\n        @notice\\n        Claim according to votes share\\n\\n        @param _projectId The project ID \\n        @param _merkleRootIds Merkle tree root ids\\n        @param _merkleProofs Merkle tree proofs\\n        @param _amounts Claim amounts\\n     */\\n    function claimRoyaltyFee(\\n        uint256 _projectId,\\n        uint256[] calldata _merkleRootIds,\\n        bytes32[][] memory _merkleProofs,\\n        uint256[] calldata _amounts\\n    ) external {\\n        IRoyaltyDistributor distributor = royaltyDistributorOf[_projectId];\\n        if (distributor == IRoyaltyDistributor(address(0))) {\\n            revert ProjectNotExist();\\n        }\\n        distributor.claimRoyaltyFee(msg.sender, _merkleRootIds, _merkleProofs, _amounts);\\n\\n        emit ClaimRoyaltyFee(_projectId, msg.sender, _merkleRootIds, _amounts);\\n    }\\n\\n    /**\\n        @notice\\n        Start a new distribution\\n\\n        @param _projectId The project ID\\n        @param _distributeAmount The distribute amount of this cycle\\n        @param _merkleRoot Merkle tree root, record distribution amount of each member\\n        @param _ipfsHash The ipfs hash of merkle tree\\n        @param _signature The signature signed by signer\\n     */\\n    function distributeRoyaltyFee(\\n        uint256 _projectId,\\n        uint256 _distributeAmount,\\n        bytes32 _merkleRoot,\\n        string memory _ipfsHash,\\n        bytes memory _signature\\n    ) external nonReentrant {\\n        IRoyaltyDistributor distributor = royaltyDistributorOf[_projectId];\\n        if (distributor == IRoyaltyDistributor(address(0))) {\\n            revert ProjectNotExist();\\n        }\\n        bytes32 _hash = keccak256(\\n            abi.encodePacked(_projectId, \\\"-\\\", _ipfsHash, \\\"-\\\", _distributeAmount, \\\"-\\\", _merkleRoot)\\n        );\\n        if (ECDSA.recover(_hash, _signature) != configStore.signer()) {\\n            revert UnAuthorized();\\n        }\\n        uint256 _merkleRootId = distributor.distributeRoyaltyFee(_distributeAmount, _merkleRoot);\\n\\n        emit DistributeRoyaltyFee(\\n            _projectId,\\n            _merkleRootId,\\n            _distributeAmount,\\n            block.timestamp,\\n            _ipfsHash\\n        );\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Helper Functions  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    /**\\n        @notice\\n        Calculates the square root of x, rounding down\\n\\n        @dev\\n        Uses the Babylonian method (https://ethereum.stackexchange.com/a/97540/37941)\\n\\n        @param x The uint256 number for which to calculate the square root\\n        @return result The result as an uint256\\n     */\\n    function _sqrt(uint256 x) private pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        // Calculate the square root of the perfect square of a power of two that is the closest to x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x991e5e9b323d99b151229f1646c9be5e951d3363a195fdcc0bbad46c61253226\",\"license\":\"MIT\"},\"contracts/RoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport {IConfigStore} from \\\"./interfaces/IConfigStore.sol\\\";\\nimport {IRoyaltyDistributor} from \\\"./interfaces/IRoyaltyDistributor.sol\\\";\\n\\ncontract RoyaltyDistributor is Ownable, IRoyaltyDistributor, ReentrancyGuard {\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   Private Stored Properties \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    uint256 private _distributedBalance;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551  Public Stored Properties   \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    uint256 public merkleRootCount;\\n\\n    mapping(uint256 => bytes32) public merkleRootOf;\\n\\n    mapping(bytes32 => bool) public merkleRootFor;\\n\\n    mapping(address => mapping(uint256 => bool)) public claimedOf;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External VIEW  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n        @notice\\n        The pending distributed royalty fees since last distribution\\n     */\\n    function pendingBalance() public view returns (uint256) {\\n        return address(this).balance - _distributedBalance;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551   External Transaction  \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    constructor() {}\\n\\n    /**\\n        @notice\\n        Claim according to votes share\\n\\n        @param _from The beneficiary\\n        @param _merkleRootIds Merkle tree root ids\\n        @param _merkleProofs Merkle tree proofs\\n        @param _amounts Claim amounts\\n     */\\n    function claimRoyaltyFee(\\n        address _from,\\n        uint256[] calldata _merkleRootIds,\\n        bytes32[][] memory _merkleProofs,\\n        uint256[] calldata _amounts\\n    ) public override onlyOwner nonReentrant {\\n        uint256 _totalAmount;\\n        if (_merkleRootIds.length != _merkleProofs.length || _merkleRootIds.length != _amounts.length) {\\n            revert SizeNotMatch();\\n        }\\n        for (uint256 i; i < _merkleRootIds.length;) {\\n            uint256 _rootId = _merkleRootIds[i];\\n            bytes32 _node = keccak256(abi.encodePacked(_rootId, \\\"-\\\", _from, \\\"-\\\", _amounts[i]));\\n            bytes32 _merkleRoot = merkleRootOf[_rootId];\\n            if (!MerkleProof.verify(_merkleProofs[i], _merkleRoot, _node)) {\\n                revert UnAuthorized();\\n            }\\n            if (claimedOf[_from][_rootId]) {\\n                revert AlreadyClaimed();\\n            }\\n            _totalAmount += _amounts[i];\\n            claimedOf[_from][_rootId] = true;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        Address.sendValue(payable(_from), _totalAmount);\\n    }\\n\\n    /**\\n        @notice\\n        Start a new distribution\\n\\n        @param _distributeAmount The distribute amount of this cycle\\n        @param _merkleRoot Merkle tree root, record distribution amount of each member\\n     */\\n    function distributeRoyaltyFee(uint256 _distributeAmount, bytes32 _merkleRoot)\\n        public\\n        override\\n        onlyOwner\\n        returns (uint256 _rootId)\\n    {\\n        if (merkleRootFor[_merkleRoot]) revert MerkleRootExist();\\n        if (_distributeAmount > pendingBalance()) revert BadBalance();\\n\\n        unchecked {\\n            merkleRootCount++;\\n        }\\n\\n        merkleRootFor[_merkleRoot] = true;\\n        merkleRootOf[merkleRootCount] = _merkleRoot;\\n        _distributedBalance += _distributeAmount;\\n\\n        _rootId = merkleRootCount;\\n    }\\n}\\n\",\"keccak256\":\"0x1b02bb52ab259c17c41ac2676db9484d4ce89cb98b5a719627c4daf77f49d9d9\",\"license\":\"MIT\"},\"contracts/abstract/TerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ITerminalUtility.sol\\\";\\n\\nabstract contract TerminalUtility is ITerminalUtility {\\n    modifier onlyTerminal(uint256 _projectId) {\\n        if (address(terminalDirectory.terminalOf(_projectId)) != msg.sender) revert UnAuthorized();\\n        _;\\n    }\\n\\n    ITerminalDirectory public immutable override terminalDirectory;\\n\\n    /** \\n      @param _terminalDirectory A directory of a project's current terminal to receive payments in.\\n    */\\n    constructor(ITerminalDirectory _terminalDirectory) {\\n        terminalDirectory = _terminalDirectory;\\n    }\\n}\\n\",\"keccak256\":\"0x1935ff1401b8482549ebb1877d49a6aafdef8fffb661a0f93a5d7820b3a1cbac\",\"license\":\"MIT\"},\"contracts/interfaces/IBluechipsBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBluechipsBooster {\\n    event CreateProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event CreateCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry,\\n        uint256 weight\\n    );\\n\\n    event ChallengeProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event ChallengeCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RedeemCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof\\n    );\\n\\n    event RenewProof(\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event RenewCustomizedProof(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        bytes32 proof,\\n        uint256 proofExpiry\\n    );\\n\\n    event Remove(\\n        address indexed from,\\n        address beneficiary,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event RemoveCustomize(\\n        address indexed from,\\n        address beneficiary,\\n        uint256 projectId,\\n        bytes32 proof,\\n        address indexed bluechip,\\n        uint256 tokenId,\\n        uint256 weight\\n    );\\n\\n    event AddBluechip(address bluechip, uint16 multiper);\\n\\n    event AddCustomBooster(uint256 indexed projectId, address[] bluechips, uint16[] multipers);\\n\\n    error SizeNotMatch();\\n    error BadMultiper();\\n    error ZeroAddress();\\n    error RenewFirst();\\n    error NotNFTOwner();\\n    error InsufficientBalance();\\n    error BoosterRegisterd();\\n    error BoosterNotRegisterd();\\n    error ProofNotRegisterd();\\n    error ChallengeFailed();\\n    error RedeemAfterExpired();\\n    error ForbiddenUpdate();\\n    error OnlyGovernor();\\n    error TransferDisabled();\\n\\n    function count() external view returns (uint256);\\n\\n    function tokenIdOf(bytes32 _proof) external view returns (uint256);\\n\\n    function proofBy(bytes32 _proof) external view returns (address);\\n\\n    function multiplierOf(address _bluechip) external view returns (uint16);\\n\\n    function boosterWeights(address _bluechip) external view returns (uint256);\\n\\n    function proofExpiryOf(bytes32 _proof) external view returns (uint256);\\n\\n    function stakedOf(bytes32 _proof) external view returns (uint256);\\n\\n    function customBoosterWeights(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function customMultiplierOf(uint256 _projectId, address _bluechip)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function createCustomBooster(\\n        uint256 _projectId,\\n        address[] memory _bluechips,\\n        uint16[] memory _multipers\\n    ) external;\\n\\n    function createProof(address _bluechip, uint256 _tokenId) external payable;\\n\\n    function createCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external payable;\\n\\n    function challengeProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function challengeCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function renewProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function renewCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function redeemProof(address _bluechip, uint256 _tokenId) external;\\n\\n    function redeemCustomProof(\\n        address _bluechip,\\n        uint256 _tokenId,\\n        uint256 _projectId\\n    ) external;\\n\\n    function addBlueChip(address _bluechip, uint16 _multiper) external;\\n}\\n\",\"keccak256\":\"0xe56848adbfdf1124cc15295d2b418f348de15001668fbaa1ef9ca4edad014c8c\",\"license\":\"MIT\"},\"contracts/interfaces/IConfigStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IConfigStore {\\n    event SetBaseURI(string uri);\\n\\n    event SetBaseContractURI(string uri);\\n\\n    event SetSigner(address signer);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function baseContractURI() external view returns (string memory);\\n\\n    function signer() external view returns (address);\\n\\n    function setBaseURI(string memory _uri) external;\\n\\n    function setBaseContractURI(string memory _uri) external;\\n\\n    function setSigner(address _signer) external;\\n}\\n\",\"keccak256\":\"0x79eb0298de1ae6151bdd2314c379637d6f49d320a33c18479eaa8ceb58702f5b\",\"license\":\"MIT\"},\"contracts/interfaces/IDAOGovernorBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface IDAOGovernorBooster {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Queued,\\n        Failed,\\n        Expired,\\n        Executed\\n    }\\n\\n    struct Proposal {\\n        string uri;\\n        uint256 id;\\n        bytes32 hash;\\n        uint256 start;\\n        uint256 end;\\n        uint256 minVoters;\\n        uint256 minVotes;\\n        ProposalState state;\\n    }\\n\\n    struct ProposalParameter {\\n        string uri;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    struct Vote {\\n        uint256 totalVoters;\\n        uint256 totalVotes;\\n    }\\n\\n    struct PassStake {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint8 duration; // duartion in day\\n    }\\n\\n    struct StakeRecord {\\n        uint256 tier;\\n        uint256 amount; // ERC721: 1\\n        uint256 point;\\n        uint256 stakeAt;\\n        uint256 expiry;\\n    }\\n\\n    /************************* EVENTS *************************/\\n    event CreateGovernor(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        uint256[] multipers,\\n        address admin\\n    );\\n\\n    event ProposalCreated(uint256 indexed projectId, address indexed from, uint256 proposalId);\\n\\n    event ExecuteProposal(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 proposalId,\\n        uint8 proposalResult\\n    );\\n\\n    event StakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    event UnStakePass(\\n        uint256 indexed projectId,\\n        address indexed from,\\n        uint256 points,\\n        uint256[] tierIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* ERRORS *************************/\\n    error InsufficientBalance();\\n    error UnknowProposal();\\n    error BadPeriod();\\n    error InvalidSignature();\\n    error TransactionNotMatch();\\n    error TransactionReverted();\\n    error NotProjectOwner();\\n    error BadAmount();\\n    error NotExpired();\\n    error InvalidRecord();\\n\\n    function createGovernor(\\n        uint256 _projectId,\\n        uint256[] calldata _multipers,\\n        address _membershipPass,\\n        address _admin\\n    ) external;\\n\\n    function propose(\\n        uint256 _projectId,\\n        ProposalParameter calldata _properties,\\n        address _target,\\n        uint256 _value,\\n        string calldata _signature,\\n        bytes calldata _calldata\\n    ) external payable;\\n\\n    function execute(\\n        uint256 _projectId,\\n        uint256 _proposalId,\\n        uint8 _proposeResult,\\n        bytes memory _signatureBySigner,\\n        address _target,\\n        uint256 _value,\\n        string memory _signature,\\n        bytes memory _data\\n    ) external returns (bytes memory);\\n\\n    function stakePass(uint256 _projectId, PassStake[] memory _membershipPass)\\n        external\\n        returns (uint256);\\n\\n    function unStakePass(uint256 _projectId, uint256[] memory _recordIds)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x258499e39d0b1a64842d006d6289dcd437442024c964683049856c3385cf969b\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum FundingCycleState {\\n    WarmUp,\\n    Active,\\n    Expired\\n}\\n\\nstruct Metadata {\\n    // The unique handle name for the DAO\\n    bytes32 handle;\\n    // The NFT token address of Customized Boosters\\n    address[] customBoosters;\\n    // The multipliers of customized NFT \\n    uint16[] boosterMultipliers;\\n}\\n\\nstruct AuctionedPass {\\n    // tier id, indexed from 0\\n    uint256 id;\\n    // sale price in wei\\n    uint256 salePrice;\\n    // the amount of tickets open for sale in this round\\n    uint256 saleAmount;\\n    // the amount of tickets airdroped to community\\n    uint256 communityAmount;\\n    // who own the community vouchers can free mint the community ticket\\n    address communityVoucher;\\n    // the amount of tickets reserved to next round\\n    uint256 reservedAmount;\\n}\\n\\n// 1st funding cycle:\\n// gold ticket (erc1155) :  11 salePrice 1 reserveampiunt\\n\\n// silver ticket: 10 salePrice  2 reserveampiunt\\n\\nstruct FundingCycleProperties {\\n    uint256 id;\\n    uint256 projectId;\\n    uint256 previousId;\\n    uint256 start;\\n    uint256 target;\\n    uint256 lockRate;\\n    uint16 duration;\\n    bool isPaused;\\n    uint256 cycleLimit;\\n}\\n\\nstruct FundingCycleParameter {\\n    // rate to be locked in treasury 1000 -> 10% 9999 -> 99.99%\\n    uint16 lockRate;\\n    uint16 duration;\\n    uint256 cycleLimit;\\n    uint256 target;\\n}\\n\\ninterface IFundingCycles {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event FundingCycleExist(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 tapAmount\\n    );\\n\\n    event Unlock(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 unlockAmount,\\n        uint256 totalUnlockedAmount\\n    );\\n\\n    event Init(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 previous,\\n        uint256 start,\\n        uint256 duration,\\n        uint256 target,\\n        uint256 lockRate\\n    );\\n\\n    event InitAuctionedPass(\\n        uint256 indexed fundingCycleId,\\n        AuctionedPass autionPass\\n    );\\n\\n    event UpdateLocked(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        uint256 depositAmount,\\n        uint256 totalDepositedAmount\\n    );\\n\\n    error InsufficientBalance();\\n    error BadCycleLimit();\\n    error BadDuration();\\n    error BadLockRate();\\n\\n\\n    // === External View  === // \\n    function latestIdFundingProject(uint256 _projectId) external view returns (uint256);\\n\\n    function count() external view returns (uint256);\\n\\n    function MAX_CYCLE_LIMIT() external view returns (uint8);\\n\\n    function getFundingCycle(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (FundingCycleProperties memory);\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] memory _auctionedPass\\n    ) external returns (FundingCycleProperties memory);\\n\\n    // === External Transactions === //\\n    function currentOf(uint256 _projectId) external view returns (FundingCycleProperties memory);\\n\\n    function setPauseFundingCycle(uint256 _projectId, bool _paused) external returns (bool);\\n\\n    function updateLocked(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function tap(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function unlock(uint256 _projectId, uint256 _fundingCycleId, uint256 _amount) external;\\n\\n    function getTappableAmount(uint256 _fundingCycleId) external view returns (uint256);\\n\\n    function getFundingCycleState(uint256 _fundingCycleId) external view returns (FundingCycleState);\\n\\n    function getAutionedPass(uint256 _fundingCycleId, uint256 _tierId) external view returns(AuctionedPass memory);\\n}\\n\",\"keccak256\":\"0x6484d0141cbc7e714d990f3b2567de8b882fbbd165fca65bff29e58835d873ee\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"./IConfigStore.sol\\\";\\n\\ninterface IMembershipPass is IERC1155, IERC2981 {\\n    event MintPass(address indexed recepient, uint256 indexed tier, uint256 amount);\\n\\n    event BatchMintPass(address indexed recepient, uint256[] tiers, uint256[] amounts);\\n\\n    error TierNotSet();\\n    error TierUnknow();\\n    error BadCapacity();\\n    error BadFee();\\n    error InsufficientBalance();\\n\\n    function feeCollector() external view returns (address);\\n\\n    function configStore() external view returns (IConfigStore);\\n\\n    /**\\n     * @notice\\n     * Implement ERC2981, but actually the most marketplaces have their own royalty logic\\n     */\\n    function royaltyInfo(uint256 _tier, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount);\\n\\n    function mintPassForMember(\\n        address _recepient,\\n        uint256 _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function batchMintPassForMember(\\n        address _recepient,\\n        uint256[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function updateFeeCollector(address _feeCollector) external;\\n}\\n\",\"keccak256\":\"0xf654e0174cc10dd42df8022d58ee56e13001d985fae8d387761b2a33d93a72f2\",\"license\":\"MIT\"},\"contracts/interfaces/IMembershipPassBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IMembershipPass} from \\\"./IMembershipPass.sol\\\";\\nimport {IRoyaltyDistributor} from \\\"./IRoyaltyDistributor.sol\\\";\\n\\nstruct PayInfoWithWeight {\\n    uint256 tier;\\n    uint256 amount;\\n    uint256 weight;\\n}\\nstruct WeightInfo {\\n    uint256 amount;\\n    uint256 sqrtWeight;\\n}\\n\\ninterface IMembershipPassBooth {\\n    error ProjectNotExist();\\n\\n    /************************* EVENTS *************************/\\n    event Issue(\\n        uint256 indexed projectId,\\n        address membershipPass,\\n        address royaltyDistributor,\\n        uint256[] tierFee,\\n        uint256[] tierCapacity,\\n        uint256[] multipers\\n    );\\n\\n    event BatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event AirdropBatchMintTicket(\\n        address indexed from,\\n        uint256 indexed projectId,\\n        uint256[] tiers,\\n        uint256[] amounts\\n    );\\n\\n    event DistributeRoyaltyFee(\\n        uint256 indexed projectId,\\n        uint256 merkleRootId,\\n        uint256 distributeAmount,\\n        uint256 distributeAt,\\n        string ipfsHash\\n    );\\n\\n    event ClaimRoyaltyFee(\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256[] merkleRootIds,\\n        uint256[] amounts\\n    );\\n\\n    /************************* VIEW FUNCTIONS *************************/\\n    function tierSizeOf(uint256 _projectId) external view returns (uint256);\\n\\n    function membershipPassOf(uint256 _projectId) external view returns (IMembershipPass);\\n\\n    function royaltyDistributorOf(uint256 _projectId) external view returns (IRoyaltyDistributor);\\n\\n    function totalBiddingAmountBy(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function totalSqrtWeightBy(uint256 _fundingCycleId, uint256 _tierId) external returns (uint256);\\n\\n    function depositedWeightBy(\\n        address _from,\\n        uint256 _fundingCycleId,\\n        uint256 _tierId\\n    ) external view returns (uint256, uint256);\\n\\n    function claimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedOf(address _from, uint256 _fundingCycleId) external returns (bool);\\n\\n    function airdropClaimedAmountOf(uint256 _fundingCycleId, uint256 _tierId)\\n        external\\n        returns (uint256);\\n\\n    function issue(\\n        uint256 _projectId,\\n        uint256[] calldata _tierFees,\\n        uint256[] calldata _tierCapacities,\\n        uint256[] calldata _multipers\\n    ) external returns (address);\\n\\n    function stake(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        PayInfoWithWeight[] memory _payInfo\\n    ) external;\\n\\n    function batchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function airdropBatchMintTicket(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        address _from,\\n        uint256[] memory _tierIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    function getUserAllocation(\\n        address _user,\\n        uint256 _projectId,\\n        uint256 _fundingCycleId\\n    ) external view returns (uint256[] memory);\\n\\n    function getEstimatingUserAllocation(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256[] memory _biddingAmounts,\\n        uint256[] memory _weights\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x10b7b89b5f936b530876f2bf4bca290ed1d8d3185acbafde39677de07787513a\",\"license\":\"MIT\"},\"contracts/interfaces/IPayoutStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\n\\nstruct PayoutMod {\\n    uint16 percent;\\n    address payable beneficiary;\\n}\\n\\n\\ninterface IPayoutStore {\\n\\n    error BadPercentage();\\n    error BadTotalPercentage();\\n    error BadAddress();\\n    error NoOp();\\n\\n    event SetPayoutMod(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        PayoutMod mod,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function payoutModsOf(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (PayoutMod[] memory);\\n\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        PayoutMod[] memory _mods\\n    ) external;\\n\\n}\",\"keccak256\":\"0x1a96678a4018df454e854662c50c26682fed9602d567d883f1a69b99c8c0bbeb\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    error EmptyHandle();\\n    error TakenedHandle();\\n    error UnAuthorized();\\n\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 handle,\\n        address caller\\n    );\\n\\n    event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\\n\\n    event SetBaseURI(string baseURI);\\n\\n    function count() external view returns (uint256);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n    \\n    function setBaseURI(string memory _uri) external;\\n}\\n\",\"keccak256\":\"0x3e81d01ea05c8a60c23fde7c7b565803d1f1788e6c3268f7626d42de02fd887e\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRoyaltyDistributor {\\n    error UnAuthorized();\\n    error MerkleRootExist();\\n    error BadBalance();\\n    error AlreadyClaimed();\\n    error SizeNotMatch();\\n\\n    function claimRoyaltyFee(\\n        address _from,\\n        uint256[] calldata _merkleRootIds,\\n        bytes32[][] memory _merkleProofs,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function distributeRoyaltyFee(uint256 _distributeAmount, bytes32 _merkleRoot)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9e54d786817c13b074c78fe77c4c02e0a7e7cb04220e2e2fdfa38c80bd52ab4\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IFundingCycles.sol\\\";\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./IBluechipsBooster.sol\\\";\\nimport \\\"./IDAOGovernorBooster.sol\\\";\\nimport \\\"./IMembershipPassBooth.sol\\\";\\nimport \\\"./IPayoutStore.sol\\\";\\n\\nstruct ImmutablePassTier {\\n    uint256 tierFee;\\n    uint256 multiplier;\\n    uint256 tierCapacity;\\n}\\n\\ninterface ITerminal {\\n    event Pay(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256[] tiers,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Airdrop(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256[] tierIds,\\n        uint256[] amounts,\\n        string note\\n    );\\n\\n    event Claim(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 refundAmount,\\n        uint256[] offeringAmounts\\n    );\\n\\n    event Tap(\\n        uint256 indexed projectId,\\n        uint256 indexed fundingCycleId,\\n        address indexed beneficiary,\\n        uint256 govFeeAmount,\\n        uint256 netTransferAmount\\n    );\\n\\n    event AddToBalance(uint256 indexed projectId, uint256 amount, address beneficiary);\\n\\n    event UnlockTreasury(uint256 indexed projectId, uint256 unlockAmount);\\n\\n    event SetTapFee(uint256 fee);\\n\\n    event SetContributeFee(uint256 fee);\\n\\n    event SetMinLockRate(uint256 minLockRate);\\n\\n    event DistributeToPayoutMod(uint256 indexed projectId, uint256 indexed fundingCycleId, PayoutMod mod, uint256 amount, address receiver);\\n\\n    error Voucher721(address _voucher);\\n    error NoCommunityTicketLeft();\\n    error FundingCycleNotExist();\\n    error FundingCyclePaused();\\n    error FundingCycleActived();\\n    error InsufficientBalance();\\n    error AlreadyClaimed();\\n    error ZeroAddress();\\n    error BadOperationPeriod();\\n    error OnlyGovernor();\\n    error UnAuthorized();\\n    error LastWeightMustBe1();\\n    error BadPayment();\\n    error BadAmount();\\n    error BadLockRate();\\n    error BadTapFee();\\n\\n    function superAdmin() external view returns (address);\\n\\n    function tapFee() external view returns (uint256);\\n\\n    function contributeFee() external view returns (uint256);\\n\\n    function devTreasury() external view returns (address);\\n\\n    function minLockRate() external view returns (uint256);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function fundingCycles() external view returns (IFundingCycles);\\n\\n    function membershipPassBooth() external view returns (IMembershipPassBooth);\\n\\n    function daoGovernorBooster() external view returns (IDAOGovernorBooster);\\n\\n    function bluechipsBooster() external view returns (IBluechipsBooster);\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n    function payoutStore() external view returns (IPayoutStore);\\n\\n    function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n    function addToBalance(uint256 _projectId) external payable;\\n\\n    function setTapFee(uint256 _fee) external;\\n\\n    function setContributeFee(uint256 _fee) external;\\n\\n    function setMinLockRate(uint256 _minLockRate) external;\\n\\n    function createDao(\\n        Metadata memory _metadata,\\n        ImmutablePassTier[] calldata _tiers,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] memory _payoutMods\\n    ) external;\\n\\n    function createNewFundingCycle(\\n        uint256 projectId,\\n        FundingCycleParameter calldata _params,\\n        AuctionedPass[] calldata _auctionedPass,\\n        PayoutMod[] calldata _payoutMod\\n    ) external;\\n\\n    function contribute(\\n        uint256 _projectId,\\n        uint256[] memory _tiers,\\n        uint256[] memory _amounts,\\n        string memory _memo\\n    ) external payable;\\n\\n    function communityContribute(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        string memory _memo\\n    ) external;\\n\\n    function claimPassOrRefund(uint256 _projectId, uint256 _fundingCycleId) external;\\n\\n    function tap(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unLockTreasury(\\n        uint256 _projectId,\\n        uint256 _fundingCycleId,\\n        uint256 _unlockAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc567bfe1f856ef4975f3a466a6f091eff22e8d5a8c6473d6b0ab6b340bf0206d\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    error ZeroAddress();\\n    error UnAuthorized();\\n    error UnknowTerminal();\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x6cc378750f4f01d98e587014e0ae7815d75788ab4741e5020cc0dd12815e5583\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminalUtility {\\n    error UnAuthorized();\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n}\\n\",\"keccak256\":\"0x358295960cfdafb516f540d130421deb236feff2a998ff8062cd31b890a87cfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airdropBatchMintTicket(uint256,uint256,address,uint256[],uint256[])": {
        "params": {
          "_amounts": "The payment information for this transaction",
          "_from": "The wallet address of owner",
          "_fundingCycleId": "The ID of the funding cycle period",
          "_projectId": "The ID of the DAO",
          "_tierIds": "The special token ids"
        }
      },
      "batchMintTicket(uint256,uint256,address,uint256[])": {
        "params": {
          "_amounts": "The payment information for this transaction",
          "_from": "The wallet address of owner",
          "_fundingCycleId": "The ID of the funding cycle period",
          "_projectId": "The ID of the DAO"
        }
      },
      "claimRoyaltyFee(uint256,uint256[],bytes32[][],uint256[])": {
        "params": {
          "_amounts": "Claim amounts",
          "_merkleProofs": "Merkle tree proofs",
          "_merkleRootIds": "Merkle tree root ids",
          "_projectId": "The project ID "
        }
      },
      "distributeRoyaltyFee(uint256,uint256,bytes32,string,bytes)": {
        "params": {
          "_distributeAmount": "The distribute amount of this cycle",
          "_ipfsHash": "The ipfs hash of merkle tree",
          "_merkleRoot": "Merkle tree root, record distribution amount of each member",
          "_projectId": "The project ID",
          "_signature": "The signature signed by signer"
        }
      },
      "getEstimatingUserAllocation(uint256,uint256,uint256[],uint256[])": {
        "params": {
          "_fundingCycleId": "the funding cycle id",
          "_projectId": "the project id of contribute dao",
          "_weights": "ticket weights by tier"
        }
      },
      "getUserAllocation(address,uint256,uint256)": {
        "params": {
          "_fundingCycleId": "The funding cycle id",
          "_projectId": "The ID of the DAO being contribute to",
          "_user": "The address of the calling user"
        }
      },
      "issue(uint256,uint256[],uint256[],uint256[])": {
        "params": {
          "_projectId": "The project ID",
          "_tierCapacities": "Total supply for each token",
          "_tierFees": "Royalty fees"
        }
      },
      "stake(uint256,uint256,address,(uint256,uint256,uint256)[])": {
        "params": {
          "_from": "The wallet address of the contributo",
          "_fundingCycleId": "The funding cycle ID",
          "_payInfos": "The payment information for this transaction",
          "_projectId": "The project ID"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airdropBatchMintTicket(uint256,uint256,address,uint256[],uint256[])": {
        "notice": "Batch mint special nfts for the address who have community token"
      },
      "batchMintTicket(uint256,uint256,address,uint256[])": {
        "notice": "Batch mint tickets"
      },
      "claimRoyaltyFee(uint256,uint256[],bytes32[][],uint256[])": {
        "notice": "Claim according to votes share"
      },
      "distributeRoyaltyFee(uint256,uint256,bytes32,string,bytes)": {
        "notice": "Start a new distribution"
      },
      "getEstimatingUserAllocation(uint256,uint256,uint256[],uint256[])": {
        "notice": "Get estimated allocations by funding cycle allocation 100000 means 0.1(10%), 1 meanss 0.000001(0.0001%), 1000000 means 1(100%)"
      },
      "getUserAllocation(address,uint256,uint256)": {
        "notice": "Get allocations by funding cycle allocation 100000 means 0.1(10%), 1 meanss 0.000001(0.0001%), 1000000 means 1(100%)"
      },
      "issue(uint256,uint256[],uint256[],uint256[])": {
        "notice": "Initialize the membershiopass for dao"
      },
      "stake(uint256,uint256,address,(uint256,uint256,uint256)[])": {
        "notice": "For the contribution that user need to deposit the fund to the pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1137,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11835,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "tierSizeOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11841,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "membershipPassOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_contract(IMembershipPass)16365)"
      },
      {
        "astId": 11847,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "royaltyDistributorOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_contract(IRoyaltyDistributor)16792)"
      },
      {
        "astId": 11854,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "totalBiddingAmountBy",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11861,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "totalSqrtWeightBy",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11871,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "depositedWeightBy",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(WeightInfo)16383_storage)))"
      },
      {
        "astId": 11878,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "claimedOf",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11885,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "airdropClaimedOf",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11892,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "airdropClaimedAmountOf",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11895,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "configStore",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IConfigStore)15827"
      },
      {
        "astId": 11898,
        "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
        "label": "fundingCycles",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IFundingCycles)16278"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConfigStore)15827": {
        "encoding": "inplace",
        "label": "contract IConfigStore",
        "numberOfBytes": "20"
      },
      "t_contract(IFundingCycles)16278": {
        "encoding": "inplace",
        "label": "contract IFundingCycles",
        "numberOfBytes": "20"
      },
      "t_contract(IMembershipPass)16365": {
        "encoding": "inplace",
        "label": "contract IMembershipPass",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltyDistributor)16792": {
        "encoding": "inplace",
        "label": "contract IRoyaltyDistributor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(WeightInfo)16383_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct WeightInfo)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(WeightInfo)16383_storage))"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_contract(IMembershipPass)16365)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IMembershipPass)",
        "numberOfBytes": "32",
        "value": "t_contract(IMembershipPass)16365"
      },
      "t_mapping(t_uint256,t_contract(IRoyaltyDistributor)16792)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IRoyaltyDistributor)",
        "numberOfBytes": "32",
        "value": "t_contract(IRoyaltyDistributor)16792"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(WeightInfo)16383_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct WeightInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(WeightInfo)16383_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(WeightInfo)16383_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WeightInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(WeightInfo)16383_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(WeightInfo)16383_storage": {
        "encoding": "inplace",
        "label": "struct WeightInfo",
        "members": [
          {
            "astId": 16380,
            "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16382,
            "contract": "contracts/MembershipPassBooth.sol:MembershipPassBooth",
            "label": "sqrtWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}